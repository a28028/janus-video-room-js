/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={624:(e,t,n)=>{var r;r=function(){return function e(t,n,r){function i(s,a){if(!n[s]){if(!t[s]){var c="function"==typeof _dereq_&&_dereq_;if(!a&&c)return c(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[s]={exports:{}};t[s][0].call(p.exports,(function(e){return i(t[s][1][e]||e)}),p,p.exports,e,t,n,r)}return n[s].exports}for(var o="function"==typeof _dereq_&&_dereq_,s=0;s<r.length;s++)i(r[s]);return i}({1:[function(e,t,n){"use strict";t.exports=function(e){var t=e._SomePromiseArray;function n(e){var n=new t(e),r=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),r}e.any=function(e){return n(e)},e.prototype.any=function(){return n(this)}}},{}],2:[function(e,t,n){"use strict";var r;try{throw new Error}catch(e){r=e}var i=e("./schedule"),o=e("./queue");function s(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new o(16),this._normalQueue=new o(16),this._haveDrainedQueues=!1;var e=this;this.drainQueues=function(){e._drainQueues()},this._schedule=i}function a(e){for(;e.length()>0;)c(e)}function c(e){var t=e.shift();if("function"!=typeof t)t._settlePromises();else{var n=e.shift(),r=e.shift();t.call(n,r)}}s.prototype.setScheduler=function(e){var t=this._schedule;return this._schedule=e,this._customScheduler=!0,t},s.prototype.hasCustomScheduler=function(){return this._customScheduler},s.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},s.prototype.fatalError=function(e,t){t?(process.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),process.exit(2)):this.throwLater(e)},s.prototype.throwLater=function(e,t){if(1===arguments.length&&(t=e,e=function(){throw t}),"undefined"!=typeof setTimeout)setTimeout((function(){e(t)}),0);else try{this._schedule((function(){e(t)}))}catch(e){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},s.prototype.invokeLater=function(e,t,n){this._lateQueue.push(e,t,n),this._queueTick()},s.prototype.invoke=function(e,t,n){this._normalQueue.push(e,t,n),this._queueTick()},s.prototype.settlePromises=function(e){this._normalQueue._pushOne(e),this._queueTick()},s.prototype._drainQueues=function(){a(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,a(this._lateQueue)},s.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},s.prototype._reset=function(){this._isTickUsed=!1},t.exports=s,t.exports.firstLineError=r},{"./queue":26,"./schedule":29}],3:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){var i=!1,o=function(e,t){this._reject(t)},s=function(e,t){t.promiseRejectionQueued=!0,t.bindingPromise._then(o,o,null,this,e)},a=function(e,t){0==(50397184&this._bitField)&&this._resolveCallback(t.target)},c=function(e,t){t.promiseRejectionQueued||this._reject(e)};e.prototype.bind=function(o){i||(i=!0,e.prototype._propagateFrom=r.propagateFromFunction(),e.prototype._boundValue=r.boundValueFunction());var u=n(o),p=new e(t);p._propagateFrom(this,1);var l=this._target();if(p._setBoundTo(u),u instanceof e){var d={promiseRejectionQueued:!1,promise:p,target:l,bindingPromise:u};l._then(t,s,void 0,p,d),u._then(a,c,void 0,p,d),p._setOnCancel(u)}else p._resolveCallback(l);return p},e.prototype._setBoundTo=function(e){void 0!==e?(this._bitField=2097152|this._bitField,this._boundTo=e):this._bitField=-2097153&this._bitField},e.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},e.bind=function(t,n){return e.resolve(n).bind(t)}}},{}],4:[function(e,t,n){"use strict";var r;"undefined"!=typeof Promise&&(r=Promise);var i=e("./promise")();i.noConflict=function(){try{Promise===i&&(Promise=r)}catch(e){}return i},t.exports=i},{"./promise":22}],5:[function(e,t,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}t.exports=function(t){var n=e("./util"),r=n.canEvaluate;function i(e){return function(e,r){var i;if(null!=e&&(i=e[r]),"function"!=typeof i){var o="Object "+n.classString(e)+" has no method '"+n.toString(r)+"'";throw new t.TypeError(o)}return i}(e,this.pop()).apply(e,this)}function o(e){return e[this]}function s(e){var t=+this;return t<0&&(t=Math.max(0,t+e.length)),e[t]}n.isIdentifier,t.prototype.call=function(e){var t=[].slice.call(arguments,1);return t.push(e),this._then(i,void 0,void 0,t,void 0)},t.prototype.get=function(e){var t;if("number"==typeof e)t=s;else if(r){var n=(void 0)(e);t=null!==n?n:o}else t=o;return this._then(t,void 0,void 0,e,void 0)}}},{"./util":36}],6:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o=e("./util"),s=o.tryCatch,a=o.errorObj,c=t._async;t.prototype.break=t.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var e=this,t=e;e._isCancellable();){if(!e._cancelBy(t)){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}var n=e._cancellationParent;if(null==n||!n._isCancellable()){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}e._isFollowing()&&e._followee().cancel(),e._setWillBeCancelled(),t=e,e=n}},t.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},t.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},t.prototype._cancelBy=function(e){return e===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},t.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},t.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),c.invoke(this._cancelPromises,this,void 0))},t.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},t.prototype._unsetOnCancel=function(){this._onCancelField=void 0},t.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},t.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},t.prototype._doInvokeOnCancel=function(e,t){if(o.isArray(e))for(var n=0;n<e.length;++n)this._doInvokeOnCancel(e[n],t);else if(void 0!==e)if("function"==typeof e){if(!t){var r=s(e).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),c.throwLater(r.e))}}else e._resultCancelled(this)},t.prototype._invokeOnCancel=function(){var e=this._onCancel();this._unsetOnCancel(),c.invoke(this._doInvokeOnCancel,this,e)},t.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},t.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(e,t,n){"use strict";t.exports=function(t){var n=e("./util"),r=e("./es5").keys,i=n.tryCatch,o=n.errorObj;return function(e,s,a){return function(c){var u=a._boundValue();e:for(var p=0;p<e.length;++p){var l=e[p];if(l===Error||null!=l&&l.prototype instanceof Error){if(c instanceof l)return i(s).call(u,c)}else if("function"==typeof l){var d=i(l).call(u,c);if(d===o)return d;if(d)return i(s).call(u,c)}else if(n.isObject(c)){for(var h=r(l),f=0;f<h.length;++f){var m=h[f];if(l[m]!=c[m])continue e}return i(s).call(u,c)}}return t}}}},{"./es5":13,"./util":36}],8:[function(e,t,n){"use strict";t.exports=function(e){var t=!1,n=[];function r(){this._trace=new r.CapturedTrace(i())}function i(){var e=n.length-1;if(e>=0)return n[e]}return e.prototype._promiseCreated=function(){},e.prototype._pushContext=function(){},e.prototype._popContext=function(){return null},e._peekContext=e.prototype._peekContext=function(){},r.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},r.prototype._popContext=function(){if(void 0!==this._trace){var e=n.pop(),t=e._promiseCreated;return e._promiseCreated=null,t}return null},r.CapturedTrace=null,r.create=function(){if(t)return new r},r.deactivateLongStackTraces=function(){},r.activateLongStackTraces=function(){var n=e.prototype._pushContext,o=e.prototype._popContext,s=e._peekContext,a=e.prototype._peekContext,c=e.prototype._promiseCreated;r.deactivateLongStackTraces=function(){e.prototype._pushContext=n,e.prototype._popContext=o,e._peekContext=s,e.prototype._peekContext=a,e.prototype._promiseCreated=c,t=!1},t=!0,e.prototype._pushContext=r.prototype._pushContext,e.prototype._popContext=r.prototype._popContext,e._peekContext=e.prototype._peekContext=i,e.prototype._promiseCreated=function(){var e=this._peekContext();e&&null==e._promiseCreated&&(e._promiseCreated=this)}},r}},{}],9:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o,s,a,c,u=t._async,p=e("./errors").Warning,l=e("./util"),d=e("./es5"),h=l.canAttachTrace,f=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,m=/\((?:timers\.js):\d+:\d+\)/,v=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,y=null,g=null,_=!1,b=!(0==l.env("BLUEBIRD_DEBUG")),C=!(0==l.env("BLUEBIRD_WARNINGS")||!b&&!l.env("BLUEBIRD_WARNINGS")),w=!(0==l.env("BLUEBIRD_LONG_STACK_TRACES")||!b&&!l.env("BLUEBIRD_LONG_STACK_TRACES")),T=0!=l.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(C||!!l.env("BLUEBIRD_W_FORGOTTEN_RETURN"));!function(){var e=[];function n(){for(var t=0;t<e.length;++t)e[t]._notifyUnhandledRejection();r()}function r(){e.length=0}c=function(t){e.push(t),setTimeout(n,1)},d.defineProperty(t,"_unhandledRejectionCheck",{value:n}),d.defineProperty(t,"_unhandledRejectionClear",{value:r})}(),t.prototype.suppressUnhandledRejections=function(){var e=this._target();e._bitField=-1048577&e._bitField|524288},t.prototype._ensurePossibleRejectionHandled=function(){0==(524288&this._bitField)&&(this._setRejectionIsUnhandled(),c(this))},t.prototype._notifyUnhandledRejectionIsHandled=function(){J("rejectionHandled",o,void 0,this)},t.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},t.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},t.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var e=this._settledValue();this._setUnhandledRejectionIsNotified(),J("unhandledRejection",s,e,this)}},t.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},t.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},t.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},t.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},t.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},t.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},t.prototype._warn=function(e,t,n){return H(e,t,n||this)},t.onPossiblyUnhandledRejection=function(e){var n=t._getContext();s=l.contextBind(n,e)},t.onUnhandledRejectionHandled=function(e){var n=t._getContext();o=l.contextBind(n,e)};var S=function(){};t.longStackTraces=function(){if(u.haveItemsQueued()&&!te.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!te.longStackTraces&&Q()){var e=t.prototype._captureStackTrace,r=t.prototype._attachExtraTrace,i=t.prototype._dereferenceTrace;te.longStackTraces=!0,S=function(){if(u.haveItemsQueued()&&!te.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");t.prototype._captureStackTrace=e,t.prototype._attachExtraTrace=r,t.prototype._dereferenceTrace=i,n.deactivateLongStackTraces(),te.longStackTraces=!1},t.prototype._captureStackTrace=G,t.prototype._attachExtraTrace=V,t.prototype._dereferenceTrace=B,n.activateLongStackTraces()}},t.hasLongStackTraces=function(){return te.longStackTraces&&Q()};var P={unhandledrejection:{before:function(){var e=l.global.onunhandledrejection;return l.global.onunhandledrejection=null,e},after:function(e){l.global.onunhandledrejection=e}},rejectionhandled:{before:function(){var e=l.global.onrejectionhandled;return l.global.onrejectionhandled=null,e},after:function(e){l.global.onrejectionhandled=e}}},E=function(){var e=function(e,t){if(!e)return!l.global.dispatchEvent(t);var n;try{return n=e.before(),!l.global.dispatchEvent(t)}finally{e.after(n)}};try{if("function"==typeof CustomEvent){var t=new CustomEvent("CustomEvent");return l.global.dispatchEvent(t),function(t,n){t=t.toLowerCase();var r=new CustomEvent(t,{detail:n,cancelable:!0});return d.defineProperty(r,"promise",{value:n.promise}),d.defineProperty(r,"reason",{value:n.reason}),e(P[t],r)}}return"function"==typeof Event?(t=new Event("CustomEvent"),l.global.dispatchEvent(t),function(t,n){t=t.toLowerCase();var r=new Event(t,{cancelable:!0});return r.detail=n,d.defineProperty(r,"promise",{value:n.promise}),d.defineProperty(r,"reason",{value:n.reason}),e(P[t],r)}):((t=document.createEvent("CustomEvent")).initCustomEvent("testingtheevent",!1,!0,{}),l.global.dispatchEvent(t),function(t,n){t=t.toLowerCase();var r=document.createEvent("CustomEvent");return r.initCustomEvent(t,!1,!0,n),e(P[t],r)})}catch(e){}return function(){return!1}}(),R=l.isNode?function(){return process.emit.apply(process,arguments)}:l.global?function(e){var t="on"+e.toLowerCase(),n=l.global[t];return!!n&&(n.apply(l.global,[].slice.call(arguments,1)),!0)}:function(){return!1};function k(e,t){return{promise:t}}var x={promiseCreated:k,promiseFulfilled:k,promiseRejected:k,promiseResolved:k,promiseCancelled:k,promiseChained:function(e,t,n){return{promise:t,child:n}},warning:function(e,t){return{warning:t}},unhandledRejection:function(e,t,n){return{reason:t,promise:n}},rejectionHandled:k},j=function(e){var t=!1;try{t=R.apply(null,arguments)}catch(e){u.throwLater(e),t=!0}var n=!1;try{n=E(e,x[e].apply(null,arguments))}catch(e){u.throwLater(e),n=!0}return n||t};function O(){return!1}function M(e,t,n){var r=this;try{e(t,n,(function(e){if("function"!=typeof e)throw new TypeError("onCancel must be a function, got: "+l.toString(e));r._attachCancellationCallback(e)}))}catch(e){return e}}function D(e){if(!this._isCancellable())return this;var t=this._onCancel();void 0!==t?l.isArray(t)?t.push(e):this._setOnCancel([t,e]):this._setOnCancel(e)}function I(){return this._onCancelField}function L(e){this._onCancelField=e}function A(){this._cancellationParent=void 0,this._onCancelField=void 0}function F(e,t){if(0!=(1&t)){this._cancellationParent=e;var n=e._branchesRemainingToCancel;void 0===n&&(n=0),e._branchesRemainingToCancel=n+1}0!=(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)}t.config=function(e){if("longStackTraces"in(e=Object(e))&&(e.longStackTraces?t.longStackTraces():!e.longStackTraces&&t.hasLongStackTraces()&&S()),"warnings"in e){var n=e.warnings;te.warnings=!!n,T=te.warnings,l.isObject(n)&&"wForgottenReturn"in n&&(T=!!n.wForgottenReturn)}if("cancellation"in e&&e.cancellation&&!te.cancellation){if(u.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");t.prototype._clearCancellationData=A,t.prototype._propagateFrom=F,t.prototype._onCancel=I,t.prototype._setOnCancel=L,t.prototype._attachCancellationCallback=D,t.prototype._execute=M,N=F,te.cancellation=!0}if("monitoring"in e&&(e.monitoring&&!te.monitoring?(te.monitoring=!0,t.prototype._fireEvent=j):!e.monitoring&&te.monitoring&&(te.monitoring=!1,t.prototype._fireEvent=O)),"asyncHooks"in e&&l.nodeSupportsAsyncResource){var o=te.asyncHooks,s=!!e.asyncHooks;o!==s&&(te.asyncHooks=s,s?r():i())}return t},t.prototype._fireEvent=O,t.prototype._execute=function(e,t,n){try{e(t,n)}catch(e){return e}},t.prototype._onCancel=function(){},t.prototype._setOnCancel=function(e){},t.prototype._attachCancellationCallback=function(e){},t.prototype._captureStackTrace=function(){},t.prototype._attachExtraTrace=function(){},t.prototype._dereferenceTrace=function(){},t.prototype._clearCancellationData=function(){},t.prototype._propagateFrom=function(e,t){};var N=function(e,t){0!=(2&t)&&e._isBound()&&this._setBoundTo(e._boundTo)};function U(){var e=this._boundTo;return void 0!==e&&e instanceof t?e.isFulfilled()?e.value():void 0:e}function G(){this._trace=new Z(this._peekContext())}function V(e,t){if(h(e)){var n=this._trace;if(void 0!==n&&t&&(n=n._parent),void 0!==n)n.attachExtraTrace(e);else if(!e.__stackCleaned__){var r=z(e);l.notEnumerableProp(e,"stack",r.message+"\n"+r.stack.join("\n")),l.notEnumerableProp(e,"__stackCleaned__",!0)}}}function B(){this._trace=void 0}function H(e,n,r){if(te.warnings){var i,o=new p(e);if(n)r._attachExtraTrace(o);else if(te.longStackTraces&&(i=t._peekContext()))i.attachExtraTrace(o);else{var s=z(o);o.stack=s.message+"\n"+s.stack.join("\n")}j("warning",o)||W(o,"",!0)}}function q(e){for(var t=[],n=0;n<e.length;++n){var r=e[n],i="    (No stack trace)"===r||y.test(r),o=i&&K(r);i&&!o&&(_&&" "!==r.charAt(0)&&(r="    "+r),t.push(r))}return t}function z(e){var t=e.stack,n=e.toString();return t="string"==typeof t&&t.length>0?function(e){for(var t=e.stack.replace(/\s+$/g,"").split("\n"),n=0;n<t.length;++n){var r=t[n];if("    (No stack trace)"===r||y.test(r))break}return n>0&&"SyntaxError"!=e.name&&(t=t.slice(n)),t}(e):["    (No stack trace)"],{message:n,stack:"SyntaxError"==e.name?t:q(t)}}function W(e,t,n){if("undefined"!=typeof console){var r;if(l.isObject(e)){var i=e.stack;r=t+g(i,e)}else r=t+String(e);"function"==typeof a?a(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function J(e,t,n,r){var i=!1;try{"function"==typeof t&&(i=!0,"rejectionHandled"===e?t(r):t(n,r))}catch(e){u.throwLater(e)}"unhandledRejection"===e?j(e,n,r)||i||W(n,"Unhandled rejection "):j(e,r)}function $(e){var t;if("function"==typeof e)t="[function "+(e.name||"anonymous")+"]";else{if(t=e&&"function"==typeof e.toString?e.toString():l.toString(e),/\[object [a-zA-Z0-9$_]+\]/.test(t))try{t=JSON.stringify(e)}catch(e){}0===t.length&&(t="(empty array)")}return"(<"+function(e){return e.length<41?e:e.substr(0,38)+"..."}(t)+">, no stack trace)"}function Q(){return"function"==typeof ee}var K=function(){return!1},X=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;function Y(e){var t=e.match(X);if(t)return{fileName:t[1],line:parseInt(t[2],10)}}function Z(e){this._parent=e,this._promisesCreated=0;var t=this._length=1+(void 0===e?0:e._length);ee(this,Z),t>32&&this.uncycle()}l.inherits(Z,Error),n.CapturedTrace=Z,Z.prototype.uncycle=function(){var e=this._length;if(!(e<2)){for(var t=[],n={},r=0,i=this;void 0!==i;++r)t.push(i),i=i._parent;for(r=(e=this._length=r)-1;r>=0;--r){var o=t[r].stack;void 0===n[o]&&(n[o]=r)}for(r=0;r<e;++r){var s=n[t[r].stack];if(void 0!==s&&s!==r){s>0&&(t[s-1]._parent=void 0,t[s-1]._length=1),t[r]._parent=void 0,t[r]._length=1;var a=r>0?t[r-1]:this;s<e-1?(a._parent=t[s+1],a._parent.uncycle(),a._length=a._parent._length+1):(a._parent=void 0,a._length=1);for(var c=a._length+1,u=r-2;u>=0;--u)t[u]._length=c,c++;return}}}},Z.prototype.attachExtraTrace=function(e){if(!e.__stackCleaned__){this.uncycle();for(var t=z(e),n=t.message,r=[t.stack],i=this;void 0!==i;)r.push(q(i.stack.split("\n"))),i=i._parent;!function(e){for(var t=e[0],n=1;n<e.length;++n){for(var r=e[n],i=t.length-1,o=t[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(a=s;a>=0;--a){var c=r[a];if(t[i]!==c)break;t.pop(),i--}t=r}}(r),function(e){for(var t=0;t<e.length;++t)(0===e[t].length||t+1<e.length&&e[t][0]===e[t+1][0])&&(e.splice(t,1),t--)}(r),l.notEnumerableProp(e,"stack",function(e,t){for(var n=0;n<t.length-1;++n)t[n].push("From previous event:"),t[n]=t[n].join("\n");return n<t.length&&(t[n]=t[n].join("\n")),e+"\n"+t.join("\n")}(n,r)),l.notEnumerableProp(e,"__stackCleaned__",!0)}};var ee=function(){var e=/^\s*at\s*/,t=function(e,t){return"string"==typeof e?e:void 0!==t.name&&void 0!==t.message?t.toString():$(t)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,y=e,g=t;var n=Error.captureStackTrace;return K=function(e){return f.test(e)},function(e,t){Error.stackTraceLimit+=6,n(e,t),Error.stackTraceLimit-=6}}var r,i=new Error;if("string"==typeof i.stack&&i.stack.split("\n")[0].indexOf("stackDetection@")>=0)return y=/@/,g=t,_=!0,function(e){e.stack=(new Error).stack};try{throw new Error}catch(e){r="stack"in e}return!("stack"in i)&&r&&"number"==typeof Error.stackTraceLimit?(y=e,g=t,function(e){Error.stackTraceLimit+=6;try{throw new Error}catch(t){e.stack=t.stack}Error.stackTraceLimit-=6}):(g=function(e,t){return"string"==typeof e?e:"object"!=typeof t&&"function"!=typeof t||void 0===t.name||void 0===t.message?$(t):t.toString()},null)}();"undefined"!=typeof console&&void 0!==console.warn&&(a=function(e){console.warn(e)},l.isNode&&process.stderr.isTTY?a=function(e,t){var n=t?"[33m":"[31m";console.warn(n+e+"[0m\n")}:l.isNode||"string"!=typeof(new Error).stack||(a=function(e,t){console.warn("%c"+e,t?"color: darkorange":"color: red")}));var te={warnings:C,longStackTraces:!1,cancellation:!1,monitoring:!1,asyncHooks:!1};return w&&t.longStackTraces(),{asyncHooks:function(){return te.asyncHooks},longStackTraces:function(){return te.longStackTraces},warnings:function(){return te.warnings},cancellation:function(){return te.cancellation},monitoring:function(){return te.monitoring},propagateFromFunction:function(){return N},boundValueFunction:function(){return U},checkForgottenReturns:function(e,t,n,r,i){if(void 0===e&&null!==t&&T){if(void 0!==i&&i._returnedNonUndefined())return;if(0==(65535&r._bitField))return;n&&(n+=" ");var o="",s="";if(t._trace){for(var a=t._trace.stack.split("\n"),c=q(a),u=c.length-1;u>=0;--u){var p=c[u];if(!m.test(p)){var l=p.match(v);l&&(o="at "+l[1]+":"+l[2]+":"+l[3]+" ");break}}if(c.length>0){var d=c[0];for(u=0;u<a.length;++u)if(a[u]===d){u>0&&(s="\n"+a[u-1]);break}}}var h="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+s;r._warn(h,!0,t)}},setBounds:function(e,t){if(Q()){for(var n,r,i=(e.stack||"").split("\n"),o=(t.stack||"").split("\n"),s=-1,a=-1,c=0;c<i.length;++c)if(u=Y(i[c])){n=u.fileName,s=u.line;break}for(c=0;c<o.length;++c){var u;if(u=Y(o[c])){r=u.fileName,a=u.line;break}}s<0||a<0||!n||!r||n!==r||s>=a||(K=function(e){if(f.test(e))return!0;var t=Y(e);return!!(t&&t.fileName===n&&s<=t.line&&t.line<=a)})}},warn:H,deprecated:function(e,t){var n=e+" is deprecated and will be removed in a future version.";return t&&(n+=" Use "+t+" instead."),H(n)},CapturedTrace:Z,fireDomEvent:E,fireGlobalEvent:R}}},{"./errors":12,"./es5":13,"./util":36}],10:[function(e,t,n){"use strict";t.exports=function(e){function t(){return this.value}function n(){throw this.reason}e.prototype.return=e.prototype.thenReturn=function(n){return n instanceof e&&n.suppressUnhandledRejections(),this._then(t,void 0,void 0,{value:n},void 0)},e.prototype.throw=e.prototype.thenThrow=function(e){return this._then(n,void 0,void 0,{reason:e},void 0)},e.prototype.catchThrow=function(e){if(arguments.length<=1)return this._then(void 0,n,void 0,{reason:e},void 0);var t=arguments[1],r=function(){throw t};return this.caught(e,r)},e.prototype.catchReturn=function(n){if(arguments.length<=1)return n instanceof e&&n.suppressUnhandledRejections(),this._then(void 0,t,void 0,{value:n},void 0);var r=arguments[1];r instanceof e&&r.suppressUnhandledRejections();var i=function(){return r};return this.caught(n,i)}}},{}],11:[function(e,t,n){"use strict";t.exports=function(e,t){var n=e.reduce,r=e.all;function i(){return r(this)}e.prototype.each=function(e){return n(this,e,t,0)._then(i,void 0,void 0,this,void 0)},e.prototype.mapSeries=function(e){return n(this,e,t,t)},e.each=function(e,r){return n(e,r,t,0)._then(i,void 0,void 0,e,void 0)},e.mapSeries=function(e,r){return n(e,r,t,t)}}},{}],12:[function(e,t,n){"use strict";var r,i,o=e("./es5"),s=o.freeze,a=e("./util"),c=a.inherits,u=a.notEnumerableProp;function p(e,t){function n(r){if(!(this instanceof n))return new n(r);u(this,"message","string"==typeof r?r:t),u(this,"name",e),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return c(n,Error),n}var l=p("Warning","warning"),d=p("CancellationError","cancellation error"),h=p("TimeoutError","timeout error"),f=p("AggregateError","aggregate error");try{r=TypeError,i=RangeError}catch(e){r=p("TypeError","type error"),i=p("RangeError","range error")}for(var m="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),v=0;v<m.length;++v)"function"==typeof Array.prototype[m[v]]&&(f.prototype[m[v]]=Array.prototype[m[v]]);o.defineProperty(f.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),f.prototype.isOperational=!0;var y=0;function g(e){if(!(this instanceof g))return new g(e);u(this,"name","OperationalError"),u(this,"message",e),this.cause=e,this.isOperational=!0,e instanceof Error?(u(this,"message",e.message),u(this,"stack",e.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}f.prototype.toString=function(){var e=Array(4*y+1).join(" "),t="\n"+e+"AggregateError of:\n";y++,e=Array(4*y+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=e+i[o];t+=(r=i.join("\n"))+"\n"}return y--,t},c(g,Error);var _=Error.__BluebirdErrorTypes__;_||(_=s({CancellationError:d,TimeoutError:h,OperationalError:g,RejectionError:g,AggregateError:f}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:_,writable:!1,enumerable:!1,configurable:!1})),t.exports={Error,TypeError:r,RangeError:i,CancellationError:_.CancellationError,OperationalError:_.OperationalError,TimeoutError:_.TimeoutError,AggregateError:_.AggregateError,Warning:l}},{"./es5":13,"./util":36}],13:[function(e,t,n){var r=function(){"use strict";return void 0===this}();if(r)t.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(e,t){var n=Object.getOwnPropertyDescriptor(e,t);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(e){var t=[];for(var n in e)i.call(e,n)&&t.push(n);return t};t.exports={isArray:function(e){try{return"[object Array]"===o.call(e)}catch(e){return!1}},keys:a,names:a,defineProperty:function(e,t,n){return e[t]=n.value,e},getDescriptor:function(e,t){return{value:e[t]}},freeze:function(e){return e},getPrototypeOf:function(e){try{return Object(e).constructor.prototype}catch(e){return s}},isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(e,t,n){"use strict";t.exports=function(e,t){var n=e.map;e.prototype.filter=function(e,r){return n(this,e,r,t)},e.filter=function(e,r,i){return n(e,r,i,t)}}},{}],15:[function(e,t,n){"use strict";t.exports=function(t,n,r){var i=e("./util"),o=t.CancellationError,s=i.errorObj,a=e("./catch_filter")(r);function c(e,t,n){this.promise=e,this.type=t,this.handler=n,this.called=!1,this.cancelPromise=null}function u(e){this.finallyHandler=e}function p(e,t){return null!=e.cancelPromise&&(arguments.length>1?e.cancelPromise._reject(t):e.cancelPromise._cancel(),e.cancelPromise=null,!0)}function l(){return h.call(this,this.promise._target()._settledValue())}function d(e){if(!p(this,e))return s.e=e,s}function h(e){var i=this.promise,a=this.handler;if(!this.called){this.called=!0;var c=this.isFinallyHandler()?a.call(i._boundValue()):a.call(i._boundValue(),e);if(c===r)return c;if(void 0!==c){i._setReturnedNonUndefined();var h=n(c,i);if(h instanceof t){if(null!=this.cancelPromise){if(h._isCancelled()){var f=new o("late cancellation observer");return i._attachExtraTrace(f),s.e=f,s}h.isPending()&&h._attachCancellationCallback(new u(this))}return h._then(l,d,void 0,this,void 0)}}}return i.isRejected()?(p(this),s.e=e,s):(p(this),e)}return c.prototype.isFinallyHandler=function(){return 0===this.type},u.prototype._resultCancelled=function(){p(this.finallyHandler)},t.prototype._passThrough=function(e,t,n,r){return"function"!=typeof e?this.then():this._then(n,r,void 0,new c(this,t,e),void 0)},t.prototype.lastly=t.prototype.finally=function(e){return this._passThrough(e,0,h,h)},t.prototype.tap=function(e){return this._passThrough(e,1,h)},t.prototype.tapCatch=function(e){var n=arguments.length;if(1===n)return this._passThrough(e,1,void 0,h);var r,o=new Array(n-1),s=0;for(r=0;r<n-1;++r){var c=arguments[r];if(!i.isObject(c))return t.reject(new TypeError("tapCatch statement predicate: expecting an object but got "+i.classString(c)));o[s++]=c}o.length=s;var u=arguments[r];return this._passThrough(a(o,u,this),1,void 0,h)},c}},{"./catch_filter":7,"./util":36}],16:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){var a=e("./errors").TypeError,c=e("./util"),u=c.errorObj,p=c.tryCatch,l=[];function d(e,n,i,o){if(s.cancellation()){var a=new t(r),c=this._finallyPromise=new t(r);this._promise=a.lastly((function(){return c})),a._captureStackTrace(),a._setOnCancel(this)}else(this._promise=new t(r))._captureStackTrace();this._stack=o,this._generatorFunction=e,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(l):l,this._yieldedPromise=null,this._cancellationPhase=!1}c.inherits(d,o),d.prototype._isResolved=function(){return null===this._promise},d.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},d.prototype._promiseCancelled=function(){if(!this._isResolved()){var e;if(void 0!==this._generator.return)this._promise._pushContext(),e=p(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var n=new t.CancellationError("generator .return() sentinel");t.coroutine.returnSentinel=n,this._promise._attachExtraTrace(n),this._promise._pushContext(),e=p(this._generator.throw).call(this._generator,n),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(e)}},d.prototype._promiseFulfilled=function(e){this._yieldedPromise=null,this._promise._pushContext();var t=p(this._generator.next).call(this._generator,e);this._promise._popContext(),this._continue(t)},d.prototype._promiseRejected=function(e){this._yieldedPromise=null,this._promise._attachExtraTrace(e),this._promise._pushContext();var t=p(this._generator.throw).call(this._generator,e);this._promise._popContext(),this._continue(t)},d.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof t){var e=this._yieldedPromise;this._yieldedPromise=null,e.cancel()}},d.prototype.promise=function(){return this._promise},d.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},d.prototype._continue=function(e){var n=this._promise;if(e===u)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(e.e,!1);var r=e.value;if(!0===e.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(o instanceof t||null!==(o=function(e,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=p(n[o])(e);if(r._popContext(),s===u){r._pushContext();var a=t.reject(u.e);return r._popContext(),a}var c=i(s,r);if(c instanceof t)return c}return null}(o,this._yieldHandlers,this._promise))){var s=(o=o._target())._bitField;0==(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&s)?t._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&s)?t._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new a("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",String(r))+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},t.coroutine=function(e,t){if("function"!=typeof e)throw new a("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(t).yieldHandler,r=d,i=(new Error).stack;return function(){var t=e.apply(this,arguments),o=new r(void 0,void 0,n,i),s=o.promise();return o._generator=t,o._promiseFulfilled(void 0),s}},t.coroutine.addYieldHandler=function(e){if("function"!=typeof e)throw new a("expecting a function but got "+c.classString(e));l.push(e)},t.spawn=function(e){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof e)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new d(e,this),i=r.promise();return r._run(t.spawn),i}}},{"./errors":12,"./util":36}],17:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o){var s=e("./util");s.canEvaluate,s.tryCatch,s.errorObj,t.join=function(){var e,t=arguments.length-1;t>0&&"function"==typeof arguments[t]&&(e=arguments[t]);var r=[].slice.call(arguments);e&&r.pop();var i=new n(r).promise();return void 0!==e?i.spread(e):i}}},{"./util":36}],18:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){var a=e("./util"),c=a.tryCatch,u=a.errorObj,p=t._async;function l(e,n,r,i){this.constructor$(e),this._promise._captureStackTrace();var s=t._getContext();if(this._callback=a.contextBind(s,n),this._preservedValues=i===o?new Array(this.length()):null,this._limit=r,this._inFlight=0,this._queue=[],p.invoke(this._asyncInit,this,void 0),a.isArray(e))for(var c=0;c<e.length;++c){var u=e[c];u instanceof t&&u.suppressUnhandledRejections()}}function d(e,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+a.classString(n));var s=0;if(void 0!==i){if("object"!=typeof i||null===i)return t.reject(new TypeError("options argument must be an object but it is "+a.classString(i)));if("number"!=typeof i.concurrency)return t.reject(new TypeError("'concurrency' must be a number but it is "+a.classString(i.concurrency)));s=i.concurrency}return new l(e,n,s="number"==typeof s&&isFinite(s)&&s>=1?s:0,o).promise()}a.inherits(l,n),l.prototype._asyncInit=function(){this._init$(void 0,-2)},l.prototype._init=function(){},l.prototype._promiseFulfilled=function(e,n){var r=this._values,o=this.length(),a=this._preservedValues,p=this._limit;if(n<0){if(r[n=-1*n-1]=e,p>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(p>=1&&this._inFlight>=p)return r[n]=e,this._queue.push(n),!1;null!==a&&(a[n]=e);var l=this._promise,d=this._callback,h=l._boundValue();l._pushContext();var f=c(d).call(h,e,n,o),m=l._popContext();if(s.checkForgottenReturns(f,m,null!==a?"Promise.filter":"Promise.map",l),f===u)return this._reject(f.e),!0;var v=i(f,this._promise);if(v instanceof t){var y=(v=v._target())._bitField;if(0==(50397184&y))return p>=1&&this._inFlight++,r[n]=v,v._proxy(this,-1*(n+1)),!1;if(0==(33554432&y))return 0!=(16777216&y)?(this._reject(v._reason()),!0):(this._cancel(),!0);f=v._value()}r[n]=f}return++this._totalResolved>=o&&(null!==a?this._filter(r,a):this._resolve(r),!0)},l.prototype._drainQueue=function(){for(var e=this._queue,t=this._limit,n=this._values;e.length>0&&this._inFlight<t;){if(this._isResolved())return;var r=e.pop();this._promiseFulfilled(n[r],r)}},l.prototype._filter=function(e,t){for(var n=t.length,r=new Array(n),i=0,o=0;o<n;++o)e[o]&&(r[i++]=t[o]);r.length=i,this._resolve(r)},l.prototype.preservedValues=function(){return this._preservedValues},t.prototype.map=function(e,t){return d(this,e,t,null)},t.map=function(e,t,n,r){return d(e,t,n,r)}}},{"./util":36}],19:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o){var s=e("./util"),a=s.tryCatch;t.method=function(e){if("function"!=typeof e)throw new t.TypeError("expecting a function but got "+s.classString(e));return function(){var r=new t(n);r._captureStackTrace(),r._pushContext();var i=a(e).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},t.attempt=t.try=function(e){if("function"!=typeof e)return i("expecting a function but got "+s.classString(e));var r,c=new t(n);if(c._captureStackTrace(),c._pushContext(),arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var u=arguments[1],p=arguments[2];r=s.isArray(u)?a(e).apply(p,u):a(e).call(p,u)}else r=a(e)();var l=c._popContext();return o.checkForgottenReturns(r,l,"Promise.try",c),c._resolveFromSyncValue(r),c},t.prototype._resolveFromSyncValue=function(e){e===s.errorObj?this._rejectCallback(e.e,!1):this._resolveCallback(e,!0)}}},{"./util":36}],20:[function(e,t,n){"use strict";var r=e("./util"),i=r.maybeWrapAsError,o=e("./errors").OperationalError,s=e("./es5"),a=/^(?:name|message|stack|cause)$/;function c(e){var t;if(function(e){return e instanceof Error&&s.getPrototypeOf(e)===Error.prototype}(e)){(t=new o(e)).name=e.name,t.message=e.message,t.stack=e.stack;for(var n=s.keys(e),i=0;i<n.length;++i){var c=n[i];a.test(c)||(t[c]=e[c])}return t}return r.markAsOriginatingFromRejection(e),e}t.exports=function(e,t){return function(n,r){if(null!==e){if(n){var o=c(i(n));e._attachExtraTrace(o),e._reject(o)}else if(t){var s=[].slice.call(arguments,1);e._fulfill(s)}else e._fulfill(r);e=null}}}},{"./errors":12,"./es5":13,"./util":36}],21:[function(e,t,n){"use strict";t.exports=function(t){var n=e("./util"),r=t._async,i=n.tryCatch,o=n.errorObj;function s(e,t){if(!n.isArray(e))return a.call(this,e,t);var s=i(t).apply(this._boundValue(),[null].concat(e));s===o&&r.throwLater(s.e)}function a(e,t){var n=this._boundValue(),s=void 0===e?i(t).call(n,null):i(t).call(n,null,e);s===o&&r.throwLater(s.e)}function c(e,t){if(!e){var n=new Error(e+"");n.cause=e,e=n}var s=i(t).call(this._boundValue(),e);s===o&&r.throwLater(s.e)}t.prototype.asCallback=t.prototype.nodeify=function(e,t){if("function"==typeof e){var n=a;void 0!==t&&Object(t).spread&&(n=s),this._then(n,c,void 0,this,e)}return this}}},{"./util":36}],22:[function(e,t,n){"use strict";t.exports=function(){var n=function(){return new y("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},r=function(){return new M.PromiseInspection(this._target())},i=function(e){return M.reject(new y(e))};function o(){}var s={},a=e("./util");a.setReflectHandler(r);var c=function(){var e=process.domain;return void 0===e?null:e},u=function(){return{domain:c(),async:null}},p=a.isNode&&a.nodeSupportsAsyncResource?e("async_hooks").AsyncResource:null,l=function(){return{domain:c(),async:new p("Bluebird::Promise")}},d=a.isNode?u:function(){return null};a.notEnumerableProp(M,"_getContext",d);var h=e("./es5"),f=e("./async"),m=new f;h.defineProperty(M,"_async",{value:m});var v=e("./errors"),y=M.TypeError=v.TypeError;M.RangeError=v.RangeError;var g=M.CancellationError=v.CancellationError;M.TimeoutError=v.TimeoutError,M.OperationalError=v.OperationalError,M.RejectionError=v.OperationalError,M.AggregateError=v.AggregateError;var _=function(){},b={},C={},w=e("./thenables")(M,_),T=e("./promise_array")(M,_,w,i,o),S=e("./context")(M),P=S.create,E=e("./debuggability")(M,S,(function(){d=l,a.notEnumerableProp(M,"_getContext",l)}),(function(){d=u,a.notEnumerableProp(M,"_getContext",u)})),R=(E.CapturedTrace,e("./finally")(M,w,C)),k=e("./catch_filter")(C),x=e("./nodeback"),j=a.errorObj,O=a.tryCatch;function M(e){e!==_&&function(e,t){if(null==e||e.constructor!==M)throw new y("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");if("function"!=typeof t)throw new y("expecting a function but got "+a.classString(t))}(this,e),this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._resolveFromExecutor(e),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function D(e){this.promise._resolveCallback(e)}function I(e){this.promise._rejectCallback(e,!1)}function L(e){var t=new M(_);t._fulfillmentHandler0=e,t._rejectionHandler0=e,t._promise0=e,t._receiver0=e}return M.prototype.toString=function(){return"[object Promise]"},M.prototype.caught=M.prototype.catch=function(e){var t=arguments.length;if(t>1){var n,r=new Array(t-1),o=0;for(n=0;n<t-1;++n){var s=arguments[n];if(!a.isObject(s))return i("Catch statement predicate: expecting an object but got "+a.classString(s));r[o++]=s}if(r.length=o,"function"!=typeof(e=arguments[n]))throw new y("The last argument to .catch() must be a function, got "+a.toString(e));return this.then(void 0,k(r,e,this))}return this.then(void 0,e)},M.prototype.reflect=function(){return this._then(r,r,void 0,this,void 0)},M.prototype.then=function(e,t){if(E.warnings()&&arguments.length>0&&"function"!=typeof e&&"function"!=typeof t){var n=".then() only accepts functions but was passed: "+a.classString(e);arguments.length>1&&(n+=", "+a.classString(t)),this._warn(n)}return this._then(e,t,void 0,void 0,void 0)},M.prototype.done=function(e,t){this._then(e,t,void 0,void 0,void 0)._setIsFinal()},M.prototype.spread=function(e){return"function"!=typeof e?i("expecting a function but got "+a.classString(e)):this.all()._then(e,void 0,void 0,b,void 0)},M.prototype.toJSON=function(){var e={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(e.fulfillmentValue=this.value(),e.isFulfilled=!0):this.isRejected()&&(e.rejectionReason=this.reason(),e.isRejected=!0),e},M.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new T(this).promise()},M.prototype.error=function(e){return this.caught(a.originatesFromRejection,e)},M.getNewLibraryCopy=t.exports,M.is=function(e){return e instanceof M},M.fromNode=M.fromCallback=function(e){var t=new M(_);t._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=O(e)(x(t,n));return r===j&&t._rejectCallback(r.e,!0),t._isFateSealed()||t._setAsyncGuaranteed(),t},M.all=function(e){return new T(e).promise()},M.cast=function(e){var t=w(e);return t instanceof M||((t=new M(_))._captureStackTrace(),t._setFulfilled(),t._rejectionHandler0=e),t},M.resolve=M.fulfilled=M.cast,M.reject=M.rejected=function(e){var t=new M(_);return t._captureStackTrace(),t._rejectCallback(e,!0),t},M.setScheduler=function(e){if("function"!=typeof e)throw new y("expecting a function but got "+a.classString(e));return m.setScheduler(e)},M.prototype._then=function(e,t,n,r,i){var o=void 0!==i,s=o?i:new M(_),c=this._target(),u=c._bitField;o||(s._propagateFrom(this,3),s._captureStackTrace(),void 0===r&&0!=(2097152&this._bitField)&&(r=0!=(50397184&u)?this._boundValue():c===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,s));var p=d();if(0!=(50397184&u)){var l,h,f=c._settlePromiseCtx;0!=(33554432&u)?(h=c._rejectionHandler0,l=e):0!=(16777216&u)?(h=c._fulfillmentHandler0,l=t,c._unsetRejectionIsUnhandled()):(f=c._settlePromiseLateCancellationObserver,h=new g("late cancellation observer"),c._attachExtraTrace(h),l=t),m.invoke(f,c,{handler:a.contextBind(p,l),promise:s,receiver:r,value:h})}else c._addCallbacks(e,t,s,r,p);return s},M.prototype._length=function(){return 65535&this._bitField},M.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},M.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},M.prototype._setLength=function(e){this._bitField=-65536&this._bitField|65535&e},M.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},M.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},M.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},M.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},M.prototype._isFinal=function(){return(4194304&this._bitField)>0},M.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},M.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},M.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},M.prototype._setAsyncGuaranteed=function(){if(!m.hasCustomScheduler()){var e=this._bitField;this._bitField=e|(536870912&e)>>2^134217728}},M.prototype._setNoAsyncGuarantee=function(){this._bitField=-134217729&(536870912|this._bitField)},M.prototype._receiverAt=function(e){var t=0===e?this._receiver0:this[4*e-4+3];if(t!==s)return void 0===t&&this._isBound()?this._boundValue():t},M.prototype._promiseAt=function(e){return this[4*e-4+2]},M.prototype._fulfillmentHandlerAt=function(e){return this[4*e-4+0]},M.prototype._rejectionHandlerAt=function(e){return this[4*e-4+1]},M.prototype._boundValue=function(){},M.prototype._migrateCallback0=function(e){e._bitField;var t=e._fulfillmentHandler0,n=e._rejectionHandler0,r=e._promise0,i=e._receiverAt(0);void 0===i&&(i=s),this._addCallbacks(t,n,r,i,null)},M.prototype._migrateCallbackAt=function(e,t){var n=e._fulfillmentHandlerAt(t),r=e._rejectionHandlerAt(t),i=e._promiseAt(t),o=e._receiverAt(t);void 0===o&&(o=s),this._addCallbacks(n,r,i,o,null)},M.prototype._addCallbacks=function(e,t,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof e&&(this._fulfillmentHandler0=a.contextBind(i,e)),"function"==typeof t&&(this._rejectionHandler0=a.contextBind(i,t));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof e&&(this[s+0]=a.contextBind(i,e)),"function"==typeof t&&(this[s+1]=a.contextBind(i,t))}return this._setLength(o+1),o},M.prototype._proxy=function(e,t){this._addCallbacks(void 0,void 0,t,e,null)},M.prototype._resolveCallback=function(e,t){if(0==(117506048&this._bitField)){if(e===this)return this._rejectCallback(n(),!1);var r=w(e,this);if(!(r instanceof M))return this._fulfill(e);t&&this._propagateFrom(r,2);var i=r._target();if(i!==this){var o=i._bitField;if(0==(50397184&o)){var s=this._length();s>0&&i._migrateCallback0(this);for(var a=1;a<s;++a)i._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(r)}else if(0!=(33554432&o))this._fulfill(i._value());else if(0!=(16777216&o))this._reject(i._reason());else{var c=new g("late cancellation observer");i._attachExtraTrace(c),this._reject(c)}}else this._reject(n())}},M.prototype._rejectCallback=function(e,t,n){var r=a.ensureErrorObject(e),i=r===e;if(!i&&!n&&E.warnings()){var o="a promise was rejected with a non-error: "+a.classString(e);this._warn(o,!0)}this._attachExtraTrace(r,!!t&&i),this._reject(e)},M.prototype._resolveFromExecutor=function(e){if(e!==_){var t=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(e,(function(e){t._resolveCallback(e)}),(function(e){t._rejectCallback(e,n)}));n=!1,this._popContext(),void 0!==r&&t._rejectCallback(r,!0)}},M.prototype._settlePromiseFromHandler=function(e,t,n,r){var i=r._bitField;if(0==(65536&i)){var o;r._pushContext(),t===b?n&&"number"==typeof n.length?o=O(e).apply(this._boundValue(),n):(o=j).e=new y("cannot .spread() a non-array: "+a.classString(n)):o=O(e).call(t,n);var s=r._popContext();0==(65536&(i=r._bitField))&&(o===C?r._reject(n):o===j?r._rejectCallback(o.e,!1):(E.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},M.prototype._target=function(){for(var e=this;e._isFollowing();)e=e._followee();return e},M.prototype._followee=function(){return this._rejectionHandler0},M.prototype._setFollowee=function(e){this._rejectionHandler0=e},M.prototype._settlePromise=function(e,t,n,i){var s=e instanceof M,a=this._bitField,c=0!=(134217728&a);0!=(65536&a)?(s&&e._invokeInternalOnCancel(),n instanceof R&&n.isFinallyHandler()?(n.cancelPromise=e,O(t).call(n,i)===j&&e._reject(j.e)):t===r?e._fulfill(r.call(n)):n instanceof o?n._promiseCancelled(e):s||e instanceof T?e._cancel():n.cancel()):"function"==typeof t?s?(c&&e._setAsyncGuaranteed(),this._settlePromiseFromHandler(t,n,i,e)):t.call(n,i,e):n instanceof o?n._isResolved()||(0!=(33554432&a)?n._promiseFulfilled(i,e):n._promiseRejected(i,e)):s&&(c&&e._setAsyncGuaranteed(),0!=(33554432&a)?e._fulfill(i):e._reject(i))},M.prototype._settlePromiseLateCancellationObserver=function(e){var t=e.handler,n=e.promise,r=e.receiver,i=e.value;"function"==typeof t?n instanceof M?this._settlePromiseFromHandler(t,r,i,n):t.call(r,i,n):n instanceof M&&n._reject(i)},M.prototype._settlePromiseCtx=function(e){this._settlePromise(e.promise,e.handler,e.receiver,e.value)},M.prototype._settlePromise0=function(e,t,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,e,i,t)},M.prototype._clearCallbackDataAtIndex=function(e){var t=4*e-4;this[t+2]=this[t+3]=this[t+0]=this[t+1]=void 0},M.prototype._fulfill=function(e){var t=this._bitField;if(!((117506048&t)>>>16)){if(e===this){var r=n();return this._attachExtraTrace(r),this._reject(r)}this._setFulfilled(),this._rejectionHandler0=e,(65535&t)>0&&(0!=(134217728&t)?this._settlePromises():m.settlePromises(this),this._dereferenceTrace())}},M.prototype._reject=function(e){var t=this._bitField;if(!((117506048&t)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=e,this._isFinal())return m.fatalError(e,a.isNode);(65535&t)>0?m.settlePromises(this):this._ensurePossibleRejectionHandled()}},M.prototype._fulfillPromises=function(e,t){for(var n=1;n<e;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,t)}},M.prototype._rejectPromises=function(e,t){for(var n=1;n<e;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,t)}},M.prototype._settlePromises=function(){var e=this._bitField,t=65535&e;if(t>0){if(0!=(16842752&e)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,e),this._rejectPromises(t,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,e),this._fulfillPromises(t,r)}this._setLength(0)}this._clearCancellationData()},M.prototype._settledValue=function(){var e=this._bitField;return 0!=(33554432&e)?this._rejectionHandler0:0!=(16777216&e)?this._fulfillmentHandler0:void 0},"undefined"!=typeof Symbol&&Symbol.toStringTag&&h.defineProperty(M.prototype,Symbol.toStringTag,{get:function(){return"Object"}}),M.defer=M.pending=function(){return E.deprecated("Promise.defer","new Promise"),{promise:new M(_),resolve:D,reject:I}},a.notEnumerableProp(M,"_makeSelfResolutionError",n),e("./method")(M,_,w,i,E),e("./bind")(M,_,w,E),e("./cancel")(M,T,i,E),e("./direct_resolve")(M),e("./synchronous_inspection")(M),e("./join")(M,T,w,_,m),M.Promise=M,M.version="3.7.2",e("./call_get.js")(M),e("./generators.js")(M,i,_,w,o,E),e("./map.js")(M,T,i,w,_,E),e("./nodeify.js")(M),e("./promisify.js")(M,_),e("./props.js")(M,T,w,i),e("./race.js")(M,_,w,i),e("./reduce.js")(M,T,i,w,_,E),e("./settle.js")(M,T,E),e("./some.js")(M,T,i),e("./timers.js")(M,_,E),e("./using.js")(M,i,w,P,_,E),e("./any.js")(M),e("./each.js")(M,_),e("./filter.js")(M,_),a.toFastProperties(M),a.toFastProperties(M.prototype),L({a:1}),L({b:2}),L({c:3}),L(1),L((function(){})),L(void 0),L(!1),L(new M(_)),E.setBounds(f.firstLineError,a.lastLineError),M}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36,async_hooks:void 0}],23:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o){var s=e("./util");function a(e){var r=this._promise=new t(n);e instanceof t&&(r._propagateFrom(e,3),e.suppressUnhandledRejections()),r._setOnCancel(this),this._values=e,this._length=0,this._totalResolved=0,this._init(void 0,-2)}return s.isArray,s.inherits(a,o),a.prototype.length=function(){return this._length},a.prototype.promise=function(){return this._promise},a.prototype._init=function e(n,o){var a=r(this._values,this._promise);if(a instanceof t){var c=(a=a._target())._bitField;if(this._values=a,0==(50397184&c))return this._promise._setAsyncGuaranteed(),a._then(e,this._reject,void 0,this,o);if(0==(33554432&c))return 0!=(16777216&c)?this._reject(a._reason()):this._cancel();a=a._value()}if(null!==(a=s.asArray(a)))0!==a.length?this._iterate(a):-5===o?this._resolveEmptyArray():this._resolve(function(e){switch(e){case-2:return[];case-3:return{};case-6:return new Map}}(o));else{var u=i("expecting an array or an iterable object but got "+s.classString(a)).reason();this._promise._rejectCallback(u,!1)}},a.prototype._iterate=function(e){var n=this.getActualLength(e.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;a<n;++a){var c=r(e[a],i);s=c instanceof t?(c=c._target())._bitField:null,o?null!==s&&c.suppressUnhandledRejections():null!==s?0==(50397184&s)?(c._proxy(this,a),this._values[a]=c):o=0!=(33554432&s)?this._promiseFulfilled(c._value(),a):0!=(16777216&s)?this._promiseRejected(c._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(c,a)}o||i._setAsyncGuaranteed()},a.prototype._isResolved=function(){return null===this._values},a.prototype._resolve=function(e){this._values=null,this._promise._fulfill(e)},a.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},a.prototype._reject=function(e){this._values=null,this._promise._rejectCallback(e,!1)},a.prototype._promiseFulfilled=function(e,t){return this._values[t]=e,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},a.prototype._promiseCancelled=function(){return this._cancel(),!0},a.prototype._promiseRejected=function(e){return this._totalResolved++,this._reject(e),!0},a.prototype._resultCancelled=function(){if(!this._isResolved()){var e=this._values;if(this._cancel(),e instanceof t)e.cancel();else for(var n=0;n<e.length;++n)e[n]instanceof t&&e[n].cancel()}},a.prototype.shouldCopyValues=function(){return!0},a.prototype.getActualLength=function(e){return e},a}},{"./util":36}],24:[function(e,t,n){"use strict";t.exports=function(t,n){var r={},i=e("./util"),o=e("./nodeback"),s=i.withAppended,a=i.maybeWrapAsError,c=i.canEvaluate,u=e("./errors").TypeError,p={__isPromisified__:!0},l=new RegExp("^(?:"+["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"].join("|")+")$"),d=function(e){return i.isIdentifier(e)&&"_"!==e.charAt(0)&&"constructor"!==e};function h(e){return!l.test(e)}function f(e){try{return!0===e.__isPromisified__}catch(e){return!1}}function m(e,t,n){var r=i.getDataPropertyOrDefault(e,t+n,p);return!!r&&f(r)}var v=c?void 0:function(e,c,u,p,l,d){var h=function(){return this}(),f=e;function m(){var i=c;c===r&&(i=this);var u=new t(n);u._captureStackTrace();var p="string"==typeof f&&this!==h?this[f]:e,l=o(u,d);try{p.apply(i,s(arguments,l))}catch(e){u._rejectCallback(a(e),!0,!0)}return u._isFateSealed()||u._setAsyncGuaranteed(),u}return"string"==typeof f&&(e=p),i.notEnumerableProp(m,"__isPromisified__",!0),m};function y(e,t,n,o,s){for(var a=new RegExp(t.replace(/([$])/,"\\$")+"$"),c=function(e,t,n,r){for(var o=i.inheritedDataKeys(e),s=[],a=0;a<o.length;++a){var c=o[a],p=e[c],l=r===d||d(c);"function"!=typeof p||f(p)||m(e,c,t)||!r(c,p,e,l)||s.push(c,p)}return function(e,t,n){for(var r=0;r<e.length;r+=2){var i=e[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<e.length;s+=2)if(e[s]===o)throw new u("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",t))}}(s,t,n),s}(e,t,a,n),p=0,l=c.length;p<l;p+=2){var h=c[p],y=c[p+1],g=h+t;if(o===v)e[g]=v(h,r,h,y,t,s);else{var _=o(y,(function(){return v(h,r,h,y,t,s)}));i.notEnumerableProp(_,"__isPromisified__",!0),e[g]=_}}return i.toFastProperties(e),e}t.promisify=function(e,t){if("function"!=typeof e)throw new u("expecting a function but got "+i.classString(e));if(f(e))return e;var n,o,s,a=(n=e,o=void 0===(t=Object(t)).context?r:t.context,s=!!t.multiArgs,v(n,o,void 0,n,null,s));return i.copyDescriptors(e,a,h),a},t.promisifyAll=function(e,t){if("function"!=typeof e&&"object"!=typeof e)throw new u("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(t=Object(t)).multiArgs,r=t.suffix;"string"!=typeof r&&(r="Async");var o=t.filter;"function"!=typeof o&&(o=d);var s=t.promisifier;if("function"!=typeof s&&(s=v),!i.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var a=i.inheritedDataKeys(e),c=0;c<a.length;++c){var p=e[a[c]];"constructor"!==a[c]&&i.isClass(p)&&(y(p.prototype,r,o,s,n),y(p,r,o,s,n))}return y(e,r,o,s,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o,s=e("./util"),a=s.isObject,c=e("./es5");"function"==typeof Map&&(o=Map);var u=function(){var e=0,t=0;function n(n,r){this[e]=n,this[e+t]=r,e++}return function(r){t=r.size,e=0;var i=new Array(2*r.size);return r.forEach(n,i),i}}();function p(e){var t,n=!1;if(void 0!==o&&e instanceof o)t=u(e),n=!0;else{var r=c.keys(e),i=r.length;t=new Array(2*i);for(var s=0;s<i;++s){var a=r[s];t[s]=e[a],t[s+i]=a}}this.constructor$(t),this._isMap=n,this._init$(void 0,n?-6:-3)}function l(e){var n,o=r(e);return a(o)?(n=o instanceof t?o._then(t.props,void 0,void 0,void 0,void 0):new p(o).promise(),o instanceof t&&n._propagateFrom(o,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}s.inherits(p,n),p.prototype._init=function(){},p.prototype._promiseFulfilled=function(e,t){if(this._values[t]=e,++this._totalResolved>=this._length){var n;if(this._isMap)n=function(e){for(var t=new o,n=e.length/2|0,r=0;r<n;++r){var i=e[n+r],s=e[r];t.set(i,s)}return t}(this._values);else{n={};for(var r=this.length(),i=0,s=this.length();i<s;++i)n[this._values[i+r]]=this._values[i]}return this._resolve(n),!0}return!1},p.prototype.shouldCopyValues=function(){return!1},p.prototype.getActualLength=function(e){return e>>1},t.prototype.props=function(){return l(this)},t.props=function(e){return l(e)}}},{"./es5":13,"./util":36}],26:[function(e,t,n){"use strict";function r(e){this._capacity=e,this._length=0,this._front=0}r.prototype._willBeOverCapacity=function(e){return this._capacity<e},r.prototype._pushOne=function(e){var t=this.length();this._checkCapacity(t+1),this[this._front+t&this._capacity-1]=e,this._length=t+1},r.prototype.push=function(e,t,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(e),this._pushOne(t),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=e,this[i+1&o]=t,this[i+2&o]=n,this._length=r},r.prototype.shift=function(){var e=this._front,t=this[e];return this[e]=void 0,this._front=e+1&this._capacity-1,this._length--,t},r.prototype.length=function(){return this._length},r.prototype._checkCapacity=function(e){this._capacity<e&&this._resizeTo(this._capacity<<1)},r.prototype._resizeTo=function(e){var t=this._capacity;this._capacity=e,function(e,t,n,r,i){for(var o=0;o<i;++o)n[o+r]=e[o+0],e[o+0]=void 0}(this,0,this,t,this._front+this._length&t-1)},t.exports=r},{}],27:[function(e,t,n){"use strict";t.exports=function(t,n,r,i){var o=e("./util");function s(e,a){var c,u=r(e);if(u instanceof t)return(c=u).then((function(e){return s(e,c)}));if(null===(e=o.asArray(e)))return i("expecting an array or an iterable object but got "+o.classString(e));var p=new t(n);void 0!==a&&p._propagateFrom(a,3);for(var l=p._fulfill,d=p._reject,h=0,f=e.length;h<f;++h){var m=e[h];(void 0!==m||h in e)&&t.cast(m)._then(l,d,void 0,p,null)}return p}t.race=function(e){return s(e,void 0)},t.prototype.race=function(){return s(this,void 0)}}},{"./util":36}],28:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){var a=e("./util"),c=a.tryCatch;function u(e,n,r,i){this.constructor$(e);var s=t._getContext();this._fn=a.contextBind(s,n),void 0!==r&&(r=t.resolve(r))._attachCancellationCallback(this),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?Array(this._length):0===i?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function p(e,t){this.isFulfilled()?t._resolve(e):t._reject(e)}function l(e,t,n,i){return"function"!=typeof t?r("expecting a function but got "+a.classString(t)):new u(e,t,n,i).promise()}function d(e){this.accum=e,this.array._gotAccum(e);var n=i(this.value,this.array._promise);return n instanceof t?(this.array._currentCancellable=n,n._then(h,void 0,void 0,this,void 0)):h.call(this,n)}function h(e){var n,r=this.array,i=r._promise,o=c(r._fn);i._pushContext(),(n=void 0!==r._eachValues?o.call(i._boundValue(),e,this.index,this.length):o.call(i._boundValue(),this.accum,e,this.index,this.length))instanceof t&&(r._currentCancellable=n);var a=i._popContext();return s.checkForgottenReturns(n,a,void 0!==r._eachValues?"Promise.each":"Promise.reduce",i),n}a.inherits(u,n),u.prototype._gotAccum=function(e){void 0!==this._eachValues&&null!==this._eachValues&&e!==o&&this._eachValues.push(e)},u.prototype._eachComplete=function(e){return null!==this._eachValues&&this._eachValues.push(e),this._eachValues},u.prototype._init=function(){},u.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},u.prototype.shouldCopyValues=function(){return!1},u.prototype._resolve=function(e){this._promise._resolveCallback(e),this._values=null},u.prototype._resultCancelled=function(e){if(e===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof t&&this._currentCancellable.cancel(),this._initialValue instanceof t&&this._initialValue.cancel())},u.prototype._iterate=function(e){var n,r;this._values=e;var i=e.length;void 0!==this._initialValue?(n=this._initialValue,r=0):(n=t.resolve(e[0]),r=1),this._currentCancellable=n;for(var o=r;o<i;++o){var s=e[o];s instanceof t&&s.suppressUnhandledRejections()}if(!n.isRejected())for(;r<i;++r){var a={accum:null,value:e[r],index:r,length:i,array:this};n=n._then(d,void 0,void 0,a,void 0),0==(127&r)&&n._setNoAsyncGuarantee()}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(p,p,void 0,n,this)},t.prototype.reduce=function(e,t){return l(this,e,t,null)},t.reduce=function(e,t,n,r){return l(e,t,n,r)}}},{"./util":36}],29:[function(e,t,r){"use strict";var i,o,s,a,c,u=e("./util"),p=u.getNativePromise();if(u.isNode&&"undefined"==typeof MutationObserver){var l=n.g.setImmediate,d=process.nextTick;i=u.isRecentNode?function(e){l.call(n.g,e)}:function(e){d.call(process,e)}}else if("function"==typeof p&&"function"==typeof p.resolve){var h=p.resolve();i=function(e){h.then(e)}}else i="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)||!("classList"in document.documentElement)?"undefined"!=typeof setImmediate?function(e){setImmediate(e)}:"undefined"!=typeof setTimeout?function(e){setTimeout(e,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}:(o=document.createElement("div"),s={attributes:!0},a=!1,c=document.createElement("div"),new MutationObserver((function(){o.classList.toggle("foo"),a=!1})).observe(c,s),function(e){var t=new MutationObserver((function(){t.disconnect(),e()}));t.observe(o,s),a||(a=!0,c.classList.toggle("foo"))});t.exports=i},{"./util":36}],30:[function(e,t,n){"use strict";t.exports=function(t,n,r){var i=t.PromiseInspection;function o(e){this.constructor$(e)}e("./util").inherits(o,n),o.prototype._promiseResolved=function(e,t){return this._values[e]=t,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},o.prototype._promiseFulfilled=function(e,t){var n=new i;return n._bitField=33554432,n._settledValueField=e,this._promiseResolved(t,n)},o.prototype._promiseRejected=function(e,t){var n=new i;return n._bitField=16777216,n._settledValueField=e,this._promiseResolved(t,n)},t.settle=function(e){return r.deprecated(".settle()",".reflect()"),new o(e).promise()},t.allSettled=function(e){return new o(e).promise()},t.prototype.settle=function(){return t.settle(this)}}},{"./util":36}],31:[function(e,t,n){"use strict";t.exports=function(t,n,r){var i=e("./util"),o=e("./errors").RangeError,s=e("./errors").AggregateError,a=i.isArray,c={};function u(e){this.constructor$(e),this._howMany=0,this._unwrap=!1,this._initialized=!1}function p(e,t){if((0|t)!==t||t<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new u(e),i=n.promise();return n.setHowMany(t),n.init(),i}i.inherits(u,n),u.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var e=a(this._values);!this._isResolved()&&e&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},u.prototype.init=function(){this._initialized=!0,this._init()},u.prototype.setUnwrap=function(){this._unwrap=!0},u.prototype.howMany=function(){return this._howMany},u.prototype.setHowMany=function(e){this._howMany=e},u.prototype._promiseFulfilled=function(e){return this._addFulfilled(e),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},u.prototype._promiseRejected=function(e){return this._addRejected(e),this._checkOutcome()},u.prototype._promiseCancelled=function(){return this._values instanceof t||null==this._values?this._cancel():(this._addRejected(c),this._checkOutcome())},u.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var e=new s,t=this.length();t<this._values.length;++t)this._values[t]!==c&&e.push(this._values[t]);return e.length>0?this._reject(e):this._cancel(),!0}return!1},u.prototype._fulfilled=function(){return this._totalResolved},u.prototype._rejected=function(){return this._values.length-this.length()},u.prototype._addRejected=function(e){this._values.push(e)},u.prototype._addFulfilled=function(e){this._values[this._totalResolved++]=e},u.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},u.prototype._getRangeError=function(e){var t="Input array must contain at least "+this._howMany+" items but contains only "+e+" items";return new o(t)},u.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},t.some=function(e,t){return p(e,t)},t.prototype.some=function(e){return p(this,e)},t._SomePromiseArray=u}},{"./errors":12,"./util":36}],32:[function(e,t,n){"use strict";t.exports=function(e){function t(e){void 0!==e?(e=e._target(),this._bitField=e._bitField,this._settledValueField=e._isFateSealed()?e._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}t.prototype._settledValue=function(){return this._settledValueField};var n=t.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=t.prototype.error=t.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},i=t.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},o=t.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},s=t.prototype.isPending=function(){return 0==(50397184&this._bitField)},a=t.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};t.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},e.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},e.prototype._isCancelled=function(){return this._target().__isCancelled()},e.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},e.prototype.isPending=function(){return s.call(this._target())},e.prototype.isRejected=function(){return o.call(this._target())},e.prototype.isFulfilled=function(){return i.call(this._target())},e.prototype.isResolved=function(){return a.call(this._target())},e.prototype.value=function(){return n.call(this._target())},e.prototype.reason=function(){var e=this._target();return e._unsetRejectionIsUnhandled(),r.call(e)},e.prototype._value=function(){return this._settledValue()},e.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},e.PromiseInspection=t}},{}],33:[function(e,t,n){"use strict";t.exports=function(t,n){var r=e("./util"),i=r.errorObj,o=r.isObject,s={}.hasOwnProperty;return function(e,a){if(o(e)){if(e instanceof t)return e;var c=function(e){try{return function(e){return e.then}(e)}catch(e){return i.e=e,i}}(e);if(c===i){a&&a._pushContext();var u=t.reject(c.e);return a&&a._popContext(),u}if("function"==typeof c)return function(e){try{return s.call(e,"_promise0")}catch(e){return!1}}(e)?(u=new t(n),e._then(u._fulfill,u._reject,void 0,u,null),u):function(e,o,s){var a=new t(n),c=a;s&&s._pushContext(),a._captureStackTrace(),s&&s._popContext();var u=!0,p=r.tryCatch(o).call(e,(function(e){a&&(a._resolveCallback(e),a=null)}),(function(e){a&&(a._rejectCallback(e,u,!0),a=null)}));return u=!1,a&&p===i&&(a._rejectCallback(p.e,!0,!0),a=null),c}(e,c,a)}return e}}},{"./util":36}],34:[function(e,t,n){"use strict";t.exports=function(t,n,r){var i=e("./util"),o=t.TimeoutError;function s(e){this.handle=e}s.prototype._resultCancelled=function(){clearTimeout(this.handle)};var a=function(e){return c(+this).thenReturn(e)},c=t.delay=function(e,i){var o,c;return void 0!==i?(o=t.resolve(i)._then(a,null,null,e,void 0),r.cancellation()&&i instanceof t&&o._setOnCancel(i)):(o=new t(n),c=setTimeout((function(){o._fulfill()}),+e),r.cancellation()&&o._setOnCancel(new s(c)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};function u(e){return clearTimeout(this.handle),e}function p(e){throw clearTimeout(this.handle),e}t.prototype.delay=function(e){return c(e,this)},t.prototype.timeout=function(e,t){var n,a;e=+e;var c=new s(setTimeout((function(){n.isPending()&&function(e,t,n){var r;r="string"!=typeof t?t instanceof Error?t:new o("operation timed out"):new o(t),i.markAsOriginatingFromRejection(r),e._attachExtraTrace(r),e._reject(r),null!=n&&n.cancel()}(n,t,a)}),e));return r.cancellation()?(a=this.then(),(n=a._then(u,p,void 0,c,void 0))._setOnCancel(c)):n=this._then(u,p,void 0,c,void 0),n}}},{"./util":36}],35:[function(e,t,n){"use strict";t.exports=function(t,n,r,i,o,s){var a=e("./util"),c=e("./errors").TypeError,u=e("./util").inherits,p=a.errorObj,l=a.tryCatch,d={};function h(e){setTimeout((function(){throw e}),0)}function f(e,n){var i=0,s=e.length,a=new t(o);return function o(){if(i>=s)return a._fulfill();var c=function(e){var t=r(e);return t!==e&&"function"==typeof e._isDisposable&&"function"==typeof e._getDisposer&&e._isDisposable()&&t._setDisposable(e._getDisposer()),t}(e[i++]);if(c instanceof t&&c._isDisposable()){try{c=r(c._getDisposer().tryDispose(n),e.promise)}catch(e){return h(e)}if(c instanceof t)return c._then(o,h,null,null,null)}o()}(),a}function m(e,t,n){this._data=e,this._promise=t,this._context=n}function v(e,t,n){this.constructor$(e,t,n)}function y(e){return m.isDisposer(e)?(this.resources[this.index]._setDisposable(e),e.promise()):e}function g(e){this.length=e,this.promise=null,this[e-1]=null}m.prototype.data=function(){return this._data},m.prototype.promise=function(){return this._promise},m.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():d},m.prototype.tryDispose=function(e){var t=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=t!==d?this.doDispose(t,e):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},m.isDisposer=function(e){return null!=e&&"function"==typeof e.resource&&"function"==typeof e.tryDispose},u(v,m),v.prototype.doDispose=function(e,t){return this.data().call(e,e,t)},g.prototype._resultCancelled=function(){for(var e=this.length,n=0;n<e;++n){var r=this[n];r instanceof t&&r.cancel()}},t.using=function(){var e=arguments.length;if(e<2)return n("you must pass at least 2 arguments to Promise.using");var i,o=arguments[e-1];if("function"!=typeof o)return n("expecting a function but got "+a.classString(o));var c=!0;2===e&&Array.isArray(arguments[0])?(e=(i=arguments[0]).length,c=!1):(i=arguments,e--);for(var u=new g(e),d=0;d<e;++d){var h=i[d];if(m.isDisposer(h)){var v=h;(h=h.promise())._setDisposable(v)}else{var _=r(h);_ instanceof t&&(h=_._then(y,null,null,{resources:u,index:d},void 0))}u[d]=h}var b=new Array(u.length);for(d=0;d<b.length;++d)b[d]=t.resolve(u[d]).reflect();var C=t.all(b).then((function(e){for(var t=0;t<e.length;++t){var n=e[t];if(n.isRejected())return p.e=n.error(),p;if(!n.isFulfilled())return void C.cancel();e[t]=n.value()}w._pushContext(),o=l(o);var r=c?o.apply(void 0,e):o(e),i=w._popContext();return s.checkForgottenReturns(r,i,"Promise.using",w),r})),w=C.lastly((function(){var e=new t.PromiseInspection(C);return f(u,e)}));return u.promise=w,w._setOnCancel(u),w},t.prototype._setDisposable=function(e){this._bitField=131072|this._bitField,this._disposer=e},t.prototype._isDisposable=function(){return(131072&this._bitField)>0},t.prototype._getDisposer=function(){return this._disposer},t.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},t.prototype.disposer=function(e){if("function"==typeof e)return new v(e,this,i());throw new c}}},{"./errors":12,"./util":36}],36:[function(e,t,r){"use strict";var i,o=e("./es5"),s="undefined"==typeof navigator,a={e:{}},c="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:void 0!==this?this:null;function u(){try{var e=i;return i=null,e.apply(this,arguments)}catch(e){return a.e=e,a}}function p(e){return null==e||!0===e||!1===e||"string"==typeof e||"number"==typeof e}function l(e,t,n){if(p(e))return e;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return o.defineProperty(e,t,r),e}var d=function(){var e=[Array.prototype,Object.prototype,Function.prototype],t=function(t){for(var n=0;n<e.length;++n)if(e[n]===t)return!0;return!1};if(o.isES5){var n=Object.getOwnPropertyNames;return function(e){for(var r=[],i=Object.create(null);null!=e&&!t(e);){var s;try{s=n(e)}catch(e){return r}for(var a=0;a<s.length;++a){var c=s[a];if(!i[c]){i[c]=!0;var u=Object.getOwnPropertyDescriptor(e,c);null!=u&&null==u.get&&null==u.set&&r.push(c)}}e=o.getPrototypeOf(e)}return r}}var r={}.hasOwnProperty;return function(n){if(t(n))return[];var i=[];e:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<e.length;++s)if(r.call(e[s],o))continue e;i.push(o)}return i}}(),h=/this\s*\.\s*\S+\s*=/;var f=/^[a-z$_][a-z$_0-9]*$/i;function m(e){try{return e+""}catch(e){return"[no string representation]"}}function v(e){return e instanceof Error||null!==e&&"object"==typeof e&&"string"==typeof e.message&&"string"==typeof e.name}function y(e){return v(e)&&o.propertyIsWritable(e,"stack")}var g="stack"in new Error?function(e){return y(e)?e:new Error(m(e))}:function(e){if(y(e))return e;try{throw new Error(m(e))}catch(e){return e}};function _(e){return{}.toString.call(e)}var b=function(e){return o.isArray(e)?e:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var C="function"==typeof Array.from?function(e){return Array.from(e)}:function(e){for(var t,n=[],r=e[Symbol.iterator]();!(t=r.next()).done;)n.push(t.value);return n};b=function(e){return o.isArray(e)?e:null!=e&&"function"==typeof e[Symbol.iterator]?C(e):null}}var w,T="undefined"!=typeof process&&"[object process]"===_(process).toLowerCase(),S="undefined"!=typeof process&&void 0!==process.env;var P,E={setReflectHandler:function(e){w=e},isClass:function(e){try{if("function"==typeof e){var t=o.names(e.prototype),n=o.isES5&&t.length>1,r=t.length>0&&!(1===t.length&&"constructor"===t[0]),i=h.test(e+"")&&o.names(e).length>0;if(n||r||i)return!0}return!1}catch(e){return!1}},isIdentifier:function(e){return f.test(e)},inheritedDataKeys:d,getDataPropertyOrDefault:function(e,t,n){if(!o.isES5)return{}.hasOwnProperty.call(e,t)?e[t]:void 0;var r=Object.getOwnPropertyDescriptor(e,t);return null!=r?null==r.get&&null==r.set?r.value:n:void 0},thrower:function(e){throw e},isArray:o.isArray,asArray:b,notEnumerableProp:l,isPrimitive:p,isObject:function(e){return"function"==typeof e||"object"==typeof e&&null!==e},isError:v,canEvaluate:s,errorObj:a,tryCatch:function(e){return i=e,u},inherits:function(e,t){var n={}.hasOwnProperty;function r(){for(var r in this.constructor=e,this.constructor$=t,t.prototype)n.call(t.prototype,r)&&"$"!==r.charAt(r.length-1)&&(this[r+"$"]=t.prototype[r])}return r.prototype=t.prototype,e.prototype=new r,e.prototype},withAppended:function(e,t){var n,r=e.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=e[n];return i[n]=t,i},maybeWrapAsError:function(e){return p(e)?new Error(m(e)):e},toFastProperties:function(e){function t(){}t.prototype=e;var n=new t;function r(){return typeof n.foo}return r(),r(),e},filledRange:function(e,t,n){for(var r=new Array(e),i=0;i<e;++i)r[i]=t+i+n;return r},toString:m,canAttachTrace:y,ensureErrorObject:g,originatesFromRejection:function(e){return null!=e&&(e instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===e.isOperational)},markAsOriginatingFromRejection:function(e){try{l(e,"isOperational",!0)}catch(e){}},classString:_,copyDescriptors:function(e,t,n){for(var r=o.names(e),i=0;i<r.length;++i){var s=r[i];if(n(s))try{o.defineProperty(t,s,o.getDescriptor(e,s))}catch(e){}}},isNode:T,hasEnvVariables:S,env:function(e){return S?process.env[e]:void 0},global:c,getNativePromise:function(){if("function"==typeof Promise)try{if("[object Promise]"===_(new Promise((function(){}))))return Promise}catch(e){}},contextBind:function(e,t){if(null===e||"function"!=typeof t||t===w)return t;null!==e.domain&&(t=e.domain.bind(t));var n=e.async;if(null!==n){var r=t;t=function(){var e=new Array(2).concat([].slice.call(arguments));return e[0]=r,e[1]=this,n.runInAsyncScope.apply(n,e)}}return t}};E.isRecentNode=E.isNode&&(process.versions&&process.versions.node?P=process.versions.node.split(".").map(Number):process.version&&(P=process.version.split(".").map(Number)),0===P[0]&&P[1]>10||P[0]>0),E.nodeSupportsAsyncResource=E.isNode&&function(){var t=!1;try{t="function"==typeof e("async_hooks").AsyncResource.prototype.runInAsyncScope}catch(e){t=!1}return t}(),E.isNode&&E.toFastProperties(process);try{throw new Error}catch(e){E.lastLineError=e}t.exports=E},{"./es5":13,async_hooks:void 0}]},{},[4])(4)},e.exports=r(),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)},284:e=>{var t=function(){if("object"==typeof self&&self)return self;if("object"==typeof window&&window)return window;throw new Error("Unable to resolve global `this`")};e.exports=function(){if(this)return this;if("object"==typeof globalThis&&globalThis)return globalThis;try{Object.defineProperty(Object.prototype,"__global__",{get:function(){return this},configurable:!0})}catch(e){return t()}try{return __global__||t()}finally{delete Object.prototype.__global__}}()},387:(e,t,n)=>{var r;!function(i){var o=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};function s(){this._events={},this._conf&&a.call(this,this._conf)}function a(e){e?(this._conf=e,e.delimiter&&(this.delimiter=e.delimiter),this._events.maxListeners=e.maxListeners!==i?e.maxListeners:10,e.wildcard&&(this.wildcard=e.wildcard),e.newListener&&(this.newListener=e.newListener),e.verboseMemoryLeak&&(this.verboseMemoryLeak=e.verboseMemoryLeak),this.wildcard&&(this.listenerTree={})):this._events.maxListeners=10}function c(e,t){var n="(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.";this.verboseMemoryLeak?(n+=" Event name: %s.",console.error(n,e,t)):console.error(n,e),console.trace&&console.trace()}function u(e){this._events={},this.newListener=!1,this.verboseMemoryLeak=!1,a.call(this,e)}function p(e,t,n,r){if(!n)return[];var i,o,s,a,c,u,l,d=[],h=t.length,f=t[r],m=t[r+1];if(r===h&&n._listeners){if("function"==typeof n._listeners)return e&&e.push(n._listeners),[n];for(i=0,o=n._listeners.length;i<o;i++)e&&e.push(n._listeners[i]);return[n]}if("*"===f||"**"===f||n[f]){if("*"===f){for(s in n)"_listeners"!==s&&n.hasOwnProperty(s)&&(d=d.concat(p(e,t,n[s],r+1)));return d}if("**"===f){for(s in(l=r+1===h||r+2===h&&"*"===m)&&n._listeners&&(d=d.concat(p(e,t,n,h))),n)"_listeners"!==s&&n.hasOwnProperty(s)&&("*"===s||"**"===s?(n[s]._listeners&&!l&&(d=d.concat(p(e,t,n[s],h))),d=d.concat(p(e,t,n[s],r))):d=s===m?d.concat(p(e,t,n[s],r+2)):d.concat(p(e,t,n[s],r)));return d}d=d.concat(p(e,t,n[f],r+1))}if((a=n["*"])&&p(e,t,a,r+1),c=n["**"])if(r<h)for(s in c._listeners&&p(e,t,c,h),c)"_listeners"!==s&&c.hasOwnProperty(s)&&(s===m?p(e,t,c[s],r+2):s===f?p(e,t,c[s],r+1):((u={})[s]=c[s],p(e,t,{"**":u},r+1)));else c._listeners?p(e,t,c,h):c["*"]&&c["*"]._listeners&&p(e,t,c["*"],h);return d}function l(e,t){for(var n=0,r=(e="string"==typeof e?e.split(this.delimiter):e.slice()).length;n+1<r;n++)if("**"===e[n]&&"**"===e[n+1])return;for(var o=this.listenerTree,s=e.shift();s!==i;){if(o[s]||(o[s]={}),o=o[s],0===e.length)return o._listeners?("function"==typeof o._listeners&&(o._listeners=[o._listeners]),o._listeners.push(t),!o._listeners.warned&&this._events.maxListeners>0&&o._listeners.length>this._events.maxListeners&&(o._listeners.warned=!0,c.call(this,o._listeners.length,s))):o._listeners=t,!0;s=e.shift()}return!0}u.EventEmitter2=u,u.prototype.delimiter=".",u.prototype.setMaxListeners=function(e){e!==i&&(this._events||s.call(this),this._events.maxListeners=e,this._conf||(this._conf={}),this._conf.maxListeners=e)},u.prototype.event="",u.prototype.once=function(e,t){return this.many(e,1,t),this},u.prototype.many=function(e,t,n){var r=this;if("function"!=typeof n)throw new Error("many only accepts instances of Function");function i(){0==--t&&r.off(e,i),n.apply(this,arguments)}return i._origin=n,this.on(e,i),r},u.prototype.emit=function(){this._events||s.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return!1;var t,n,r,i,o,a=arguments.length;if(this._all&&this._all.length){if(o=this._all.slice(),a>3)for(t=new Array(a),i=0;i<a;i++)t[i]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,a){case 1:o[r].call(this,e);break;case 2:o[r].call(this,e,arguments[1]);break;case 3:o[r].call(this,e,arguments[1],arguments[2]);break;default:o[r].apply(this,t)}}if(this.wildcard){o=[];var c="string"==typeof e?e.split(this.delimiter):e.slice();p.call(this,o,c,this.listenerTree,0)}else{if("function"==typeof(o=this._events[e])){switch(this.event=e,a){case 1:o.call(this);break;case 2:o.call(this,arguments[1]);break;case 3:o.call(this,arguments[1],arguments[2]);break;default:for(t=new Array(a-1),i=1;i<a;i++)t[i-1]=arguments[i];o.apply(this,t)}return!0}o&&(o=o.slice())}if(o&&o.length){if(a>3)for(t=new Array(a-1),i=1;i<a;i++)t[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,a){case 1:o[r].call(this);break;case 2:o[r].call(this,arguments[1]);break;case 3:o[r].call(this,arguments[1],arguments[2]);break;default:o[r].apply(this,t)}return!0}if(!this._all&&"error"===e)throw arguments[1]instanceof Error?arguments[1]:new Error("Uncaught, unspecified 'error' event.");return!!this._all},u.prototype.emitAsync=function(){this._events||s.call(this);var e=arguments[0];if("newListener"===e&&!this.newListener&&!this._events.newListener)return Promise.resolve([!1]);var t,n,r,i,o,a=[],c=arguments.length;if(this._all){if(c>3)for(t=new Array(c),i=1;i<c;i++)t[i]=arguments[i];for(r=0,n=this._all.length;r<n;r++)switch(this.event=e,c){case 1:a.push(this._all[r].call(this,e));break;case 2:a.push(this._all[r].call(this,e,arguments[1]));break;case 3:a.push(this._all[r].call(this,e,arguments[1],arguments[2]));break;default:a.push(this._all[r].apply(this,t))}}if(this.wildcard){o=[];var u="string"==typeof e?e.split(this.delimiter):e.slice();p.call(this,o,u,this.listenerTree,0)}else o=this._events[e];if("function"==typeof o)switch(this.event=e,c){case 1:a.push(o.call(this));break;case 2:a.push(o.call(this,arguments[1]));break;case 3:a.push(o.call(this,arguments[1],arguments[2]));break;default:for(t=new Array(c-1),i=1;i<c;i++)t[i-1]=arguments[i];a.push(o.apply(this,t))}else if(o&&o.length){if(c>3)for(t=new Array(c-1),i=1;i<c;i++)t[i-1]=arguments[i];for(r=0,n=o.length;r<n;r++)switch(this.event=e,c){case 1:a.push(o[r].call(this));break;case 2:a.push(o[r].call(this,arguments[1]));break;case 3:a.push(o[r].call(this,arguments[1],arguments[2]));break;default:a.push(o[r].apply(this,t))}}else if(!this._all&&"error"===e)return arguments[1]instanceof Error?Promise.reject(arguments[1]):Promise.reject("Uncaught, unspecified 'error' event.");return Promise.all(a)},u.prototype.on=function(e,t){if("function"==typeof e)return this.onAny(e),this;if("function"!=typeof t)throw new Error("on only accepts instances of Function");return this._events||s.call(this),this.emit("newListener",e,t),this.wildcard?(l.call(this,e,t),this):(this._events[e]?("function"==typeof this._events[e]&&(this._events[e]=[this._events[e]]),this._events[e].push(t),!this._events[e].warned&&this._events.maxListeners>0&&this._events[e].length>this._events.maxListeners&&(this._events[e].warned=!0,c.call(this,this._events[e].length,e))):this._events[e]=t,this)},u.prototype.onAny=function(e){if("function"!=typeof e)throw new Error("onAny only accepts instances of Function");return this._all||(this._all=[]),this._all.push(e),this},u.prototype.addListener=u.prototype.on,u.prototype.off=function(e,t){if("function"!=typeof t)throw new Error("removeListener only takes instances of Function");var n,r=[];if(this.wildcard){var s="string"==typeof e?e.split(this.delimiter):e.slice();r=p.call(this,null,s,this.listenerTree,0)}else{if(!this._events[e])return this;n=this._events[e],r.push({_listeners:n})}for(var a=0;a<r.length;a++){var c=r[a];if(n=c._listeners,o(n)){for(var u=-1,l=0,d=n.length;l<d;l++)if(n[l]===t||n[l].listener&&n[l].listener===t||n[l]._origin&&n[l]._origin===t){u=l;break}if(u<0)continue;return this.wildcard?c._listeners.splice(u,1):this._events[e].splice(u,1),0===n.length&&(this.wildcard?delete c._listeners:delete this._events[e]),this.emit("removeListener",e,t),this}(n===t||n.listener&&n.listener===t||n._origin&&n._origin===t)&&(this.wildcard?delete c._listeners:delete this._events[e],this.emit("removeListener",e,t))}return function e(t){if(t!==i){var n=Object.keys(t);for(var r in n){var o=n[r],s=t[o];s instanceof Function||"object"!=typeof s||null===s||(Object.keys(s).length>0&&e(t[o]),0===Object.keys(s).length&&delete t[o])}}}(this.listenerTree),this},u.prototype.offAny=function(e){var t,n=0,r=0;if(e&&this._all&&this._all.length>0){for(n=0,r=(t=this._all).length;n<r;n++)if(e===t[n])return t.splice(n,1),this.emit("removeListenerAny",e),this}else{for(n=0,r=(t=this._all).length;n<r;n++)this.emit("removeListenerAny",t[n]);this._all=[]}return this},u.prototype.removeListener=u.prototype.off,u.prototype.removeAllListeners=function(e){if(0===arguments.length)return!this._events||s.call(this),this;if(this.wildcard)for(var t="string"==typeof e?e.split(this.delimiter):e.slice(),n=p.call(this,null,t,this.listenerTree,0),r=0;r<n.length;r++){var i=n[r];i._listeners=null}else this._events&&(this._events[e]=null);return this},u.prototype.listeners=function(e){if(this.wildcard){var t=[],n="string"==typeof e?e.split(this.delimiter):e.slice();return p.call(this,t,n,this.listenerTree,0),t}return this._events||s.call(this),this._events[e]||(this._events[e]=[]),o(this._events[e])||(this._events[e]=[this._events[e]]),this._events[e]},u.prototype.listenerCount=function(e){return this.listeners(e).length},u.prototype.listenersAny=function(){return this._all?this._all:[]},(r=function(){return u}.call(t,n,t,e))===i||(e.exports=r)}()},482:(e,t,n)=>{"use strict";!function(){var t=n(601).log,r=n(601).browserDetails;e.exports.browserDetails=r,e.exports.extractVersion=n(601).extractVersion,e.exports.disableLog=n(601).disableLog,n(601).disableLog(!0);var i=n(288)||null,o=n(915)||null,s=n(990)||null,a=n(557)||null;switch(r.browser){case"opera":case"chrome":if(!i||!i.shimPeerConnection)return void t("Chrome shim is not included in this adapter release.");t("adapter.js shimming chrome."),e.exports.browserShim=i,i.shimGetUserMedia(),i.shimSourceObject(),i.shimPeerConnection(),i.shimOnTrack();break;case"firefox":if(!s||!s.shimPeerConnection)return void t("Firefox shim is not included in this adapter release.");t("adapter.js shimming firefox."),e.exports.browserShim=s,s.shimGetUserMedia(),s.shimSourceObject(),s.shimPeerConnection(),s.shimOnTrack();break;case"edge":if(!o||!o.shimPeerConnection)return void t("MS edge shim is not included in this adapter release.");t("adapter.js shimming edge."),e.exports.browserShim=o,o.shimPeerConnection();break;case"safari":if(!a)return void t("Safari shim is not included in this adapter release.");t("adapter.js shimming safari."),e.exports.browserShim=a,a.shimGetUserMedia();break;default:t("Unsupported browser!")}}()},288:(e,t,n)=>{"use strict";var r=n(601).log,i=n(601).browserDetails,o={shimOnTrack:function(){"object"==typeof window&&window.RTCPeerConnection&&!("ontrack"in window.RTCPeerConnection.prototype)&&Object.defineProperty(window.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){var t=this;this._ontrack&&(this.removeEventListener("track",this._ontrack),this.removeEventListener("addstream",this._ontrackpoly)),this.addEventListener("track",this._ontrack=e),this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.addEventListener("addtrack",(function(n){var r=new Event("track");r.track=n.track,r.receiver={track:n.track},r.streams=[e.stream],t.dispatchEvent(r)})),e.stream.getTracks().forEach(function(t){var n=new Event("track");n.track=t,n.receiver={track:t},n.streams=[e.stream],this.dispatchEvent(n)}.bind(this))}.bind(this))}})},shimSourceObject:function(){"object"==typeof window&&window.HTMLMediaElement&&!("srcObject"in window.HTMLMediaElement.prototype)&&Object.defineProperty(window.HTMLMediaElement.prototype,"srcObject",{get:function(){return this._srcObject},set:function(e){var t=this;this._srcObject=e,this.src&&URL.revokeObjectURL(this.src),e?(this.src=URL.createObjectURL(e),e.addEventListener("addtrack",(function(){t.src&&URL.revokeObjectURL(t.src),t.src=URL.createObjectURL(e)})),e.addEventListener("removetrack",(function(){t.src&&URL.revokeObjectURL(t.src),t.src=URL.createObjectURL(e)}))):this.src=""}})},shimPeerConnection:function(){window.RTCPeerConnection=function(e,t){r("PeerConnection"),e&&e.iceTransportPolicy&&(e.iceTransports=e.iceTransportPolicy);var n=new webkitRTCPeerConnection(e,t),i=n.getStats.bind(n);return n.getStats=function(e,t,n){var r=this,o=arguments;if(arguments.length>0&&"function"==typeof e)return i(e,t);var s=function(e){var t={};return e.result().forEach((function(e){var n={id:e.id,timestamp:e.timestamp,type:e.type};e.names().forEach((function(t){n[t]=e.stat(t)})),t[n.id]=n})),t};if(arguments.length>=2){var a=function(e){o[1](s(e))};return i.apply(this,[a,arguments[0]])}return new Promise((function(t,n){1===o.length&&"object"==typeof e?i.apply(r,[function(e){t.apply(null,[s(e)])},n]):i.apply(r,[t,n])}))},n},window.RTCPeerConnection.prototype=webkitRTCPeerConnection.prototype,webkitRTCPeerConnection.generateCertificate&&Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return webkitRTCPeerConnection.generateCertificate}}),["createOffer","createAnswer"].forEach((function(e){var t=webkitRTCPeerConnection.prototype[e];webkitRTCPeerConnection.prototype[e]=function(){var e=this;if(arguments.length<1||1===arguments.length&&"object"==typeof arguments[0]){var n=1===arguments.length?arguments[0]:void 0;return new Promise((function(r,i){t.apply(e,[r,i,n])}))}return t.apply(this,arguments)}})),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(e){var t=webkitRTCPeerConnection.prototype[e];webkitRTCPeerConnection.prototype[e]=function(){var n=arguments,r=this;return n[0]=new("addIceCandidate"===e?RTCIceCandidate:RTCSessionDescription)(n[0]),new Promise((function(e,i){t.apply(r,[n[0],function(){e(),n.length>=2&&n[1].apply(null,[])},function(e){i(e),n.length>=3&&n[2].apply(null,[e])}])}))}}))},attachMediaStream:function(e,t){r("DEPRECATED, attachMediaStream will soon be removed."),i.version>=43?e.srcObject=t:void 0!==e.src?e.src=URL.createObjectURL(t):r("Error attaching stream to element.")},reattachMediaStream:function(e,t){r("DEPRECATED, reattachMediaStream will soon be removed."),i.version>=43?e.srcObject=t.srcObject:e.src=t.src}};e.exports={shimOnTrack:o.shimOnTrack,shimSourceObject:o.shimSourceObject,shimPeerConnection:o.shimPeerConnection,shimGetUserMedia:n(395),attachMediaStream:o.attachMediaStream,reattachMediaStream:o.reattachMediaStream}},395:(e,t,n)=>{"use strict";var r=n(601).log;e.exports=function(){var e=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;var t={};return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);var i=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];var o={};"number"==typeof r.ideal?(o[i("min",n)]=r.ideal,t.optional.push(o),(o={})[i("max",n)]=r.ideal,t.optional.push(o)):(o[i("",n)]=r.ideal,t.optional.push(o))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[i("",n)]=r.exact):["min","max"].forEach((function(e){void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[i(e,n)]=r[e])}))}})),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t};navigator.getUserMedia=function(t,n,i){return(t=JSON.parse(JSON.stringify(t))).audio&&(t.audio=e(t.audio)),t.video&&(t.video=e(t.video)),r("chrome: "+JSON.stringify(t)),navigator.webkitGetUserMedia(t,n,i)};var t=function(e){return new Promise((function(t,n){navigator.getUserMedia(e,t,n)}))};if(navigator.mediaDevices||(navigator.mediaDevices={getUserMedia:t,enumerateDevices:function(){return new Promise((function(e){var t={audio:"audioinput",video:"videoinput"};return MediaStreamTrack.getSources((function(n){e(n.map((function(e){return{label:e.label,kind:t[e.kind],deviceId:e.id,groupId:""}})))}))}))}}),navigator.mediaDevices.getUserMedia){var n=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(t){return t&&(r("spec:   "+JSON.stringify(t)),t.audio=e(t.audio),t.video=e(t.video),r("chrome: "+JSON.stringify(t))),n(t)}.bind(this)}else navigator.mediaDevices.getUserMedia=function(e){return t(e)};void 0===navigator.mediaDevices.addEventListener&&(navigator.mediaDevices.addEventListener=function(){r("Dummy mediaDevices.addEventListener called.")}),void 0===navigator.mediaDevices.removeEventListener&&(navigator.mediaDevices.removeEventListener=function(){r("Dummy mediaDevices.removeEventListener called.")})}},64:e=>{"use strict";var t={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};t.localCName=t.generateIdentifier(),t.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},t.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},t.matchPrefix=function(e,n){return t.splitLines(e).filter((function(e){return 0===e.indexOf(n)}))},t.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:t[1],protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1]}return n},t.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),"candidate:"+t.join(" ")},t.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.numChannels=3===t.length?parseInt(t[2],10):1,n},t.writeRtpMap=function(e){var t=e.payloadType;return void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType),"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==e.numChannels?"/"+e.numChannels:"")+"\r\n"},t.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),uri:t[1]}},t.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+" "+e.uri+"\r\n"},t.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),i=0;i<r.length;i++)n[(t=r[i].trim().split("="))[0].trim()]=t[1];return n},t.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){r.push(t+"="+e.parameters[t])})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},t.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},t.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+" "+e.parameter+"\r\n"})),t},t.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},t.getDtlsParameters=function(e,n){var r=t.splitLines(e),i=(r=r.concat(t.splitLines(n))).filter((function(e){return 0===e.indexOf("a=fingerprint:")}))[0].substr(14);return{role:"auto",fingerprints:[{algorithm:i.split(" ")[0],value:i.split(" ")[1]}]}},t.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},t.getIceParameters=function(e,n){var r=t.splitLines(e);return{usernameFragment:(r=r.concat(t.splitLines(n))).filter((function(e){return 0===e.indexOf("a=ice-ufrag:")}))[0].substr(12),password:r.filter((function(e){return 0===e.indexOf("a=ice-pwd:")}))[0].substr(10)}},t.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},t.parseRtpParameters=function(e){for(var n={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},r=t.splitLines(e)[0].split(" "),i=3;i<r.length;i++){var o=r[i],s=t.matchPrefix(e,"a=rtpmap:"+o+" ")[0];if(s){var a=t.parseRtpMap(s),c=t.matchPrefix(e,"a=fmtp:"+o+" ");switch(a.parameters=c.length?t.parseFmtp(c[0]):{},a.rtcpFeedback=t.matchPrefix(e,"a=rtcp-fb:"+o+" ").map(t.parseRtcpFb),n.codecs.push(a),a.name.toUpperCase()){case"RED":case"ULPFEC":n.fecMechanisms.push(a.name.toUpperCase())}}}return t.matchPrefix(e,"a=extmap:").forEach((function(e){n.headerExtensions.push(t.parseExtmap(e))})),n},t.writeRtpDescription=function(e,n){var r="";return r+="m="+e+" ",r+=n.codecs.length>0?"9":"0",r+=" UDP/TLS/RTP/SAVPF ",r+=n.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",r+="c=IN IP4 0.0.0.0\r\n",r+="a=rtcp:9 IN IP4 0.0.0.0\r\n",n.codecs.forEach((function(e){r+=t.writeRtpMap(e),r+=t.writeFmtp(e),r+=t.writeRtcpFb(e)})),r+="a=rtcp-mux\r\n"},t.parseRtpEncodingParameters=function(e){var n,r=[],i=t.parseRtpParameters(e),o=-1!==i.fecMechanisms.indexOf("RED"),s=-1!==i.fecMechanisms.indexOf("ULPFEC"),a=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),c=a.length>0&&a[0].ssrc,u=t.matchPrefix(e,"a=ssrc-group:FID").map((function(e){var t=e.split(" ");return t.shift(),t.map((function(e){return parseInt(e,10)}))}));u.length>0&&u[0].length>1&&u[0][0]===c&&(n=u[0][1]),i.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var t={ssrc:c,codecPayloadType:parseInt(e.parameters.apt,10),rtx:{ssrc:n}};r.push(t),o&&((t=JSON.parse(JSON.stringify(t))).fec={ssrc:n,mechanism:s?"red+ulpfec":"red"},r.push(t))}})),0===r.length&&c&&r.push({ssrc:c});var p=t.matchPrefix(e,"b=");return p.length&&(0===p[0].indexOf("b=TIAS:")?p=parseInt(p[0].substr(7),10):0===p[0].indexOf("b=AS:")&&(p=parseInt(p[0].substr(5),10)),r.forEach((function(e){e.maxBitrate=p}))),r},t.writeSessionBoilerplate=function(){return"v=0\r\no=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},t.writeMediaSection=function(e,n,r,i){var o=t.writeRtpDescription(e.kind,n);if(o+=t.writeIceParameters(e.iceGatherer.getLocalParameters()),o+=t.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===r?"actpass":"active"),o+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?o+="a=sendrecv\r\n":e.rtpSender?o+="a=sendonly\r\n":e.rtpReceiver?o+="a=recvonly\r\n":o+="a=inactive\r\n",e.rtpSender){var s="msid:"+i.id+" "+e.rtpSender.track.id+"\r\n";o+="a="+s,o+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s}return o+"a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+t.localCName+"\r\n"},t.getDirection=function(e,n){for(var r=t.splitLines(e),i=0;i<r.length;i++)switch(r[i]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return r[i].substr(2)}return n?t.getDirection(n):"sendrecv"},e.exports=t},915:(e,t,n)=>{"use strict";var r=n(64),i=n(601).log,o={shimPeerConnection:function(){window.RTCIceGatherer&&(window.RTCIceCandidate||(window.RTCIceCandidate=function(e){return e}),window.RTCSessionDescription||(window.RTCSessionDescription=function(e){return e})),window.RTCPeerConnection=function(e){var t=this,n=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){t[e]=n[e].bind(n)})),this.onicecandidate=null,this.onaddstream=null,this.ontrack=null,this.onremovestream=null,this.onsignalingstatechange=null,this.oniceconnectionstatechange=null,this.onnegotiationneeded=null,this.ondatachannel=null,this.localStreams=[],this.remoteStreams=[],this.getLocalStreams=function(){return t.localStreams},this.getRemoteStreams=function(){return t.remoteStreams},this.localDescription=new RTCSessionDescription({type:"",sdp:""}),this.remoteDescription=new RTCSessionDescription({type:"",sdp:""}),this.signalingState="stable",this.iceConnectionState="new",this.iceGatheringState="new",this.iceOptions={gatherPolicy:"all",iceServers:[]},e&&e.iceTransportPolicy)switch(e.iceTransportPolicy){case"all":case"relay":this.iceOptions.gatherPolicy=e.iceTransportPolicy;break;case"none":throw new TypeError('iceTransportPolicy "none" not supported')}e&&e.iceServers&&(this.iceOptions.iceServers=e.iceServers.filter((function(e){return!(!e||!e.urls||(e.urls=e.urls.filter((function(e){return 0===e.indexOf("turn:")&&-1!==e.indexOf("transport=udp")}))[0],!e.urls))}))),this.transceivers=[],this._localIceCandidatesBuffer=[]},window.RTCPeerConnection.prototype._emitBufferedCandidates=function(){var e=this,t=r.splitSections(e.localDescription.sdp);this._localIceCandidatesBuffer.forEach((function(n){if(n.candidate&&0!==Object.keys(n.candidate).length)-1===n.candidate.candidate.indexOf("typ endOfCandidates")&&(t[n.candidate.sdpMLineIndex+1]+="a="+n.candidate.candidate+"\r\n");else for(var r=1;r<t.length;r++)-1===t[r].indexOf("\r\na=end-of-candidates\r\n")&&(t[r]+="a=end-of-candidates\r\n");e.localDescription.sdp=t.join(""),e.dispatchEvent(n),null!==e.onicecandidate&&e.onicecandidate(n),n.candidate||"complete"===e.iceGatheringState||e.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}))&&(e.iceGatheringState="complete")})),this._localIceCandidatesBuffer=[]},window.RTCPeerConnection.prototype.addStream=function(e){this.localStreams.push(e.clone()),this._maybeFireNegotiationNeeded()},window.RTCPeerConnection.prototype.removeStream=function(e){var t=this.localStreams.indexOf(e);t>-1&&(this.localStreams.splice(t,1),this._maybeFireNegotiationNeeded())},window.RTCPeerConnection.prototype._getCommonCapabilities=function(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]};return e.codecs.forEach((function(e){for(var r=0;r<t.codecs.length;r++){var i=t.codecs[r];if(e.name.toLowerCase()===i.name.toLowerCase()&&e.clockRate===i.clockRate&&e.numChannels===i.numChannels){n.codecs.push(i);break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var i=t.headerExtensions[r];if(e.uri===i.uri){n.headerExtensions.push(i);break}}})),n},window.RTCPeerConnection.prototype._createIceAndDtlsTransports=function(e,t){var n=this,i=new RTCIceGatherer(n.iceOptions),o=new RTCIceTransport(i);i.onlocalcandidate=function(s){var a=new Event("icecandidate");a.candidate={sdpMid:e,sdpMLineIndex:t};var c=s.candidate,u=!c||0===Object.keys(c).length;u?(void 0===i.state&&(i.state="completed"),a.candidate.candidate="candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates"):(c.component="RTCP"===o.component?2:1,a.candidate.candidate=r.writeCandidate(c));var p=n.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));switch(n.iceGatheringState){case"new":n._localIceCandidatesBuffer.push(a),u&&p&&n._localIceCandidatesBuffer.push(new Event("icecandidate"));break;case"gathering":n._emitBufferedCandidates(),n.dispatchEvent(a),null!==n.onicecandidate&&n.onicecandidate(a),p&&(n.dispatchEvent(new Event("icecandidate")),null!==n.onicecandidate&&n.onicecandidate(new Event("icecandidate")),n.iceGatheringState="complete")}},o.onicestatechange=function(){n._updateConnectionState()};var s=new RTCDtlsTransport(o);return s.ondtlsstatechange=function(){n._updateConnectionState()},s.onerror=function(){s.state="failed",n._updateConnectionState()},{iceGatherer:i,iceTransport:o,dtlsTransport:s}},window.RTCPeerConnection.prototype._transceive=function(e,t,n){var i=this._getCommonCapabilities(e.localCapabilities,e.remoteCapabilities);t&&e.rtpSender&&(i.encodings=e.sendEncodingParameters,i.rtcp={cname:r.localCName},e.recvEncodingParameters.length&&(i.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(i)),n&&e.rtpReceiver&&(i.encodings=e.recvEncodingParameters,i.rtcp={cname:e.cname},e.sendEncodingParameters.length&&(i.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(i))},window.RTCPeerConnection.prototype.setLocalDescription=function(e){var t,n,i=this;switch("offer"===e.type?this._pendingOffer&&(t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);i._pendingOffer[t].localCapabilities=n})),this.transceivers=this._pendingOffer,delete this._pendingOffer):"answer"===e.type&&(t=r.splitSections(i.remoteDescription.sdp),n=t.shift(),t.forEach((function(e,t){var o=i.transceivers[t],s=o.iceGatherer,a=o.iceTransport,c=o.dtlsTransport,u=o.localCapabilities,p=o.remoteCapabilities;if("0"!==e.split("\n",1)[0].split(" ",2)[1]){var l=r.getIceParameters(e,n);a.start(s,l,"controlled");var d=r.getDtlsParameters(e,n);c.start(d);var h=i._getCommonCapabilities(u,p);i._transceive(o,h.codecs.length>0,!1)}}))),this.localDescription={type:e.type,sdp:e.sdp},e.type){case"offer":this._updateSignalingState("have-local-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+e.type+'"')}var o=arguments.length>1&&"function"==typeof arguments[1];if(o){var s=arguments[1];window.setTimeout((function(){s(),"new"===i.iceGatheringState&&(i.iceGatheringState="gathering"),i._emitBufferedCandidates()}),0)}var a=Promise.resolve();return a.then((function(){o||("new"===i.iceGatheringState&&(i.iceGatheringState="gathering"),window.setTimeout(i._emitBufferedCandidates.bind(i),500))})),a},window.RTCPeerConnection.prototype.setRemoteDescription=function(e){var t=this,n=new MediaStream,i=[],o=r.splitSections(e.sdp),s=o.shift();switch(o.forEach((function(o,a){var c,u,p,l,d,h,f,m,v,y,g,_,b=r.splitLines(o)[0].substr(2).split(" "),C=b[0],w="0"===b[1],T=r.getDirection(o,s),S=r.parseRtpParameters(o);w||(g=r.getIceParameters(o,s),_=r.getDtlsParameters(o,s)),m=r.parseRtpEncodingParameters(o);var P,E=r.matchPrefix(o,"a=mid:");E=E.length?E[0].substr(6):r.generateIdentifier();var R=r.matchPrefix(o,"a=ssrc:").map((function(e){return r.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];R&&(P=R.value);var k=r.matchPrefix(o,"a=end-of-candidates").length>0,x=r.matchPrefix(o,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return"1"===e.component}));if("offer"!==e.type||w)"answer"!==e.type||w||(u=(c=t.transceivers[a]).iceGatherer,p=c.iceTransport,l=c.dtlsTransport,d=c.rtpSender,h=c.rtpReceiver,f=c.sendEncodingParameters,v=c.localCapabilities,t.transceivers[a].recvEncodingParameters=m,t.transceivers[a].remoteCapabilities=S,t.transceivers[a].cname=P,k&&p.setRemoteCandidates(x),p.start(u,g,"controlling"),l.start(_),t._transceive(c,"sendrecv"===T||"recvonly"===T,"sendrecv"===T||"sendonly"===T),!h||"sendrecv"!==T&&"sendonly"!==T?delete c.rtpReceiver:(y=h.track,i.push([y,h]),n.addTrack(y)));else{var j=t._createIceAndDtlsTransports(E,a);if(k&&j.iceTransport.setRemoteCandidates(x),v=RTCRtpReceiver.getCapabilities(C),f=[{ssrc:1001*(2*a+2)}],y=(h=new RTCRtpReceiver(j.dtlsTransport,C)).track,i.push([y,h]),n.addTrack(y),t.localStreams.length>0&&t.localStreams[0].getTracks().length>=a){var O=t.localStreams[0].getTracks()[a];d=new RTCRtpSender(O,j.dtlsTransport)}t.transceivers[a]={iceGatherer:j.iceGatherer,iceTransport:j.iceTransport,dtlsTransport:j.dtlsTransport,localCapabilities:v,remoteCapabilities:S,rtpSender:d,rtpReceiver:h,kind:C,mid:E,cname:P,sendEncodingParameters:f,recvEncodingParameters:m},t._transceive(t.transceivers[a],!1,"sendrecv"===T||"sendonly"===T)}})),this.remoteDescription={type:e.type,sdp:e.sdp},e.type){case"offer":this._updateSignalingState("have-remote-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+e.type+'"')}return n.getTracks().length&&(t.remoteStreams.push(n),window.setTimeout((function(){var e=new Event("addstream");e.stream=n,t.dispatchEvent(e),null!==t.onaddstream&&window.setTimeout((function(){t.onaddstream(e)}),0),i.forEach((function(r){var i=r[0],o=r[1],s=new Event("track");s.track=i,s.receiver=o,s.streams=[n],t.dispatchEvent(e),null!==t.ontrack&&window.setTimeout((function(){t.ontrack(s)}),0)}))}),0)),arguments.length>1&&"function"==typeof arguments[1]&&window.setTimeout(arguments[1],0),Promise.resolve()},window.RTCPeerConnection.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._updateSignalingState("closed")},window.RTCPeerConnection.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this.dispatchEvent(t),null!==this.onsignalingstatechange&&this.onsignalingstatechange(t)},window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded=function(){var e=new Event("negotiationneeded");this.dispatchEvent(e),null!==this.onnegotiationneeded&&this.onnegotiationneeded(e)},window.RTCPeerConnection.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,checking:0,connected:0,completed:0,failed:0};if(this.transceivers.forEach((function(e){t[e.iceTransport.state]++,t[e.dtlsTransport.state]++})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0||t.checking>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":(t.connected>0||t.completed>0)&&(e="connected"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this.dispatchEvent(n),null!==this.oniceconnectionstatechange&&this.oniceconnectionstatechange(n)}},window.RTCPeerConnection.prototype.createOffer=function(){var e,t=this;if(this._pendingOffer)throw new Error("createOffer called while there is a pending offer.");1===arguments.length&&"function"!=typeof arguments[0]?e=arguments[0]:3===arguments.length&&(e=arguments[2]);var n=[],i=0,o=0;if(this.localStreams.length&&(i=this.localStreams[0].getAudioTracks().length,o=this.localStreams[0].getVideoTracks().length),e){if(e.mandatory||e.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==e.offerToReceiveAudio&&(i=e.offerToReceiveAudio),void 0!==e.offerToReceiveVideo&&(o=e.offerToReceiveVideo)}for(this.localStreams.length&&this.localStreams[0].getTracks().forEach((function(e){n.push({kind:e.kind,track:e,wantReceive:"audio"===e.kind?i>0:o>0}),"audio"===e.kind?i--:"video"===e.kind&&o--}));i>0||o>0;)i>0&&(n.push({kind:"audio",wantReceive:!0}),i--),o>0&&(n.push({kind:"video",wantReceive:!0}),o--);var s=r.writeSessionBoilerplate(),a=[];n.forEach((function(e,n){var i,o,c=e.track,u=e.kind,p=r.generateIdentifier(),l=t._createIceAndDtlsTransports(p,n),d=RTCRtpSender.getCapabilities(u),h=[{ssrc:1001*(2*n+1)}];c&&(i=new RTCRtpSender(c,l.dtlsTransport)),e.wantReceive&&(o=new RTCRtpReceiver(l.dtlsTransport,u)),a[n]={iceGatherer:l.iceGatherer,iceTransport:l.iceTransport,dtlsTransport:l.dtlsTransport,localCapabilities:d,remoteCapabilities:null,rtpSender:i,rtpReceiver:o,kind:u,mid:p,sendEncodingParameters:h,recvEncodingParameters:null};var f=a[n];s+=r.writeMediaSection(f,f.localCapabilities,"offer",t.localStreams[0])})),this._pendingOffer=a;var c=new RTCSessionDescription({type:"offer",sdp:s});return arguments.length&&"function"==typeof arguments[0]&&window.setTimeout(arguments[0],0,c),Promise.resolve(c)},window.RTCPeerConnection.prototype.createAnswer=function(){var e=this,t=r.writeSessionBoilerplate();this.transceivers.forEach((function(n){var i=e._getCommonCapabilities(n.localCapabilities,n.remoteCapabilities);t+=r.writeMediaSection(n,i,"answer",e.localStreams[0])}));var n=new RTCSessionDescription({type:"answer",sdp:t});return arguments.length&&"function"==typeof arguments[0]&&window.setTimeout(arguments[0],0,n),Promise.resolve(n)},window.RTCPeerConnection.prototype.addIceCandidate=function(e){var t=e.sdpMLineIndex;if(e.sdpMid)for(var n=0;n<this.transceivers.length;n++)if(this.transceivers[n].mid===e.sdpMid){t=n;break}var i=this.transceivers[t];if(i){var o=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===o.protocol&&0===o.port)return;if("1"!==o.component)return;"endOfCandidates"===o.type&&(o={}),i.iceTransport.addRemoteCandidate(o);var s=r.splitSections(this.remoteDescription.sdp);s[t+1]+=(o.type?e.candidate.trim():"a=end-of-candidates")+"\r\n",this.remoteDescription.sdp=s.join("")}return arguments.length>1&&"function"==typeof arguments[1]&&window.setTimeout(arguments[1],0),Promise.resolve()},window.RTCPeerConnection.prototype.getStats=function(){var e=[];this.transceivers.forEach((function(t){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(n){t[n]&&e.push(t[n].getStats())}))}));var t=arguments.length>1&&"function"==typeof arguments[1]&&arguments[1];return new Promise((function(n){var r={};Promise.all(e).then((function(e){e.forEach((function(e){Object.keys(e).forEach((function(t){r[t]=e[t]}))})),t&&window.setTimeout(t,0,r),n(r)}))}))}},attachMediaStream:function(e,t){i("DEPRECATED, attachMediaStream will soon be removed."),e.srcObject=t},reattachMediaStream:function(e,t){i("DEPRECATED, reattachMediaStream will soon be removed."),e.srcObject=t.srcObject}};e.exports={shimPeerConnection:o.shimPeerConnection,attachMediaStream:o.attachMediaStream,reattachMediaStream:o.reattachMediaStream}},990:(e,t,n)=>{"use strict";var r=n(601).log,i=n(601).browserDetails,o={shimOnTrack:function(){"object"==typeof window&&window.RTCPeerConnection&&!("ontrack"in window.RTCPeerConnection.prototype)&&Object.defineProperty(window.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&(this.removeEventListener("track",this._ontrack),this.removeEventListener("addstream",this._ontrackpoly)),this.addEventListener("track",this._ontrack=e),this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(t){var n=new Event("track");n.track=t,n.receiver={track:t},n.streams=[e.stream],this.dispatchEvent(n)}.bind(this))}.bind(this))}})},shimSourceObject:function(){"object"==typeof window&&window.HTMLMediaElement&&!("srcObject"in window.HTMLMediaElement.prototype)&&Object.defineProperty(window.HTMLMediaElement.prototype,"srcObject",{get:function(){return this.mozSrcObject},set:function(e){this.mozSrcObject=e}})},shimPeerConnection:function(){window.RTCPeerConnection||(window.RTCPeerConnection=function(e,t){if(i.version<38&&e&&e.iceServers){for(var n=[],r=0;r<e.iceServers.length;r++){var o=e.iceServers[r];if(o.hasOwnProperty("urls"))for(var s=0;s<o.urls.length;s++){var a={url:o.urls[s]};0===o.urls[s].indexOf("turn")&&(a.username=o.username,a.credential=o.credential),n.push(a)}else n.push(e.iceServers[r])}e.iceServers=n}return new mozRTCPeerConnection(e,t)},window.RTCPeerConnection.prototype=mozRTCPeerConnection.prototype,mozRTCPeerConnection.generateCertificate&&Object.defineProperty(window.RTCPeerConnection,"generateCertificate",{get:function(){return mozRTCPeerConnection.generateCertificate}}),window.RTCSessionDescription=mozRTCSessionDescription,window.RTCIceCandidate=mozRTCIceCandidate),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(e){var t=RTCPeerConnection.prototype[e];RTCPeerConnection.prototype[e]=function(){return arguments[0]=new("addIceCandidate"===e?RTCIceCandidate:RTCSessionDescription)(arguments[0]),t.apply(this,arguments)}}))},shimGetUserMedia:function(){if(navigator.getUserMedia=function(e,t,n){var o=function(e){if("object"!=typeof e||e.require)return e;var t=[];return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r=e[n]="object"==typeof e[n]?e[n]:{ideal:e[n]};if(void 0===r.min&&void 0===r.max&&void 0===r.exact||t.push(n),void 0!==r.exact&&("number"==typeof r.exact?r.min=r.max=r.exact:e[n]=r.exact,delete r.exact),void 0!==r.ideal){e.advanced=e.advanced||[];var i={};"number"==typeof r.ideal?i[n]={min:r.ideal,max:r.ideal}:i[n]=r.ideal,e.advanced.push(i),delete r.ideal,Object.keys(r).length||delete e[n]}}})),t.length&&(e.require=t),e};return e=JSON.parse(JSON.stringify(e)),i.version<38&&(r("spec: "+JSON.stringify(e)),e.audio&&(e.audio=o(e.audio)),e.video&&(e.video=o(e.video)),r("ff37: "+JSON.stringify(e))),navigator.mozGetUserMedia(e,t,n)},navigator.mediaDevices||(navigator.mediaDevices={getUserMedia:function(e){return new Promise((function(t,n){navigator.getUserMedia(e,t,n)}))},addEventListener:function(){},removeEventListener:function(){}}),navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise((function(e){e([{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}])}))},i.version<41){var e=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return e().then(void 0,(function(e){if("NotFoundError"===e.name)return[];throw e}))}}},attachMediaStream:function(e,t){r("DEPRECATED, attachMediaStream will soon be removed."),e.srcObject=t},reattachMediaStream:function(e,t){r("DEPRECATED, reattachMediaStream will soon be removed."),e.srcObject=t.srcObject}};e.exports={shimOnTrack:o.shimOnTrack,shimSourceObject:o.shimSourceObject,shimPeerConnection:o.shimPeerConnection,shimGetUserMedia:n(442),attachMediaStream:o.attachMediaStream,reattachMediaStream:o.reattachMediaStream}},442:(e,t,n)=>{"use strict";var r=n(601).log,i=n(601).browserDetails;e.exports=function(){if(navigator.getUserMedia=function(e,t,n){var o=function(e){if("object"!=typeof e||e.require)return e;var t=[];return Object.keys(e).forEach((function(n){if("require"!==n&&"advanced"!==n&&"mediaSource"!==n){var r=e[n]="object"==typeof e[n]?e[n]:{ideal:e[n]};if(void 0===r.min&&void 0===r.max&&void 0===r.exact||t.push(n),void 0!==r.exact&&("number"==typeof r.exact?r.min=r.max=r.exact:e[n]=r.exact,delete r.exact),void 0!==r.ideal){e.advanced=e.advanced||[];var i={};"number"==typeof r.ideal?i[n]={min:r.ideal,max:r.ideal}:i[n]=r.ideal,e.advanced.push(i),delete r.ideal,Object.keys(r).length||delete e[n]}}})),t.length&&(e.require=t),e};return e=JSON.parse(JSON.stringify(e)),i.version<38&&(r("spec: "+JSON.stringify(e)),e.audio&&(e.audio=o(e.audio)),e.video&&(e.video=o(e.video)),r("ff37: "+JSON.stringify(e))),navigator.mozGetUserMedia(e,t,n)},navigator.mediaDevices||(navigator.mediaDevices={getUserMedia:function(e){return new Promise((function(t,n){navigator.getUserMedia(e,t,n)}))},addEventListener:function(){},removeEventListener:function(){}}),navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise((function(e){e([{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}])}))},i.version<41){var e=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return e().then(void 0,(function(e){if("NotFoundError"===e.name)return[];throw e}))}}}},557:e=>{"use strict";var t={shimGetUserMedia:function(){navigator.getUserMedia=navigator.webkitGetUserMedia}};e.exports={shimGetUserMedia:t.shimGetUserMedia}},601:e=>{"use strict";var t=!1,n={disableLog:function(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(t=e,e?"adapter.js logging disabled":"adapter.js logging enabled")},log:function(){if("object"==typeof window){if(t)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}},extractVersion:function(e,t,n){var r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)},detectBrowser:function(){var e={browser:null,version:null,minVersion:null};if("undefined"==typeof window||!window.navigator)return e.browser="Not a browser.",e;if(navigator.mozGetUserMedia)e.browser="firefox",e.version=this.extractVersion(navigator.userAgent,/Firefox\/([0-9]+)\./,1),e.minVersion=31;else if(navigator.webkitGetUserMedia)if(window.webkitRTCPeerConnection)e.browser="chrome",e.version=this.extractVersion(navigator.userAgent,/Chrom(e|ium)\/([0-9]+)\./,2),e.minVersion=38;else{if(!navigator.userAgent.match(/Version\/(\d+).(\d+)/))return e.browser="Unsupported webkit-based browser with GUM support but no WebRTC support.",e;e.browser="safari",e.version=this.extractVersion(navigator.userAgent,/AppleWebKit\/([0-9]+)\./,1),e.minVersion=602}else{if(!navigator.mediaDevices||!navigator.userAgent.match(/Edge\/(\d+).(\d+)$/))return e.browser="Not a supported browser.",e;e.browser="edge",e.version=this.extractVersion(navigator.userAgent,/Edge\/(\d+).(\d+)$/,2),e.minVersion=10547}return e.version<e.minVersion&&n.log("Browser: "+e.browser+" Version: "+e.version+" < minimum supported version: "+e.minVersion+"\n some things might not work!"),e}};e.exports={log:n.log,disableLog:n.disableLog,browserDetails:n.detectBrowser(),extractVersion:n.extractVersion}},156:(e,t,n)=>{var r=n(546);function i(e,t){this._address=e,this._options=t||{}}i.prototype.createConnection=function(e){return r.create(e,this._address,this._options).open()},e.exports=i},546:(e,t,n)=>{var r=n(624),i=n(218),o=n(437),s=n(612),a=n(191),c=n(965),u=n(486),p=n(85),l=n(809);function d(e,t,n){d.super_.call(this),this._id=e,this._address=t,this._options=n||{},this._sessions={},this._websocketConnection=new u,this._installWebsocketListeners()}i.inherits(d,o),i.extend(d.prototype,s),d.create=function(e,t,n){return new d(e,t,n)},d.prototype._installWebsocketListeners=function(){this._websocketConnection.on("open",this.emit.bind(this,"open")),this._websocketConnection.on("error",this.emit.bind(this,"error")),this._websocketConnection.on("close",this.emit.bind(this,"close")),this._websocketConnection.on("message",function(e){this.processIncomeMessage(new l(e)).catch(function(e){this.emit("error",e)}.bind(this))}.bind(this))},d.prototype.getId=function(){return this._id},d.prototype.getAddress=function(){return this._address},d.prototype.getOptions=function(){return this._options},d.prototype.open=function(){return this._websocketConnection.open(this._address,"janus-protocol").return(this)},d.prototype.close=function(){if(this._websocketConnection.isOpened()){var e=this;return r.map(this.getSessionList(),(function(e){return e.cleanup()})).then((function(){return e._websocketConnection.close()})).then((function(){e.emit("close")}))}return r.resolve()},d.prototype.createSession=function(){return this.sendSync({janus:"create"})},d.prototype.hasSession=function(e){return!!this.getSession(e)},d.prototype.getSession=function(e){return this._sessions[e]},d.prototype.getSessionList=function(){return Object.keys(this._sessions).map(function(e){return this._sessions[e]}.bind(this))},d.prototype.isClosed=function(){return this._websocketConnection.isClosed()},d.prototype.addSession=function(e){this._sessions[e.getId()]=e,e.once("destroy",function(){this.removeSession(e.getId())}.bind(this))},d.prototype.removeSession=function(e){delete this._sessions[e]},d.prototype.send=function(e){return this._options.token&&(e.token=this._options.token),this._options.apisecret&&(e.apisecret=this._options.apisecret),e.transaction||(e.transaction=c.generateRandomId()),this._websocketConnection.send(e)},d.prototype.processOutcomeMessage=function(e){if("create"===e.janus)return this._onCreate(e);var t=e.session_id;return t?this.hasSession(t)?this.getSession(t).processOutcomeMessage(e):r.reject(new Error("Invalid session: ["+t+"]")):r.resolve(e)},d.prototype.processIncomeMessage=function(e){this.emit("message",e);var t=e.get("session_id");if(t&&this.hasSession(t))return this.getSession(t).processIncomeMessage(e);var n=this;return r.try((function(){if(t&&!n.hasSession(t))throw new Error("Invalid session: ["+t+"]");return n.defaultProcessIncomeMessage(e)}))},d.prototype._onCreate=function(e){return this.addTransaction(new c(e.transaction,function(e){if("success"==e.get("janus")){var t=e.get("data","id");return this.addSession(p.create(this,t)),this.getSession(t)}throw new a(e)}.bind(this))),r.resolve(e)},d.prototype.toString=function(){return"JanusConnection"+JSON.stringify({id:this._id,address:this._address})},e.exports=d},191:(e,t,n)=>{function r(e){Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.janusMessage=e;var t=e.getError();this.message=t.reason,this.code=t.code}n(218).inherits(r,Error),e.exports=r},437:(e,t,n)=>{var r=n(387);function i(){i.super_.call(this,{wildcard:!0,delimiter:":",newListener:!1,maxListeners:20})}n(218).inherits(i,r),e.exports=i},218:e=>{var t={extend:function(e,t){if(t){var n=Array.prototype.slice.call(arguments,1)||[];n.forEach((function(t){Object.keys(t).forEach((function(n){e[n]=t[n]}))}))}return e},inherits:function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}};e.exports=t},355:(e,t,n)=>{var r=n(156),i=n(191),o=n(486),s=n(546),a=n(85),c=n(141),u=n(441),p=n(587),l=n(194),d=n(527),h=n(803);e.exports={Error:i,WebsocketConnection:o,Client:r,Connection:s,Session:a,Plugin:c,MediaPlugin:u,AudiobridgePlugin:p,AudioroomPlugin:l,StreamingPlugin:d,RtpbroadcastPlugin:h}},809:e=>{function t(e){this._plainMessage=e}t.prototype.getPlainMessage=function(){return this._plainMessage},t.prototype.getError=function(){return this.get("error")},t.prototype.get=function(e){for(var t=Array.prototype.slice.call(arguments,1),n=this._plainMessage[e],r=0;r<t.length&&(e=t[r],n);r++)n=n[e];return n||null},e.exports=t},799:(e,t,n)=>{var r=n(218),i=n(809);function o(e,t){o.super_.apply(this,arguments),this._plugin=t}r.inherits(o,i),o.prototype.getPluginData=function(e){var t=Array.prototype.slice.call(arguments);return t.unshift("plugindata","data"),this.get.apply(this,t)},o.prototype.getError=function(){var e=this.getPluginData("error");return e?{reason:e,code:this.getPluginData("error_code")}:o.super_.prototype.getError.call(this)},o.prototype.getResultText=function(){return this.getPluginData(this._plugin.getResponseAlias())},e.exports=o},141:(e,t,n)=>{var r=n(624),i=n(218),o=n(437),s=n(191),a=n(612),c=n(965),u=n(799);function p(e,t,n){p.super_.call(this),this._session=e,this._name=t,this._id=n;var r=this;e.on("destroy",(function(){r._detach()}))}i.inherits(p,o),i.extend(p.prototype,a),p._types={},p.create=function(e,t,n){var r=this._types[t];return r?new r(e,t,n):new p(e,t,n)},p.register=function(e,t){this._types[e]=t},p.prototype.getId=function(){return this._id},p.prototype.getName=function(){return this._name},p.prototype.getResponseAlias=function(){throw new Error("Plugin.getResponseAlias must be implemented")},p.prototype.send=function(e){return e.handle_id=this._id,this._session?this._session.send(e):r.reject(new Error("No active session"))},p.prototype.detach=function(){return this._session?new r(function(e,t){this.once("detach",e),this.sendWithTransaction({janus:"detach"}).catch(t)}.bind(this)):r.resolve()},p.prototype.cleanup=function(){return this._detach()},p.prototype.processOutcomeMessage=function(e){return r.resolve(e)},p.prototype.processIncomeMessage=function(e){var t=this;return r.try((function(){return"detached"===(e=new u(e.getPlainMessage(),t)).get("janus")?t._onDetached():t.defaultProcessIncomeMessage(e)})).then((function(){t.emit("message",e)})).catch((function(e){t.emit("error",e)}))},p.prototype._onDetached=function(){return this._detach()},p.prototype._detach=function(){return this._session&&(this._session=null,this.emit("detach")),r.resolve()},p.prototype.toString=function(){return"Plugin"+JSON.stringify({id:this._id,name:this._name})},p.prototype.sendWithTransaction=function(e){var t=c.generateRandomId(),n=new c(t,(function(e){if(!e.getError())return r.resolve(e);var t=new s(e);return r.reject(t)})),o={janus:"message",transaction:t};i.extend(o,e),this.addTransaction(n);var a=this.sendSync(o);return new r((function(e,t){n.promise.catch((function(e){t(e)})),a.then((function(t){e(t)})).catch((function(e){t(e)}))}))},e.exports=p},85:(e,t,n)=>{var r=n(624),i=n(218),o=n(437),s=n(612),a=n(191),c=n(909),u=n(965),p=n(141);function l(e,t){l.super_.call(this),this._connection=e,this._id=t,this._plugins={},this._connection.getOptions().keepalive&&this._startKeepAlive();var n=this;e.on("close",(function(){n._destroy()}))}i.inherits(l,o),i.extend(l.prototype,s),l.create=function(e,t){return new l(e,t)},l.prototype.getId=function(){return this._id},l.prototype.send=function(e){return this._connection?(e.session_id=this._id,this._keepAliveTimer&&this._keepAliveTimer.reset(),this._connection.send(e)):r.reject(new Error("Can not send message over destroyed "+this))},l.prototype.attachPlugin=function(e){return this.sendSync({janus:"attach",plugin:e})},l.prototype.destroy=function(){return this.sendSync({janus:"destroy"})},l.prototype.cleanup=function(){return this._destroy()},l.prototype.hasPlugin=function(e){return!!this.getPlugin(e)},l.prototype.getPlugin=function(e){return this._plugins[e]},l.prototype.getPluginList=function(){return Object.keys(this._plugins).map(function(e){return this._plugins[e]}.bind(this))},l.prototype.addPlugin=function(e){this._plugins[e.getId()]=e,e.once("detach",function(){this.removePlugin(e.getId())}.bind(this))},l.prototype.removePlugin=function(e){delete this._plugins[e]},l.prototype.processOutcomeMessage=function(e){var t=e.janus;if("attach"===t)return this._onAttach(e);if("destroy"===t)return this._onDestroy(e);var n=e.handle_id;return n?this.hasPlugin(n)?this.getPlugin(n).processOutcomeMessage(e):r.reject(new Error("Invalid plugin ["+n+"]")):r.resolve(e)},l.prototype.processIncomeMessage=function(e){var t=e.get("handle_id")||e.get("sender");if(t&&this.hasPlugin(t))return this.getPlugin(t).processIncomeMessage(e);var n=this;return r.try((function(){if(t&&!n.hasPlugin(t))throw new Error("Invalid plugin ["+t+"]");return"timeout"===e.get("janus")?n._onTimeout(e):n.defaultProcessIncomeMessage(e)})).then((function(){n.emit("message",e)})).catch((function(e){n.emit("error",e)}))},l.prototype._onAttach=function(e){return this.addTransaction(new u(e.transaction,function(t){if("success"==t.get("janus")){var n=t.get("data","id");return this.addPlugin(p.create(this,e.plugin,n)),this.getPlugin(n)}throw new a(t)}.bind(this))),r.resolve(e)},l.prototype._onTimeout=function(e){return this._destroy().return(e)},l.prototype._onDestroy=function(e){return this.addTransaction(new u(e.transaction,function(e){if("success"==e.get("janus"))return this._destroy().return(e);throw new a(e)}.bind(this))),r.resolve(e)},l.prototype._destroy=function(){return this._connection?(this._stopKeepAlive(),r.map(this.getPluginList(),(function(e){return e.cleanup()})).finally(function(){this._plugins={},this._connection=null,this.emit("destroy")}.bind(this))):r.resolve()},l.prototype._isNaturalNumber=function(e){if(isNaN(e))return!1;var t=parseFloat(e);return(0|t)===t&&t>0},l.prototype._startKeepAlive=function(){var e=this._connection.getOptions().keepalive;this._isNaturalNumber(e)&&e<59e3?this._keepAlivePeriod=e:this._keepAlivePeriod=3e4;var t=this;this._keepAliveTimer=new c((function(){t.send({janus:"keepalive"}).catch((function(e){throw t._connection.isClosed()&&t._stopKeepAlive(),e}))}),this._keepAlivePeriod),this._keepAliveTimer.start()},l.prototype._stopKeepAlive=function(){this._keepAliveTimer&&(this._keepAliveTimer.stop(),this._keepAliveTimer=null)},l.prototype.toString=function(){return"Session"+JSON.stringify({id:this._id})},e.exports=l},909:e=>{function t(e,t){this._callback=e,this._ms=t,this._timeoutId=null}t.prototype.start=function(){this._timeoutId=setTimeout(this._callback,this._ms)},t.prototype.stop=function(){this._timeoutId&&(clearTimeout(this._timeoutId),this._timeoutId=null)},t.prototype.reset=function(){this.stop(),this.start()},e.exports=t},612:(e,t,n)=>{var r=n(624),i=n(191),o=n(965),s=n(42),a={getTransactions:function(){return this._transactions||(this._transactions=new s),this._transactions},addTransaction:function(e){this.getTransactions().add(e)},sendSync:function(e){e.transaction||(e.transaction=o.generateRandomId());var t=this;return this.processOutcomeMessage(e).then((function(e){return t.send(e)})).then((function(n){var r=t.getTransactions().find(e.transaction);return r?r.promise:n}))},hasTransaction:function(e){return this.getTransactions().has(e.get("transaction"))},executeTransaction:function(e){return this.getTransactions().execute(e.get("transaction"),e)},defaultProcessIncomeMessage:function(e){return this.hasTransaction(e)?this.executeTransaction(e):e.getError()?r.reject(new i(e)):void 0}};e.exports=a},965:(e,t,n)=>{var r=n(624);function i(e,t,n){var i;this.id=e,n=n||3e4;var o=this;this.promise=new r((function(e,s){o._callback=function(){var n;clearTimeout(i);try{n=t.apply(null,arguments)}catch(e){n=r.reject(e)}n instanceof r||(n=r.resolve(n)),n.then(e,s)},i=setTimeout((function(){s(new Error("Transaction timeout "+o.id))}),n)})),this._isExecuted=!1}i.prototype.execute=function(){return this._isExecuted||(this._isExecuted=!0,this._callback.apply(this,arguments)),this.promise},i.generateRandomId=function(){return Math.random().toString(36).substring(2,12)},e.exports=i},42:(e,t,n)=>{var r=n(624),i=n(965);function o(){this.list={}}o.prototype.add=function(e){if(this.has(e.id))throw new Error("Transaction with id: `"+e.id+"` already exists");if(!(e instanceof i))throw new Error("`transaction` must be an instance of Transaction");this.list[e.id]=e},o.prototype.has=function(e){return e&&!!this._find(e)},o.prototype.find=function(e){return this._find(e)||null},o.prototype.execute=function(e,t){var n=this.find(e);if(!n)throw new Error("Transaction `"+e+"` not found");return"ack"!==t.janus?(this.remove(e),n.execute(t)):r.resolve(t)},o.prototype.remove=function(e){if(!this.has(e))throw new Error("Transaction with id: `"+e+"` doesn't exist");delete this.list[e]},o.prototype._find=function(e){return this.list[e]},e.exports=o},122:(e,t,n)=>{var r=n(624),i=n(218),o=n(799),s=n(667);function a(){a.super_.apply(this,arguments)}i.inherits(a,s),a.prototype._join=function(e,t){var n=i.extend({request:"join"},t);return this.sendWithTransaction({body:n}).then(function(t){return this.setCurrentEntity(e),t}.bind(this))},a.prototype.leave=function(){return this.sendWithTransaction({body:{request:"leave"}}).then(function(e){return this.resetCurrentEntity(),e}.bind(this))},a.prototype._change=function(e,t){var n=i.extend({request:"changeroom"},t);return this.sendWithTransaction({body:n}).then(function(t){return this.setCurrentEntity(e),t}.bind(this))},a.prototype._connect=function(e,t){return this.hasCurrentEntity(e)?r.resolve(new o({},this)):this.hasCurrentEntity()?this._change(e,t):this._join(e,t)},a.prototype.list=function(){return this._list()},a.prototype.configure=function(e,t){var n={body:i.extend({request:"configure"},e)};return t&&(n.jsep=t),this.sendWithTransaction(n)},a.prototype.offerStream=function(e,t,n){var i=this;return r.try((function(){i.createPeerConnection(),e.getAudioTracks().forEach((function(t){i.addTrack(t,e)}))})).then((function(){return i.createOffer(t)})).then((function(e){return i.sendSDP(e,n)}))},a.prototype.sendSDP=function(e,t){return this.configure(t,e).then(function(e){var t=e.get("jsep");return t?(this.setRemoteSDP(t),t):r.reject(new Error("Failed sendSDP. No jsep in response."))}.bind(this))},a.prototype._listParticipants=function(e){var t=i.extend({request:"listparticipants"},e);return this.sendWithTransaction({body:t})},e.exports=a},556:(e,t,n)=>{var r=n(624),i=n(482);function o(){}o.getUserMedia=function(e){return"screen"===e.video?this.getSharedScreen({audio:e.audio}):r.resolve(navigator.mediaDevices.getUserMedia(e))},o.getSharedScreen=function(e){return"https:"!==window.location.protocol?r.reject(new Error("Screen sharing only works on HTTPS, try the https:// version of this page")):"chrome"==i.browserDetails.browser?this._getSharedScreenChrome(e):"firefox"==i.browserDetails.browser?this._getSharedScreenFirefox(e):void 0},o._getSharedScreenChrome=function(e){var t=i.browserDetails.version,n=33;return window.navigator.userAgent.match("Linux")&&(n=35),t>=26&&t<=n?(e=Helpers.extend({},e,{video:{mandatory:{googLeakyBucket:!0,maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3,chromeMediaSource:"screen"}}}),window.getUserMedia(e)):new r((function(t,n){var r,i=function(o){if(o.origin==window.location.origin)if("janusGotScreen"==o.data.type&&r==o.data.id)if(window.clearTimeout(r),window.removeEventListener("message",i),""===o.data.sourceId){var s=new Error("NavigatorUserMediaError");s.name="You cancelled the request for permission, giving up...",n(s)}else(e=Helpers.extend({},e,{video:{mandatory:{chromeMediaSource:"desktop",maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3},optional:[{googLeakyBucket:!0},{googTemporalLayeredScreencast:!0}]}})).video.mandatory.chromeMediaSourceId=o.data.sourceId,t(window.getUserMedia(e));else"janusGetScreenPending"==o.data.type&&r==o.data.id&&window.clearTimeout(r)};window.addEventListener("message",i),r=setTimeout((function(){window.removeEventListener("message",i);var e=new Error("NavigatorUserMediaError");e.name='The required Chrome extension is not installed: click <a href="#">here</a> to install it. (NOTE: this will need you to refresh the page)',n(e)}),1e3),window.postMessage({type:"janusGetScreen",id:r},"*")}))},o._getSharedScreenFirefox=function(e){if(i.browserDetails.version>=33)return e=Helpers.extend({},e,{video:{mozMediaSource:"window",mediaSource:"window"}}),window.getUserMedia(e).then((function(e){if(e)var t=e.currentTime,n=window.setInterval((function(){e.currentTime==t&&(window.clearInterval(n),e.onended&&e.onended()),t=e.currentTime}),500);return e}));var t=new Error("Your version of Firefox does not support screen sharing, please install Firefox 33 (or more recent versions)");return r.reject(t)},e.exports=o},667:(e,t,n)=>{var r=n(218),i=n(441);function o(){o.super_.apply(this,arguments),this._currentEntityId=null}r.inherits(o,i),o.prototype.hasCurrentEntity=function(e){return e?e===this._currentEntityId:!!this._currentEntityId},o.prototype.setCurrentEntity=function(e){this._currentEntityId=e},o.prototype.resetCurrentEntity=function(){this._currentEntityId=null},o.prototype._create=function(e){var t=r.extend({request:"create"},e);return this.sendWithTransaction({body:t}).catch((function(e){if(e.message.indexOf("already exists")>0)return e.response;throw e}))},o.prototype._destroy=function(e,t){var n=r.extend({request:"destroy"},t);return this.sendWithTransaction({body:n}).then(function(t){return this.hasCurrentEntity(e)&&this.resetCurrentEntity(),t}.bind(this))},o.prototype._list=function(e){var t=r.extend({request:"list"},e);return this.sendWithTransaction({body:t})},o.prototype._onHangup=function(e){return this.resetCurrentEntity(),o.super_.prototype._onHangup.call(this,e)},e.exports=o},441:(e,t,n)=>{var r=n(624),i=n(397),o=n(218),s=n(141),a=n(556);function c(e,t,n){c.super_.apply(this,arguments),this._pcListeners={},this._pc=null}o.inherits(c,s),c.prototype.createPeerConnection=function(e){var t={iceServers:[{urls:"stun:stun.l.google.com:19302"}]},n={optional:[{DtlsSrtpKeyAgreement:!0}]};return(e=o.extend(e||{},this._session._connection._options.pc)).config&&o.extend(t,e.config),e.constraints&&o.extend(n,e.constraints),this._pc=new i.PeerConnection(t,n),this._addPcEventListeners(),this._pc},c.prototype.getPeerConnection=function(){return this._pc},c.prototype.hangup=function(){return new r(function(e,t){this.once("hangup",e),this.sendWithTransaction({janus:"hangup"}).catch(t)}.bind(this))},c.prototype.addTrack=function(e,t){if(this._pc.addTrack)this._pc.addTrack.apply(this._pc,arguments),this.emit("pc:track:local",{track:e,streams:Array.prototype.slice.call(arguments,1)});else{if(!t)throw new Error("MediaPlugin.addTrack. Missing stream argument when pc.addTrack is not supported");this._pc.addStream(t),this.emit("pc:track:local",{streams:[t]})}},c.prototype.getUserMedia=function(e){this.emit("consent-dialog:start");var t=this,n=a.getUserMedia(e);return n.then((function(e){return t.emit("consent-dialog:stop",{stream:e}),e})).catch((function(e){throw t.emit("consent-dialog:stop",{error:e}),e})).finally((function(){n.isCancelled()&&t.emit("consent-dialog:stop")}))},c.prototype.createOffer=function(e){return this._createSDP("createOffer",e)},c.prototype.createAnswer=function(e,t){var n=this;return r.try((function(){return n.setRemoteSDP(e)})).then((function(){return n._createSDP("createAnswer",t)}))},c.prototype.setRemoteSDP=function(e){return this._pc.setRemoteDescription(new i.SessionDescription(e))},c.prototype._createSDP=function(e,t){if(!this._pc)throw new Error("Create PeerConnection before creating SDP for it");if(["createOffer","createAnswer"].indexOf(e)<0)throw new Error("Unknown party in _createSDP");t=t||{};var n=this;return this._pc[e](t).then((function(e){return n._pc.setLocalDescription(e)})).then((function(){return n._pc.localDescription}))},c.prototype.processIncomeMessage=function(e){var t=this;return r.try((function(){return c.super_.prototype.processIncomeMessage.call(t,e)})).then((function(n){switch(e.janus){case"trickle":t._onTrickle(e);break;case"hangup":t._onHangup(e)}return n}))},c.prototype._onTrickle=function(e){var t=new i.IceCandidate(e.candidate);this._pc.addIceCandidate(t).catch(function(e){this.emit("pc:error",e)}.bind(this))},c.prototype._onHangup=function(e){this.emit("hangup",e)},c.prototype.closePeerConnection=function(){this._pc&&(this._stopLocalMedia(),Object.keys(this._pcListeners).forEach(function(e){this._removePcEventListener(e)}.bind(this)),this._pc.close(),this._pc=null,this.emit("pc:close"))},c.prototype._stopLocalMedia=function(){this._pc.getLocalStreams().forEach((function(e){e.stop?e.stop():e.getTracks&&e.getTracks().forEach((function(e){e.stop()}))}))},c.prototype._detach=function(e){return this.closePeerConnection(),c.super_.prototype._detach.apply(this,arguments)},c.prototype._addPcEventListeners=function(){var e=this;this._addPcEventListener("addstream",(function(t){e.emit("pc:track:remote",{streams:[t.stream]})})),this._addPcEventListener("track",(function(t){e.emit("pc:track:remote",t)})),this._addPcEventListener("icecandidate",(function(t){t.candidate?e.send({janus:"trickle",candidate:t.candidate}):(e.send({janus:"trickle",candidate:{completed:!0}}),e._removePcEventListener("icecandidate"))})),this._addPcEventListener("signalingstatechange",(function(){"closed"==e._pc.signalingState&&e.closePeerConnection()})),this._addPcEventListener("iceconnectionstatechange",(function(){switch(e._pc.iceConnectionState){case"closed":case"failed":e.closePeerConnection()}}))},c.prototype._addPcEventListener=function(e,t){this._pcListeners[e]=t,this._pc.addEventListener(e,t)},c.prototype._removePcEventListener=function(e){this._pc.removeEventListener(e,this._pcListeners[e]),delete this._pcListeners[e]},e.exports=c},127:(e,t,n)=>{var r=n(624),i=n(218),o=n(799),s=n(667);function a(){a.super_.apply(this,arguments)}i.inherits(a,s),a.prototype._create=function(e,t){return t=i.extend({id:e},t),a.super_.prototype._create.call(this,t)},a.prototype._destroy=function(e,t){return t=i.extend({id:e},t),a.super_.prototype._destroy.call(this,e,t)},a.prototype._watch=function(e,t,n){var r=this,o=i.extend({request:"watch",id:e},t);return this.sendWithTransaction({body:o}).then((function(t){var i=t.get("jsep");if(!i||"offer"!=i.type)throw new Error("Expect offer response on watch request");return r.setCurrentEntity(e),r._offerAnswer(i,n).return(t)}))},a.prototype._start=function(e){var t={body:{request:"start"}};return e&&(t.jsep=e),this.sendWithTransaction(t)},a.prototype._stop=function(){return this.sendWithTransaction({body:{request:"stop"}}).then(function(e){return this.resetCurrentEntity(),e}.bind(this))},a.prototype._pause=function(){return this.sendWithTransaction({body:{request:"pause"}})},a.prototype._switch=function(e,t){var n=i.extend({request:"switch",id:e},t);return this.sendWithTransaction({body:n}).then(function(t){return this.setCurrentEntity(e),t}.bind(this))},a.prototype.connect=function(e,t,n){return this.hasCurrentEntity(e)?r.resolve(new o({},this)):this.hasCurrentEntity()?this._switch(e,t):this._watch(e,t,n)},a.prototype._offerAnswer=function(e,t){var n=this;return r.try((function(){n.createPeerConnection()})).then((function(){return n.createAnswer(e,t)})).then((function(e){return n.sendWithTransaction({janus:"message",body:{request:"start"},jsep:e})}))},e.exports=a},587:(e,t,n)=>{var r=n(218),i=n(141),o=n(122);function s(){s.super_.apply(this,arguments)}s.NAME="janus.plugin.audiobridge",r.inherits(s,o),i.register(s.NAME,s),s.prototype.create=function(e,t){return this._create(r.extend({room:e},t))},s.prototype.destroy=function(e,t){return this._destroy(e,r.extend({room:e},t))},s.prototype.join=function(e,t){return t=r.extend({room:e},t),this._join(e,t)},s.prototype.change=function(e,t){return t=r.extend({room:e},t),this._change(e,t)},s.prototype.connect=function(e,t){return t=r.extend({room:e},t),this._connect(e,t)},s.prototype.listParticipants=function(e){return this._listParticipants({room:e})},s.prototype.getResponseAlias=function(){return"audiobridge"},e.exports=s},194:(e,t,n)=>{var r=n(218),i=n(141),o=n(122);function s(){s.super_.apply(this,arguments)}s.NAME="janus.plugin.cm.audioroom",r.inherits(s,o),i.register(s.NAME,s),s.prototype.destroy=function(e,t){return this._destroy(e,r.extend({id:e},t))},s.prototype.join=function(e,t){return t=r.extend({id:e},t),this._join(e,t)},s.prototype.change=function(e,t){return t=r.extend({id:e},t),this._change(e,t)},s.prototype.connect=function(e,t){return t=r.extend({id:e},t),this._connect(e,t)},s.prototype.listParticipants=function(e){return this._listParticipants({id:e})},s.prototype.getResponseAlias=function(){return"audioroom"},e.exports=s},803:(e,t,n)=>{var r=n(218),i=n(141),o=n(127);function s(){s.super_.apply(this,arguments)}s.NAME="janus.plugin.cm.rtpbroadcast",r.inherits(s,o),i.register(s.NAME,s),s.prototype.create=function(e,t){return this._create(e,t)},s.prototype.destroy=function(e){return this._destroy(e)},s.prototype.list=function(e){return this._list(e)},s.prototype.watch=function(e,t){return this._watch(e,null,t)},s.prototype.watchUDP=function(e,t){return this.sendWithTransaction({body:{request:"watch-udp",id:e,streams:t}})},s.prototype.start=function(){return this._start()},s.prototype.stop=function(){return this._stop()},s.prototype.pause=function(){return this._pause()},s.prototype.switch=function(e){return this._switch(e)},s.prototype.switchSource=function(e){return this.sendWithTransaction({body:{request:"switch-source",index:e}})},s.prototype.superuser=function(e){return this.sendWithTransaction({body:{request:"superuser",enabled:e}})},s.prototype.getResponseAlias=function(){return"streaming"},e.exports=s},527:(e,t,n)=>{var r=n(218),i=n(141),o=n(127);function s(){s.super_.apply(this,arguments)}s.NAME="janus.plugin.streaming",r.inherits(s,o),i.register(s.NAME,s),s.prototype.create=function(e,t){return this._create(e,t)},s.prototype.destroy=function(e,t){return this._destroy(e,t)},s.prototype.list=function(){return this._list()},s.prototype.watch=function(e,t,n){return this._watch(e,t,n)},s.prototype.start=function(e){return this._start(e)},s.prototype.stop=function(){return this._stop()},s.prototype.pause=function(){return this._pause()},s.prototype.switch=function(e,t){return this._switch(e,t)},s.prototype.enable=function(e,t){var n=r.extend({request:"enable",id:e},t);return this.sendWithTransaction({body:n})},s.prototype.disable=function(e,t){var n=r.extend({request:"disable",id:e},t);return this.sendWithTransaction({body:n}).then(function(){this.hasCurrentEntity(e)&&this.resetCurrentEntity()}.bind(this))},s.prototype.recording=function(e,t){var n=r.extend({request:"recording",id:e},t);return this.sendWithTransaction({body:n})},s.prototype.getResponseAlias=function(){return"streaming"},e.exports=s},486:(e,t,n)=>{var r=n(624),i=n(840).w3cwebsocket,o=n(437);function s(e){s.super_.call(this),this._webSocket=e,this._webSocket&&this._onOpen(this._webSocket)}n(218).inherits(s,o),s.prototype.open=function(e,t){var n=this;return new r((function(r,o){var s=new i(e,t||"");s.onerror=o,s.onclose=o,s.onopen=function(){s.onerror=null,s.onclose=null,n._onOpen(s),r(n)}}))},s.prototype._onOpen=function(e){if(this._webSocket=e,void 0!==e.readyState)this._installW3cListeners();else{if(!e.on)throw new Error("Trying to instantiate WebsocketConnection with unknown Websocket");this._installNodeListeners()}this.emit("open")},s.prototype._installW3cListeners=function(){this._webSocket.onmessage=function(e){var t=JSON.parse(e.data);this.onMessage(t)}.bind(this),this._webSocket.onerror=function(e){this.emit("error",e)}.bind(this),this._webSocket.onclose=function(){this._close()}.bind(this)},s.prototype._installNodeListeners=function(){this._webSocket.on("message",function(e){var t=JSON.parse(e);this.onMessage(t)}.bind(this)),this._webSocket.on("error",function(e){this.emit("error",e)}.bind(this)),this._webSocket.on("close",function(){this._close()}.bind(this))},s.prototype.isOpened=function(){return this._webSocket&&this._webSocket.OPEN===this._webSocket.readyState},s.prototype.isClosed=function(){return!this._webSocket||this._webSocket.CLOSED===this._webSocket.readyState||this._webSocket.CLOSING===this._webSocket.readyState},s.prototype.close=function(){return this.isClosed()?r.resolve():new r(function(e){this._close(),e()}.bind(this))},s.prototype._close=function(){this.isClosed()||(this._webSocket.terminate?this._webSocket.terminate():this._webSocket.close()),this.emit("close")},s.prototype.send=function(e){return this.isOpened()?this._send(e):this._webSocket&&this._webSocket.CONNECTING!==this._webSocket.readyState?r.reject(new Error("Can not send message over closed connection")):this._queue(e)},s.prototype.onMessage=function(e){try{this.emit("message",e)}catch(e){this.emit("error",e)}},s.prototype._queue=function(e){return new r(function(t){this.once("open",function(){this._send(e).then((function(){t()}))}.bind(this))}.bind(this))},s.prototype._send=function(e){return new r(function(t){this._webSocket.send(JSON.stringify(e)),t()}.bind(this))},e.exports=s},539:(e,t,n)=>{"use strict";var r=n(882);function i(e,t,n,i,o){var s=r.writeRtpDescription(e.kind,t);if(s+=r.writeIceParameters(e.iceGatherer.getLocalParameters()),s+=r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===n?"actpass":o||"active"),s+="a=mid:"+e.mid+"\r\n",e.rtpSender&&e.rtpReceiver?s+="a=sendrecv\r\n":e.rtpSender?s+="a=sendonly\r\n":e.rtpReceiver?s+="a=recvonly\r\n":s+="a=inactive\r\n",e.rtpSender){var a=e.rtpSender._initialTrackId||e.rtpSender.track.id;e.rtpSender._initialTrackId=a;var c="msid:"+(i?i.id:"-")+" "+a+"\r\n";s+="a="+c,s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+c,e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+c,s+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return s+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+r.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(s+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+r.localCName+"\r\n"),s}function o(e,t){var n={codecs:[],headerExtensions:[],fecMechanisms:[]},r=function(e,t){e=parseInt(e,10);for(var n=0;n<t.length;n++)if(t[n].payloadType===e||t[n].preferredPayloadType===e)return t[n]},i=function(e,t,n,i){var o=r(e.parameters.apt,n),s=r(t.parameters.apt,i);return o&&s&&o.name.toLowerCase()===s.name.toLowerCase()};return e.codecs.forEach((function(r){for(var o=0;o<t.codecs.length;o++){var s=t.codecs[o];if(r.name.toLowerCase()===s.name.toLowerCase()&&r.clockRate===s.clockRate){if("rtx"===r.name.toLowerCase()&&r.parameters&&s.parameters.apt&&!i(r,s,e.codecs,t.codecs))continue;(s=JSON.parse(JSON.stringify(s))).numChannels=Math.min(r.numChannels,s.numChannels),n.codecs.push(s),s.rtcpFeedback=s.rtcpFeedback.filter((function(e){for(var t=0;t<r.rtcpFeedback.length;t++)if(r.rtcpFeedback[t].type===e.type&&r.rtcpFeedback[t].parameter===e.parameter)return!0;return!1}));break}}})),e.headerExtensions.forEach((function(e){for(var r=0;r<t.headerExtensions.length;r++){var i=t.headerExtensions[r];if(e.uri===i.uri){n.headerExtensions.push(i);break}}})),n}function s(e,t,n){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(n)}function a(e,t){var n=e.getRemoteCandidates().find((function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type}));return n||e.addRemoteCandidate(t),!n}function c(e,t){var n=new Error(t);return n.name=e,n.code={NotSupportedError:9,InvalidStateError:11,InvalidAccessError:15,TypeError:void 0,OperationError:void 0}[e],n}e.exports=function(e,t){function n(t,n){n.addTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("addtrack",{track:t}))}function u(t,n,r,i){var o=new Event("track");o.track=n,o.receiver=r,o.transceiver={receiver:r},o.streams=i,e.setTimeout((function(){t._dispatchEvent("track",o)}))}var p=function(n){var i=this,o=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach((function(e){i[e]=o[e].bind(o)})),this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this._localDescription=null,this._remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.connectionState="new",this.iceGatheringState="new",n=JSON.parse(JSON.stringify(n||{})),this.usingBundle="max-bundle"===n.bundlePolicy,"negotiate"===n.rtcpMuxPolicy)throw c("NotSupportedError","rtcpMuxPolicy 'negotiate' is not supported");switch(n.rtcpMuxPolicy||(n.rtcpMuxPolicy="require"),n.iceTransportPolicy){case"all":case"relay":break;default:n.iceTransportPolicy="all"}switch(n.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:n.bundlePolicy="balanced"}if(n.iceServers=function(e,t){var n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((function(e){if(e&&(e.urls||e.url)){var r=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var i="string"==typeof r;return i&&(r=[r]),r=r.filter((function(e){return 0!==e.indexOf("turn:")||-1===e.indexOf("transport=udp")||-1!==e.indexOf("turn:[")||n?0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp"):(n=!0,!0)})),delete e.url,e.urls=i?r[0]:r,!!r.length}}))}(n.iceServers||[],t),this._iceGatherers=[],n.iceCandidatePoolSize)for(var s=n.iceCandidatePoolSize;s>0;s--)this._iceGatherers.push(new e.RTCIceGatherer({iceServers:n.iceServers,gatherPolicy:n.iceTransportPolicy}));else n.iceCandidatePoolSize=0;this._config=n,this.transceivers=[],this._sdpSessionId=r.generateSessionId(),this._sdpSessionVersion=0,this._dtlsRole=void 0,this._isClosed=!1};Object.defineProperty(p.prototype,"localDescription",{configurable:!0,get:function(){return this._localDescription}}),Object.defineProperty(p.prototype,"remoteDescription",{configurable:!0,get:function(){return this._remoteDescription}}),p.prototype.onicecandidate=null,p.prototype.onaddstream=null,p.prototype.ontrack=null,p.prototype.onremovestream=null,p.prototype.onsignalingstatechange=null,p.prototype.oniceconnectionstatechange=null,p.prototype.onconnectionstatechange=null,p.prototype.onicegatheringstatechange=null,p.prototype.onnegotiationneeded=null,p.prototype.ondatachannel=null,p.prototype._dispatchEvent=function(e,t){this._isClosed||(this.dispatchEvent(t),"function"==typeof this["on"+e]&&this["on"+e](t))},p.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this._dispatchEvent("icegatheringstatechange",e)},p.prototype.getConfiguration=function(){return this._config},p.prototype.getLocalStreams=function(){return this.localStreams},p.prototype.getRemoteStreams=function(){return this.remoteStreams},p.prototype._createTransceiver=function(e,t){var n=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,associatedRemoteMediaStreams:[],wantReceive:!0};if(this.usingBundle&&n)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var i=this._createIceAndDtlsTransports();r.iceTransport=i.iceTransport,r.dtlsTransport=i.dtlsTransport}return t||this.transceivers.push(r),r},p.prototype.addTrack=function(t,n){if(this._isClosed)throw c("InvalidStateError","Attempted to call addTrack on a closed peerconnection.");var r;if(this.transceivers.find((function(e){return e.track===t})))throw c("InvalidAccessError","Track already exists.");for(var i=0;i<this.transceivers.length;i++)this.transceivers[i].track||this.transceivers[i].kind!==t.kind||(r=this.transceivers[i]);return r||(r=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(n)&&this.localStreams.push(n),r.track=t,r.stream=n,r.rtpSender=new e.RTCRtpSender(t,r.dtlsTransport),r.rtpSender},p.prototype.addStream=function(e){var n=this;if(t>=15025)e.getTracks().forEach((function(t){n.addTrack(t,e)}));else{var r=e.clone();e.getTracks().forEach((function(e,t){var n=r.getTracks()[t];e.addEventListener("enabled",(function(e){n.enabled=e.enabled}))})),r.getTracks().forEach((function(e){n.addTrack(e,r)}))}},p.prototype.removeTrack=function(t){if(this._isClosed)throw c("InvalidStateError","Attempted to call removeTrack on a closed peerconnection.");if(!(t instanceof e.RTCRtpSender))throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");var n=this.transceivers.find((function(e){return e.rtpSender===t}));if(!n)throw c("InvalidAccessError","Sender was not created by this connection.");var r=n.stream;n.rtpSender.stop(),n.rtpSender=null,n.track=null,n.stream=null,-1===this.transceivers.map((function(e){return e.stream})).indexOf(r)&&this.localStreams.indexOf(r)>-1&&this.localStreams.splice(this.localStreams.indexOf(r),1),this._maybeFireNegotiationNeeded()},p.prototype.removeStream=function(e){var t=this;e.getTracks().forEach((function(e){var n=t.getSenders().find((function(t){return t.track===e}));n&&t.removeTrack(n)}))},p.prototype.getSenders=function(){return this.transceivers.filter((function(e){return!!e.rtpSender})).map((function(e){return e.rtpSender}))},p.prototype.getReceivers=function(){return this.transceivers.filter((function(e){return!!e.rtpReceiver})).map((function(e){return e.rtpReceiver}))},p.prototype._createIceGatherer=function(t,n){var r=this;if(n&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var i=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(i,"state",{value:"new",writable:!0}),this.transceivers[t].bufferedCandidateEvents=[],this.transceivers[t].bufferCandidates=function(e){var n=!e.candidate||0===Object.keys(e.candidate).length;i.state=n?"completed":"gathering",null!==r.transceivers[t].bufferedCandidateEvents&&r.transceivers[t].bufferedCandidateEvents.push(e)},i.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),i},p.prototype._gather=function(t,n){var i=this,o=this.transceivers[n].iceGatherer;if(!o.onlocalcandidate){var s=this.transceivers[n].bufferedCandidateEvents;this.transceivers[n].bufferedCandidateEvents=null,o.removeEventListener("localcandidate",this.transceivers[n].bufferCandidates),o.onlocalcandidate=function(e){if(!(i.usingBundle&&n>0)){var s=new Event("icecandidate");s.candidate={sdpMid:t,sdpMLineIndex:n};var a=e.candidate,c=!a||0===Object.keys(a).length;if(c)"new"!==o.state&&"gathering"!==o.state||(o.state="completed");else{"new"===o.state&&(o.state="gathering"),a.component=1,a.ufrag=o.getLocalParameters().usernameFragment;var u=r.writeCandidate(a);s.candidate=Object.assign(s.candidate,r.parseCandidate(u)),s.candidate.candidate=u,s.candidate.toJSON=function(){return{candidate:s.candidate.candidate,sdpMid:s.candidate.sdpMid,sdpMLineIndex:s.candidate.sdpMLineIndex,usernameFragment:s.candidate.usernameFragment}}}var p=r.getMediaSections(i._localDescription.sdp);p[s.candidate.sdpMLineIndex]+=c?"a=end-of-candidates\r\n":"a="+s.candidate.candidate+"\r\n",i._localDescription.sdp=r.getDescription(i._localDescription.sdp)+p.join("");var l=i.transceivers.every((function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state}));"gathering"!==i.iceGatheringState&&(i.iceGatheringState="gathering",i._emitGatheringStateChange()),c||i._dispatchEvent("icecandidate",s),l&&(i._dispatchEvent("icecandidate",new Event("icecandidate")),i.iceGatheringState="complete",i._emitGatheringStateChange())}},e.setTimeout((function(){s.forEach((function(e){o.onlocalcandidate(e)}))}),0)}},p.prototype._createIceAndDtlsTransports=function(){var t=this,n=new e.RTCIceTransport(null);n.onicestatechange=function(){t._updateIceConnectionState(),t._updateConnectionState()};var r=new e.RTCDtlsTransport(n);return r.ondtlsstatechange=function(){t._updateConnectionState()},r.onerror=function(){Object.defineProperty(r,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:n,dtlsTransport:r}},p.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var n=this.transceivers[e].iceTransport;n&&(delete n.onicestatechange,delete this.transceivers[e].iceTransport);var r=this.transceivers[e].dtlsTransport;r&&(delete r.ondtlsstatechange,delete r.onerror,delete this.transceivers[e].dtlsTransport)},p.prototype._transceive=function(e,n,i){var s=o(e.localCapabilities,e.remoteCapabilities);n&&e.rtpSender&&(s.encodings=e.sendEncodingParameters,s.rtcp={cname:r.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(s.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(s)),i&&e.rtpReceiver&&s.codecs.length>0&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach((function(e){delete e.rtx})),e.recvEncodingParameters.length?s.encodings=e.recvEncodingParameters:s.encodings=[{}],s.rtcp={compound:e.rtcpParameters.compound},e.rtcpParameters.cname&&(s.rtcp.cname=e.rtcpParameters.cname),e.sendEncodingParameters.length&&(s.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(s))},p.prototype.setLocalDescription=function(e){var t,n,i=this;if(-1===["offer","answer"].indexOf(e.type))return Promise.reject(c("TypeError",'Unsupported type "'+e.type+'"'));if(!s("setLocalDescription",e.type,i.signalingState)||i._isClosed)return Promise.reject(c("InvalidStateError","Can not set local "+e.type+" in state "+i.signalingState));if("offer"===e.type)t=r.splitSections(e.sdp),n=t.shift(),t.forEach((function(e,t){var n=r.parseRtpParameters(e);i.transceivers[t].localCapabilities=n})),i.transceivers.forEach((function(e,t){i._gather(e.mid,t)}));else if("answer"===e.type){t=r.splitSections(i._remoteDescription.sdp),n=t.shift();var a=r.matchPrefix(n,"a=ice-lite").length>0;t.forEach((function(e,t){var s=i.transceivers[t],c=s.iceGatherer,u=s.iceTransport,p=s.dtlsTransport,l=s.localCapabilities,d=s.remoteCapabilities;if(!(r.isRejected(e)&&0===r.matchPrefix(e,"a=bundle-only").length||s.rejected)){var h=r.getIceParameters(e,n),f=r.getDtlsParameters(e,n);a&&(f.role="server"),i.usingBundle&&0!==t||(i._gather(s.mid,t),"new"===u.state&&u.start(c,h,a?"controlling":"controlled"),"new"===p.state&&p.start(f));var m=o(l,d);i._transceive(s,m.codecs.length>0,!1)}}))}return i._localDescription={type:e.type,sdp:e.sdp},"offer"===e.type?i._updateSignalingState("have-local-offer"):i._updateSignalingState("stable"),Promise.resolve()},p.prototype.setRemoteDescription=function(i){var p=this;if(-1===["offer","answer"].indexOf(i.type))return Promise.reject(c("TypeError",'Unsupported type "'+i.type+'"'));if(!s("setRemoteDescription",i.type,p.signalingState)||p._isClosed)return Promise.reject(c("InvalidStateError","Can not set remote "+i.type+" in state "+p.signalingState));var l={};p.remoteStreams.forEach((function(e){l[e.id]=e}));var d=[],h=r.splitSections(i.sdp),f=h.shift(),m=r.matchPrefix(f,"a=ice-lite").length>0,v=r.matchPrefix(f,"a=group:BUNDLE ").length>0;p.usingBundle=v;var y=r.matchPrefix(f,"a=ice-options:")[0];return p.canTrickleIceCandidates=!!y&&y.substr(14).split(" ").indexOf("trickle")>=0,h.forEach((function(s,c){var u=r.splitLines(s),h=r.getKind(s),y=r.isRejected(s)&&0===r.matchPrefix(s,"a=bundle-only").length,g=u[0].substr(2).split(" ")[2],_=r.getDirection(s,f),b=r.parseMsid(s),C=r.getMid(s)||r.generateIdentifier();if(y||"application"===h&&("DTLS/SCTP"===g||"UDP/DTLS/SCTP"===g))p.transceivers[c]={mid:C,kind:h,protocol:g,rejected:!0};else{var w,T,S,P,E,R,k,x,j;!y&&p.transceivers[c]&&p.transceivers[c].rejected&&(p.transceivers[c]=p._createTransceiver(h,!0));var O,M,D=r.parseRtpParameters(s);y||(O=r.getIceParameters(s,f),(M=r.getDtlsParameters(s,f)).role="client"),k=r.parseRtpEncodingParameters(s);var I=r.parseRtcpParameters(s),L=r.matchPrefix(s,"a=end-of-candidates",f).length>0,A=r.matchPrefix(s,"a=candidate:").map((function(e){return r.parseCandidate(e)})).filter((function(e){return 1===e.component}));if(("offer"===i.type||"answer"===i.type)&&!y&&v&&c>0&&p.transceivers[c]&&(p._disposeIceAndDtlsTransports(c),p.transceivers[c].iceGatherer=p.transceivers[0].iceGatherer,p.transceivers[c].iceTransport=p.transceivers[0].iceTransport,p.transceivers[c].dtlsTransport=p.transceivers[0].dtlsTransport,p.transceivers[c].rtpSender&&p.transceivers[c].rtpSender.setTransport(p.transceivers[0].dtlsTransport),p.transceivers[c].rtpReceiver&&p.transceivers[c].rtpReceiver.setTransport(p.transceivers[0].dtlsTransport)),"offer"!==i.type||y)"answer"!==i.type||y||(T=(w=p.transceivers[c]).iceGatherer,S=w.iceTransport,P=w.dtlsTransport,E=w.rtpReceiver,R=w.sendEncodingParameters,x=w.localCapabilities,p.transceivers[c].recvEncodingParameters=k,p.transceivers[c].remoteCapabilities=D,p.transceivers[c].rtcpParameters=I,A.length&&"new"===S.state&&(!m&&!L||v&&0!==c?A.forEach((function(e){a(w.iceTransport,e)})):S.setRemoteCandidates(A)),v&&0!==c||("new"===S.state&&S.start(T,O,"controlling"),"new"===P.state&&P.start(M)),!o(w.localCapabilities,w.remoteCapabilities).codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&w.sendEncodingParameters[0].rtx&&delete w.sendEncodingParameters[0].rtx,p._transceive(w,"sendrecv"===_||"recvonly"===_,"sendrecv"===_||"sendonly"===_),!E||"sendrecv"!==_&&"sendonly"!==_?delete w.rtpReceiver:(j=E.track,b?(l[b.stream]||(l[b.stream]=new e.MediaStream),n(j,l[b.stream]),d.push([j,E,l[b.stream]])):(l.default||(l.default=new e.MediaStream),n(j,l.default),d.push([j,E,l.default]))));else{(w=p.transceivers[c]||p._createTransceiver(h)).mid=C,w.iceGatherer||(w.iceGatherer=p._createIceGatherer(c,v)),A.length&&"new"===w.iceTransport.state&&(!L||v&&0!==c?A.forEach((function(e){a(w.iceTransport,e)})):w.iceTransport.setRemoteCandidates(A)),x=e.RTCRtpReceiver.getCapabilities(h),t<15019&&(x.codecs=x.codecs.filter((function(e){return"rtx"!==e.name}))),R=w.sendEncodingParameters||[{ssrc:1001*(2*c+2)}];var F,N=!1;"sendrecv"===_||"sendonly"===_?(N=!w.rtpReceiver,E=w.rtpReceiver||new e.RTCRtpReceiver(w.dtlsTransport,h),N&&(j=E.track,b&&"-"===b.stream||(b?(l[b.stream]||(l[b.stream]=new e.MediaStream,Object.defineProperty(l[b.stream],"id",{get:function(){return b.stream}})),Object.defineProperty(j,"id",{get:function(){return b.track}}),F=l[b.stream]):(l.default||(l.default=new e.MediaStream),F=l.default)),F&&(n(j,F),w.associatedRemoteMediaStreams.push(F)),d.push([j,E,F]))):w.rtpReceiver&&w.rtpReceiver.track&&(w.associatedRemoteMediaStreams.forEach((function(t){var n=t.getTracks().find((function(e){return e.id===w.rtpReceiver.track.id}));n&&function(t,n){n.removeTrack(t),n.dispatchEvent(new e.MediaStreamTrackEvent("removetrack",{track:t}))}(n,t)})),w.associatedRemoteMediaStreams=[]),w.localCapabilities=x,w.remoteCapabilities=D,w.rtpReceiver=E,w.rtcpParameters=I,w.sendEncodingParameters=R,w.recvEncodingParameters=k,p._transceive(p.transceivers[c],!1,N)}}})),void 0===p._dtlsRole&&(p._dtlsRole="offer"===i.type?"active":"passive"),p._remoteDescription={type:i.type,sdp:i.sdp},"offer"===i.type?p._updateSignalingState("have-remote-offer"):p._updateSignalingState("stable"),Object.keys(l).forEach((function(t){var n=l[t];if(n.getTracks().length){if(-1===p.remoteStreams.indexOf(n)){p.remoteStreams.push(n);var r=new Event("addstream");r.stream=n,e.setTimeout((function(){p._dispatchEvent("addstream",r)}))}d.forEach((function(e){var t=e[0],r=e[1];n.id===e[2].id&&u(p,t,r,[n])}))}})),d.forEach((function(e){e[2]||u(p,e[0],e[1],[])})),e.setTimeout((function(){p&&p.transceivers&&p.transceivers.forEach((function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))}))}),4e3),Promise.resolve()},p.prototype.close=function(){this.transceivers.forEach((function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()})),this._isClosed=!0,this._updateSignalingState("closed")},p.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this._dispatchEvent("signalingstatechange",t)},p.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout((function(){if(t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t._dispatchEvent("negotiationneeded",e)}}),0))},p.prototype._updateIceConnectionState=function(){var e,t={new:0,closed:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&!e.rejected&&t[e.iceTransport.state]++})),e="new",t.failed>0?e="failed":t.checking>0?e="checking":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0?e="connected":t.completed>0&&(e="completed"),e!==this.iceConnectionState){this.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this._dispatchEvent("iceconnectionstatechange",n)}},p.prototype._updateConnectionState=function(){var e,t={new:0,closed:0,connecting:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach((function(e){e.iceTransport&&e.dtlsTransport&&!e.rejected&&(t[e.iceTransport.state]++,t[e.dtlsTransport.state]++)})),t.connected+=t.completed,e="new",t.failed>0?e="failed":t.connecting>0?e="connecting":t.disconnected>0?e="disconnected":t.new>0?e="new":t.connected>0&&(e="connected"),e!==this.connectionState){this.connectionState=e;var n=new Event("connectionstatechange");this._dispatchEvent("connectionstatechange",n)}},p.prototype.createOffer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createOffer after close"));var o=n.transceivers.filter((function(e){return"audio"===e.kind})).length,s=n.transceivers.filter((function(e){return"video"===e.kind})).length,a=arguments[0];if(a){if(a.mandatory||a.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==a.offerToReceiveAudio&&(o=!0===a.offerToReceiveAudio?1:!1===a.offerToReceiveAudio?0:a.offerToReceiveAudio),void 0!==a.offerToReceiveVideo&&(s=!0===a.offerToReceiveVideo?1:!1===a.offerToReceiveVideo?0:a.offerToReceiveVideo)}for(n.transceivers.forEach((function(e){"audio"===e.kind?--o<0&&(e.wantReceive=!1):"video"===e.kind&&--s<0&&(e.wantReceive=!1)}));o>0||s>0;)o>0&&(n._createTransceiver("audio"),o--),s>0&&(n._createTransceiver("video"),s--);var u=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.transceivers.forEach((function(i,o){var s=i.track,a=i.kind,c=i.mid||r.generateIdentifier();i.mid=c,i.iceGatherer||(i.iceGatherer=n._createIceGatherer(o,n.usingBundle));var u=e.RTCRtpSender.getCapabilities(a);t<15019&&(u.codecs=u.codecs.filter((function(e){return"rtx"!==e.name}))),u.codecs.forEach((function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1"),i.remoteCapabilities&&i.remoteCapabilities.codecs&&i.remoteCapabilities.codecs.forEach((function(t){e.name.toLowerCase()===t.name.toLowerCase()&&e.clockRate===t.clockRate&&(e.preferredPayloadType=t.payloadType)}))})),u.headerExtensions.forEach((function(e){(i.remoteCapabilities&&i.remoteCapabilities.headerExtensions||[]).forEach((function(t){e.uri===t.uri&&(e.id=t.id)}))}));var p=i.sendEncodingParameters||[{ssrc:1001*(2*o+1)}];s&&t>=15019&&"video"===a&&!p[0].rtx&&(p[0].rtx={ssrc:p[0].ssrc+1}),i.wantReceive&&(i.rtpReceiver=new e.RTCRtpReceiver(i.dtlsTransport,a)),i.localCapabilities=u,i.sendEncodingParameters=p})),"max-compat"!==n._config.bundlePolicy&&(u+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),u+="a=ice-options:trickle\r\n",n.transceivers.forEach((function(e,t){u+=i(e,e.localCapabilities,"offer",e.stream,n._dtlsRole),u+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===n.iceGatheringState||0!==t&&n.usingBundle||(e.iceGatherer.getLocalCandidates().forEach((function(e){e.component=1,u+="a="+r.writeCandidate(e)+"\r\n"})),"completed"===e.iceGatherer.state&&(u+="a=end-of-candidates\r\n"))}));var p=new e.RTCSessionDescription({type:"offer",sdp:u});return Promise.resolve(p)},p.prototype.createAnswer=function(){var n=this;if(n._isClosed)return Promise.reject(c("InvalidStateError","Can not call createAnswer after close"));if("have-remote-offer"!==n.signalingState&&"have-local-pranswer"!==n.signalingState)return Promise.reject(c("InvalidStateError","Can not call createAnswer in signalingState "+n.signalingState));var s=r.writeSessionBoilerplate(n._sdpSessionId,n._sdpSessionVersion++);n.usingBundle&&(s+="a=group:BUNDLE "+n.transceivers.map((function(e){return e.mid})).join(" ")+"\r\n"),s+="a=ice-options:trickle\r\n";var a=r.getMediaSections(n._remoteDescription.sdp).length;n.transceivers.forEach((function(e,r){if(!(r+1>a)){if(e.rejected)return"application"===e.kind?"DTLS/SCTP"===e.protocol?s+="m=application 0 DTLS/SCTP 5000\r\n":s+="m=application 0 "+e.protocol+" webrtc-datachannel\r\n":"audio"===e.kind?s+="m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n":"video"===e.kind&&(s+="m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"),void(s+="c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:"+e.mid+"\r\n");var c;e.stream&&("audio"===e.kind?c=e.stream.getAudioTracks()[0]:"video"===e.kind&&(c=e.stream.getVideoTracks()[0]),c&&t>=15019&&"video"===e.kind&&!e.sendEncodingParameters[0].rtx&&(e.sendEncodingParameters[0].rtx={ssrc:e.sendEncodingParameters[0].ssrc+1}));var u=o(e.localCapabilities,e.remoteCapabilities);!u.codecs.filter((function(e){return"rtx"===e.name.toLowerCase()})).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,s+=i(e,u,"answer",e.stream,n._dtlsRole),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(s+="a=rtcp-rsize\r\n")}}));var u=new e.RTCSessionDescription({type:"answer",sdp:s});return Promise.resolve(u)},p.prototype.addIceCandidate=function(e){var t,n=this;return e&&void 0===e.sdpMLineIndex&&!e.sdpMid?Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")):new Promise((function(i,o){if(!n._remoteDescription)return o(c("InvalidStateError","Can not add ICE candidate without a remote description"));if(e&&""!==e.candidate){var s=e.sdpMLineIndex;if(e.sdpMid)for(var u=0;u<n.transceivers.length;u++)if(n.transceivers[u].mid===e.sdpMid){s=u;break}var p=n.transceivers[s];if(!p)return o(c("OperationError","Can not add ICE candidate"));if(p.rejected)return i();var l=Object.keys(e.candidate).length>0?r.parseCandidate(e.candidate):{};if("tcp"===l.protocol&&(0===l.port||9===l.port))return i();if(l.component&&1!==l.component)return i();if((0===s||s>0&&p.iceTransport!==n.transceivers[0].iceTransport)&&!a(p.iceTransport,l))return o(c("OperationError","Can not add ICE candidate"));var d=e.candidate.trim();0===d.indexOf("a=")&&(d=d.substr(2)),(t=r.getMediaSections(n._remoteDescription.sdp))[s]+="a="+(l.type?d:"end-of-candidates")+"\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join("")}else for(var h=0;h<n.transceivers.length&&(n.transceivers[h].rejected||(n.transceivers[h].iceTransport.addRemoteCandidate({}),(t=r.getMediaSections(n._remoteDescription.sdp))[h]+="a=end-of-candidates\r\n",n._remoteDescription.sdp=r.getDescription(n._remoteDescription.sdp)+t.join(""),!n.usingBundle));h++);i()}))},p.prototype.getStats=function(t){if(t&&t instanceof e.MediaStreamTrack){var n=null;if(this.transceivers.forEach((function(e){e.rtpSender&&e.rtpSender.track===t?n=e.rtpSender:e.rtpReceiver&&e.rtpReceiver.track===t&&(n=e.rtpReceiver)})),!n)throw c("InvalidAccessError","Invalid selector.");return n.getStats()}var r=[];return this.transceivers.forEach((function(e){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach((function(t){e[t]&&r.push(e[t].getStats())}))})),Promise.all(r).then((function(e){var t=new Map;return e.forEach((function(e){e.forEach((function(e){t.set(e.id,e)}))})),t}))},["RTCRtpSender","RTCRtpReceiver","RTCIceGatherer","RTCIceTransport","RTCDtlsTransport"].forEach((function(t){var n=e[t];if(n&&n.prototype&&n.prototype.getStats){var r=n.prototype.getStats;n.prototype.getStats=function(){return r.apply(this).then((function(e){var t=new Map;return Object.keys(e).forEach((function(n){var r;e[n].type={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[(r=e[n]).type]||r.type,t.set(n,e[n])})),t}))}}}));var l=["createOffer","createAnswer"];return l.forEach((function(e){var t=p.prototype[e];p.prototype[e]=function(){var e=arguments;return"function"==typeof e[0]||"function"==typeof e[1]?t.apply(this,[arguments[2]]).then((function(t){"function"==typeof e[0]&&e[0].apply(null,[t])}),(function(t){"function"==typeof e[1]&&e[1].apply(null,[t])})):t.apply(this,arguments)}})),(l=["setLocalDescription","setRemoteDescription","addIceCandidate"]).forEach((function(e){var t=p.prototype[e];p.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]||"function"==typeof e[2]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)}),(function(t){"function"==typeof e[2]&&e[2].apply(null,[t])})):t.apply(this,arguments)}})),["getStats"].forEach((function(e){var t=p.prototype[e];p.prototype[e]=function(){var e=arguments;return"function"==typeof e[1]?t.apply(this,arguments).then((function(){"function"==typeof e[1]&&e[1].apply(null)})):t.apply(this,arguments)}})),p}},882:e=>{"use strict";var t={generateIdentifier:function(){return Math.random().toString(36).substr(2,10)}};t.localCName=t.generateIdentifier(),t.splitLines=function(e){return e.trim().split("\n").map((function(e){return e.trim()}))},t.splitSections=function(e){return e.split("\nm=").map((function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"}))},t.getDescription=function(e){var n=t.splitSections(e);return n&&n[0]},t.getMediaSections=function(e){var n=t.splitSections(e);return n.shift(),n},t.matchPrefix=function(e,n){return t.splitLines(e).filter((function(e){return 0===e.indexOf(n)}))},t.parseCandidate=function(e){for(var t,n={foundation:(t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" "))[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],address:t[4],port:parseInt(t[5],10),type:t[7]},r=8;r<t.length;r+=2)switch(t[r]){case"raddr":n.relatedAddress=t[r+1];break;case"rport":n.relatedPort=parseInt(t[r+1],10);break;case"tcptype":n.tcpType=t[r+1];break;case"ufrag":n.ufrag=t[r+1],n.usernameFragment=t[r+1];break;default:n[t[r]]=t[r+1]}return n},t.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.address||e.ip),t.push(e.port);var n=e.type;return t.push("typ"),t.push(n),"host"!==n&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),(e.usernameFragment||e.ufrag)&&(t.push("ufrag"),t.push(e.usernameFragment||e.ufrag)),"candidate:"+t.join(" ")},t.parseIceOptions=function(e){return e.substr(14).split(" ")},t.parseRtpMap=function(e){var t=e.substr(9).split(" "),n={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),n.name=t[0],n.clockRate=parseInt(t[1],10),n.channels=3===t.length?parseInt(t[2],10):1,n.numChannels=n.channels,n},t.writeRtpMap=function(e){var t=e.payloadType;void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType);var n=e.channels||e.numChannels||1;return"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==n?"/"+n:"")+"\r\n"},t.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},t.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},t.parseFmtp=function(e){for(var t,n={},r=e.substr(e.indexOf(" ")+1).split(";"),i=0;i<r.length;i++)n[(t=r[i].trim().split("="))[0].trim()]=t[1];return n},t.writeFmtp=function(e){var t="",n=e.payloadType;if(void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var r=[];Object.keys(e.parameters).forEach((function(t){e.parameters[t]?r.push(t+"="+e.parameters[t]):r.push(t)})),t+="a=fmtp:"+n+" "+r.join(";")+"\r\n"}return t},t.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},t.writeRtcpFb=function(e){var t="",n=e.payloadType;return void 0!==e.preferredPayloadType&&(n=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach((function(e){t+="a=rtcp-fb:"+n+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"})),t},t.parseSsrcMedia=function(e){var t=e.indexOf(" "),n={ssrc:parseInt(e.substr(7,t-7),10)},r=e.indexOf(":",t);return r>-1?(n.attribute=e.substr(t+1,r-t-1),n.value=e.substr(r+1)):n.attribute=e.substr(t+1),n},t.parseSsrcGroup=function(e){var t=e.substr(13).split(" ");return{semantics:t.shift(),ssrcs:t.map((function(e){return parseInt(e,10)}))}},t.getMid=function(e){var n=t.matchPrefix(e,"a=mid:")[0];if(n)return n.substr(6)},t.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},t.getDtlsParameters=function(e,n){return{role:"auto",fingerprints:t.matchPrefix(e+n,"a=fingerprint:").map(t.parseFingerprint)}},t.writeDtlsParameters=function(e,t){var n="a=setup:"+t+"\r\n";return e.fingerprints.forEach((function(e){n+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"})),n},t.parseCryptoLine=function(e){var t=e.substr(9).split(" ");return{tag:parseInt(t[0],10),cryptoSuite:t[1],keyParams:t[2],sessionParams:t.slice(3)}},t.writeCryptoLine=function(e){return"a=crypto:"+e.tag+" "+e.cryptoSuite+" "+("object"==typeof e.keyParams?t.writeCryptoKeyParams(e.keyParams):e.keyParams)+(e.sessionParams?" "+e.sessionParams.join(" "):"")+"\r\n"},t.parseCryptoKeyParams=function(e){if(0!==e.indexOf("inline:"))return null;var t=e.substr(7).split("|");return{keyMethod:"inline",keySalt:t[0],lifeTime:t[1],mkiValue:t[2]?t[2].split(":")[0]:void 0,mkiLength:t[2]?t[2].split(":")[1]:void 0}},t.writeCryptoKeyParams=function(e){return e.keyMethod+":"+e.keySalt+(e.lifeTime?"|"+e.lifeTime:"")+(e.mkiValue&&e.mkiLength?"|"+e.mkiValue+":"+e.mkiLength:"")},t.getCryptoParameters=function(e,n){return t.matchPrefix(e+n,"a=crypto:").map(t.parseCryptoLine)},t.getIceParameters=function(e,n){var r=t.matchPrefix(e+n,"a=ice-ufrag:")[0],i=t.matchPrefix(e+n,"a=ice-pwd:")[0];return r&&i?{usernameFragment:r.substr(12),password:i.substr(10)}:null},t.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},t.parseRtpParameters=function(e){for(var n={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},r=t.splitLines(e)[0].split(" "),i=3;i<r.length;i++){var o=r[i],s=t.matchPrefix(e,"a=rtpmap:"+o+" ")[0];if(s){var a=t.parseRtpMap(s),c=t.matchPrefix(e,"a=fmtp:"+o+" ");switch(a.parameters=c.length?t.parseFmtp(c[0]):{},a.rtcpFeedback=t.matchPrefix(e,"a=rtcp-fb:"+o+" ").map(t.parseRtcpFb),n.codecs.push(a),a.name.toUpperCase()){case"RED":case"ULPFEC":n.fecMechanisms.push(a.name.toUpperCase())}}}return t.matchPrefix(e,"a=extmap:").forEach((function(e){n.headerExtensions.push(t.parseExtmap(e))})),n},t.writeRtpDescription=function(e,n){var r="";r+="m="+e+" ",r+=n.codecs.length>0?"9":"0",r+=" UDP/TLS/RTP/SAVPF ",r+=n.codecs.map((function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType})).join(" ")+"\r\n",r+="c=IN IP4 0.0.0.0\r\n",r+="a=rtcp:9 IN IP4 0.0.0.0\r\n",n.codecs.forEach((function(e){r+=t.writeRtpMap(e),r+=t.writeFmtp(e),r+=t.writeRtcpFb(e)}));var i=0;return n.codecs.forEach((function(e){e.maxptime>i&&(i=e.maxptime)})),i>0&&(r+="a=maxptime:"+i+"\r\n"),r+="a=rtcp-mux\r\n",n.headerExtensions&&n.headerExtensions.forEach((function(e){r+=t.writeExtmap(e)})),r},t.parseRtpEncodingParameters=function(e){var n,r=[],i=t.parseRtpParameters(e),o=-1!==i.fecMechanisms.indexOf("RED"),s=-1!==i.fecMechanisms.indexOf("ULPFEC"),a=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute})),c=a.length>0&&a[0].ssrc,u=t.matchPrefix(e,"a=ssrc-group:FID").map((function(e){return e.substr(17).split(" ").map((function(e){return parseInt(e,10)}))}));u.length>0&&u[0].length>1&&u[0][0]===c&&(n=u[0][1]),i.codecs.forEach((function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var t={ssrc:c,codecPayloadType:parseInt(e.parameters.apt,10)};c&&n&&(t.rtx={ssrc:n}),r.push(t),o&&((t=JSON.parse(JSON.stringify(t))).fec={ssrc:c,mechanism:s?"red+ulpfec":"red"},r.push(t))}})),0===r.length&&c&&r.push({ssrc:c});var p=t.matchPrefix(e,"b=");return p.length&&(p=0===p[0].indexOf("b=TIAS:")?parseInt(p[0].substr(7),10):0===p[0].indexOf("b=AS:")?1e3*parseInt(p[0].substr(5),10)*.95-16e3:void 0,r.forEach((function(e){e.maxBitrate=p}))),r},t.parseRtcpParameters=function(e){var n={},r=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"cname"===e.attribute}))[0];r&&(n.cname=r.value,n.ssrc=r.ssrc);var i=t.matchPrefix(e,"a=rtcp-rsize");n.reducedSize=i.length>0,n.compound=0===i.length;var o=t.matchPrefix(e,"a=rtcp-mux");return n.mux=o.length>0,n},t.parseMsid=function(e){var n,r=t.matchPrefix(e,"a=msid:");if(1===r.length)return{stream:(n=r[0].substr(7).split(" "))[0],track:n[1]};var i=t.matchPrefix(e,"a=ssrc:").map((function(e){return t.parseSsrcMedia(e)})).filter((function(e){return"msid"===e.attribute}));return i.length>0?{stream:(n=i[0].value.split(" "))[0],track:n[1]}:void 0},t.parseSctpDescription=function(e){var n,r=t.parseMLine(e),i=t.matchPrefix(e,"a=max-message-size:");i.length>0&&(n=parseInt(i[0].substr(19),10)),isNaN(n)&&(n=65536);var o=t.matchPrefix(e,"a=sctp-port:");if(o.length>0)return{port:parseInt(o[0].substr(12),10),protocol:r.fmt,maxMessageSize:n};if(t.matchPrefix(e,"a=sctpmap:").length>0){var s=t.matchPrefix(e,"a=sctpmap:")[0].substr(10).split(" ");return{port:parseInt(s[0],10),protocol:s[1],maxMessageSize:n}}},t.writeSctpDescription=function(e,t){var n=[];return n="DTLS/SCTP"!==e.protocol?["m="+e.kind+" 9 "+e.protocol+" "+t.protocol+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctp-port:"+t.port+"\r\n"]:["m="+e.kind+" 9 "+e.protocol+" "+t.port+"\r\n","c=IN IP4 0.0.0.0\r\n","a=sctpmap:"+t.port+" "+t.protocol+" 65535\r\n"],void 0!==t.maxMessageSize&&n.push("a=max-message-size:"+t.maxMessageSize+"\r\n"),n.join("")},t.generateSessionId=function(){return Math.random().toString().substr(2,21)},t.writeSessionBoilerplate=function(e,n,r){var i=void 0!==n?n:2;return"v=0\r\no="+(r||"thisisadapterortc")+" "+(e||t.generateSessionId())+" "+i+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},t.writeMediaSection=function(e,n,r,i){var o=t.writeRtpDescription(e.kind,n);if(o+=t.writeIceParameters(e.iceGatherer.getLocalParameters()),o+=t.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===r?"actpass":"active"),o+="a=mid:"+e.mid+"\r\n",e.direction?o+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?o+="a=sendrecv\r\n":e.rtpSender?o+="a=sendonly\r\n":e.rtpReceiver?o+="a=recvonly\r\n":o+="a=inactive\r\n",e.rtpSender){var s="msid:"+i.id+" "+e.rtpSender.track.id+"\r\n";o+="a="+s,o+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+s,e.sendEncodingParameters[0].rtx&&(o+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+s,o+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return o+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+t.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(o+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+t.localCName+"\r\n"),o},t.getDirection=function(e,n){for(var r=t.splitLines(e),i=0;i<r.length;i++)switch(r[i]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return r[i].substr(2)}return n?t.getDirection(n):"sendrecv"},t.getKind=function(e){return t.splitLines(e)[0].split(" ")[0].substr(2)},t.isRejected=function(e){return"0"===e.split(" ",2)[1]},t.parseMLine=function(e){var n=t.splitLines(e)[0].substr(2).split(" ");return{kind:n[0],port:parseInt(n[1],10),protocol:n[2],fmt:n.slice(3).join(" ")}},t.parseOLine=function(e){var n=t.matchPrefix(e,"o=")[0].substr(2).split(" ");return{username:n[0],sessionId:n[1],sessionVersion:parseInt(n[2],10),netType:n[3],addressType:n[4],address:n[5]}},t.isValidSDP=function(e){if("string"!=typeof e||0===e.length)return!1;for(var n=t.splitLines(e),r=0;r<n.length;r++)if(n[r].length<2||"="!==n[r].charAt(1))return!1;return!0},e.exports=t},445:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(688),s=function(){function e(){this.handlers=[]}return e.prototype.on=function(e){this.handlers.push(e)},e.prototype.off=function(e){this.handlers=this.handlers.filter((function(t){return t!==e}))},e.prototype.trigger=function(e){this.handlers.slice(0).forEach((function(t){return t(e)}))},e.prototype.expose=function(){return this},e}(),a=function(){function e(e,t){var n=this;this.onRoomjoined=new s,this.onRemoteRoomAttached=new s,this.onRoomCreated=new s,this.onNeedVideoLocal=new s,this.onNeedVideoRemote=new s,this.onUnpublished=new s,this.onLeaving=new s,this.remoteCreateVideoroomPlugin=function(e,t){return r(n,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return[4,e.createSession()];case 1:return r.sent(),[4,e.session.attachPlugin(o.default.VideoroomPlugin.NAME)];case 2:return(n=r.sent()).on("pc:track:remote",(function(r){var i={element:null,feedInfo:t};e.onNeedVideoRemote.trigger(i),n.attachMediaStream(i.element,r.streams[0])})),[2,n]}}))}))},this.newRoom=function(e){return void 0===e&&(e={publishers:30,description:"roomtest"}),r(n,void 0,void 0,(function(){var t;return i(this,(function(n){switch(n.label){case 0:return[4,this.createVideoRoomPlugin()];case 1:return n.sent(),[4,this.videoroomPlugin.newRoom(e)];case 2:return t=n.sent(),this.roomId=t._plainMessage.plugindata.data.room,[2,this.roomId]}}))}))},this.joinRoom=function(e,t,o){return void 0===t&&(t="anyName"),void 0===o&&(o={ptype:"publisher"}),r(n,void 0,void 0,(function(){var n;return i(this,(function(r){switch(r.label){case 0:return this.roomId=e,o.room=e,o.display=t,[4,this.createVideoRoomPlugin()];case 1:return r.sent(),[4,this.videoroomPlugin.joinRoom(o)];case 2:return n=r.sent(),this.onRoomjoined.trigger(n),this.joinedInfo=n._plainMessage.plugindata.data,[4,this.videoroomPlugin.processLocalVideo({audio:!0,video:!0},this.joinedInfo)];case 3:return r.sent(),[2,n]}}))}))},this.remoteJoinRoomSubscriber=function(e,t){return r(n,void 0,void 0,(function(){var n,r;return i(this,(function(i){switch(i.label){case 0:return[4,e.remoteCreateVideoroomPlugin(e,t)];case 1:return n=i.sent(),(r={ptype:"subscriber"}).feed=t.id,r.room=e.joinedInfo.room,r.private_id=e.joinedInfo.private_id,[4,n.joinRoom(r)];case 2:return[2,{dataAttached:i.sent(),videoroomPlugin:n}]}}))}))},this._address=e||"wss://janus.conf.meetecho.com/ws",this._options=t||{keepalive:"true"}}return Object.defineProperty(e.prototype,"eventRoomjoined",{get:function(){return this.onRoomjoined.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventRemoteRoomAttached",{get:function(){return this.onRemoteRoomAttached.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventRoomCreated",{get:function(){return this.onRoomCreated.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventNeedVideoLocal",{get:function(){return this.onNeedVideoLocal.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventNeedVideoRemote",{get:function(){return this.onNeedVideoRemote.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventOnUnpublished",{get:function(){return this.onUnpublished.expose()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"eventOnLeaving",{get:function(){return this.onLeaving.expose()},enumerable:!1,configurable:!0}),e.prototype.createConnection=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return this.connection?[3,2]:(this.JanusClient=new o.default.Client(this._address,this._options),e=this,[4,this.JanusClient.createConnection("client")]);case 1:e.connection=t.sent(),t.label=2;case 2:return[2,this.connection]}}))}))},e.prototype.createSession=function(){return r(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return this.session?[3,3]:[4,this.createConnection()];case 1:return t.sent(),e=this,[4,this.connection.createSession()];case 2:e.session=t.sent(),t.label=3;case 3:return[2,this]}}))}))},e.prototype.createVideoRoomPlugin=function(){return r(this,void 0,void 0,(function(){var e,t,n=this;return i(this,(function(r){switch(r.label){case 0:return e=this,[4,this.createSession()];case 1:return r.sent(),this.videoroomPlugin?[3,3]:(t=this,[4,this.session.attachPlugin(o.default.VideoroomPlugin.NAME)]);case 2:t.videoroomPlugin=r.sent(),this.videoroomPlugin.on("consent-dialog:stop",(function(t){var n={element:null};e.onNeedVideoLocal.trigger(n),e.videoroomPlugin.attachMediaStream(n.element,t.stream),console.log("pc:track:local")})),this.videoroomPlugin.on("videoroom-remote-feed:publishers",(function(t){n.videoroomRremoteFeedPublishers(e,t)})),this.videoroomPlugin.on("videoroom-remote-feed:unpublished",(function(e){n.onUnpublished.trigger(e)})),this.videoroomPlugin.on("videoroom-remote-feed:leaving",(function(e){n.onLeaving.trigger(e)})),r.label=3;case 3:return[2,this]}}))}))},e.prototype.videoroomRremoteFeedPublishers=function(e,t){return r(this,void 0,void 0,(function(){var n,r,o,s,a,c,u;return i(this,(function(i){switch(i.label){case 0:if(!t.publishers)return[3,6];n=t.publishers,r=0,o=n,i.label=1;case 1:return r<o.length?(s=o[r],[4,e.remoteJoinRoomSubscriber(e,s)]):[3,6];case 2:return(a=i.sent()).videoroomPlugin.createPeerConnection(),c={},[4,a.videoroomPlugin.createAnswer(a.dataAttached._plainMessage.jsep,c)];case 3:return u=i.sent(),[4,a.videoroomPlugin.start(e.roomId,u)];case 4:i.sent(),i.label=5;case 5:return r++,[3,1];case 6:return[2]}}))}))},e.prototype.publishOwnFeed=function(){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2]}))}))},e}();o.default.JanusRoom=a,t.default=o.default},623:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(117);t.default=function(e,t,n){var i;void 0===n&&(n=null);var o=e,s={autoplay:!0,mirror:!1,muted:!1,audio:!1,disableContextMenu:!1};if(n)for(i in n)s[i]=n[i];o?"audio"===o.tagName.toLowerCase()&&(s.audio=!0):o=document.createElement(s.audio?"audio":"video"),s.disableContextMenu&&(o.oncontextmenu=function(e){e.preventDefault()}),s.autoplay&&(o.autoplay="autoplay"),o.muted=!!s.muted,s.audio||["","moz","webkit","o","ms"].forEach((function(e){var t=e?e+"Transform":"transform";o.style[t]=s.mirror?"scaleX(-1)":"scaleX(1)"})),"safari"===r.default.browserDetails.browser&&o.setAttribute("playsinline",!0),o.srcObject=t;try{o.srcObject=t}catch(e){try{o.src=URL.createObjectURL(t)}catch(e){throw new Error("Error attaching stream to element")}}return o}},688:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(624);n.g.Promise=r;var i=n(355),o=n(218),s=n(623);function a(){i.MediaPlugin.apply(this,arguments)}a.NAME="janus.plugin.videoroom",a.super_=null,o.inherits(a,i.MediaPlugin),i.Plugin.register(a.NAME,a),a.prototype.processLocalVideo=function(e,t){e=e||{},e=o.extend({audio:!0,video:!0},e);var n=this;return new r((function(r,i){n.getUserMedia(e).then((function(e){n.createPeerConnection(),e.getTracks().forEach((function(t){n.addTrack(t,e)}))})).then((function(){return n.createOffer()})).then((function(t){return n.configure(e,t)})).then((function(e){var i=e.get("jsep");i&&(n.setRemoteSDP(i),console.debug(),n.processIncomeMessagePublishers(t.publishers),r(i))}))}))},a.prototype.processRemoteVideo=function(e,t){var n=this;return new r((function(r,i){n.createAnswer(t,{audio:!1,video:!1}).then((function(t){return n.start(e,t)})).then((function(e){r()}))}))},a.prototype.configure=function(e,t){var n={body:o.extend({request:"configure"},e)};return t&&(n.jsep=t),this.sendWithTransaction(n)},a.prototype.sendSDP=function(e,t){return this.configure(t,e).then(function(e){var t=e.get("jsep");return t?(this.setRemoteSDP(t),t):r.reject(new Error("Failed sendSDP. No jsep in response."))}.bind(this))},a.prototype._listParticipants=function(e){var t=o.extend({request:"listparticipants"},e);return this.sendWithTransaction({body:t})},a.prototype._join=function(e,t){var n=o.extend({request:"join"},t);return this.sendWithTransaction({body:n}).then(function(t){return this.setCurrentEntity(e),t}.bind(this))},a.prototype.newRoom=function(e){return e.description=e.description?e.description:"",e.publishers=e.publishers?e.publishers:30,this.sendWithTransaction({janus:"message",body:{request:"create",publishers:e.publishers,description:e.description}})},a.prototype.joinRoom=function(e){var t={request:"join",room:e.room,ptype:e.ptype,display:e.display};return"subscriber"==e.ptype&&(t.feed=e.feed),this.sendWithTransaction({janus:"message",body:t})},a.prototype.start=function(e,t){return this.sendWithTransaction({janus:"message",body:{request:"start",room:e},jsep:t})},a.prototype.attachMediaStream=function(e,t){if(!e)throw new Error(" attachMediaStream  element is null ");try{return s.default(e,t)}catch(e){throw console.debug(e),new Error("Error attaching stream to element")}},a.reattachMediaStream=function(e,t){try{e.srcObject=t.srcObject}catch(n){try{e.src=t.src}catch(e){throw new Error("Error reattaching stream to element")}}},a.prototype.createPeerConnection2=function(e){return(e=e||{}).config&&o.extend({iceServers:[{urls:"stun:stun.l.google.com:19302"}]},e.config),e.constraints&&o.extend({optional:[{DtlsSrtpKeyAgreement:!0}]},e.constraints),this.super_.prototype.createPeerConnection(e)},a.prototype.processIncomeMessage=function(e){var t=this;return r.try((function(){return a.super_.prototype.processIncomeMessage.call(t,e)})).then((function(n){if(e._plainMessage){var r=e._plainMessage;switch(r.janus){case"event":var i=r.plugindata.data;if(i.videoroom){var o=i.videoroom;switch(t.processIncomeMessagePublishers(i.publishers),o){case"attached":t.onRemoteFeedAttached(r);break;case"joined":break;case"event":i.unpublished&&t.emit("videoroom-remote-feed:unpublished",i.unpublished),i.leaving&&t.emit("videoroom-remote-feed:leaving",i.leaving),t.onEvent(r)}}}}return n}))},a.prototype.processIncomeMessagePublishers=function(e){this.emit("videoroom-remote-feed:publishers",{publishers:e})},a.prototype.onRemoteFeedAttached=function(e){this.emit("videoroom-remote-feed:attached",{plainMessage:e})},a.prototype.onEvent=function(e){this.emit("videoroom-event:attached",{plainMessage:e})},i.VideoroomPlugin=a,t.default=i},117:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>he});var r={};n.r(r),n.d(r,{fixNegotiationNeeded:()=>M,shimAddTrackRemoveTrack:()=>j,shimAddTrackRemoveTrackWithNative:()=>x,shimGetDisplayMedia:()=>T,shimGetSendersWithDtmf:()=>E,shimGetStats:()=>R,shimGetUserMedia:()=>w,shimMediaStream:()=>S,shimOnTrack:()=>P,shimPeerConnection:()=>O,shimSenderReceiverGetStats:()=>k});var i={};n.r(i),n.d(i,{shimGetDisplayMedia:()=>A,shimGetUserMedia:()=>L,shimPeerConnection:()=>F,shimReplaceTrack:()=>N});var o={};n.r(o),n.d(o,{shimAddTransceiver:()=>J,shimCreateAnswer:()=>K,shimCreateOffer:()=>Q,shimGetDisplayMedia:()=>G,shimGetParameters:()=>$,shimGetUserMedia:()=>U,shimOnTrack:()=>V,shimPeerConnection:()=>B,shimRTCDataChannel:()=>W,shimReceiverGetStats:()=>q,shimRemoveStream:()=>z,shimSenderGetStats:()=>H});var s={};n.r(s),n.d(s,{shimAudioContext:()=>oe,shimCallbacksAPI:()=>Z,shimConstraints:()=>te,shimCreateOfferLegacy:()=>ie,shimGetUserMedia:()=>ee,shimLocalStreamsAPI:()=>X,shimRTCIceServerUrls:()=>ne,shimRemoteStreamsAPI:()=>Y,shimTrackEventTransceiver:()=>re});var a={};n.r(a),n.d(a,{removeAllowExtmapMixed:()=>de,shimConnectionState:()=>le,shimMaxMessageSize:()=>ue,shimRTCIceCandidate:()=>ce,shimSendThrowTypeError:()=>pe});let c=!0,u=!0;function p(e,t,n){const r=e.match(t);return r&&r.length>=n&&parseInt(r[n],10)}function l(e,t,n){if(!e.RTCPeerConnection)return;const r=e.RTCPeerConnection.prototype,i=r.addEventListener;r.addEventListener=function(e,r){if(e!==t)return i.apply(this,arguments);const o=e=>{const t=n(e);t&&(r.handleEvent?r.handleEvent(t):r(t))};return this._eventMap=this._eventMap||{},this._eventMap[t]||(this._eventMap[t]=new Map),this._eventMap[t].set(r,o),i.apply(this,[e,o])};const o=r.removeEventListener;r.removeEventListener=function(e,n){if(e!==t||!this._eventMap||!this._eventMap[t])return o.apply(this,arguments);if(!this._eventMap[t].has(n))return o.apply(this,arguments);const r=this._eventMap[t].get(n);return this._eventMap[t].delete(n),0===this._eventMap[t].size&&delete this._eventMap[t],0===Object.keys(this._eventMap).length&&delete this._eventMap,o.apply(this,[e,r])},Object.defineProperty(r,"on"+t,{get(){return this["_on"+t]},set(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)},enumerable:!0,configurable:!0})}function d(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(c=e,e?"adapter.js logging disabled":"adapter.js logging enabled")}function h(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(u=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))}function f(){if("object"==typeof window){if(c)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}}function m(e,t){u&&console.warn(e+" is deprecated, please use "+t+" instead.")}function v(e){const t={browser:null,version:null};if(void 0===e||!e.navigator)return t.browser="Not a browser.",t;const{navigator:n}=e;if(n.mozGetUserMedia)t.browser="firefox",t.version=p(n.userAgent,/Firefox\/(\d+)\./,1);else if(n.webkitGetUserMedia||!1===e.isSecureContext&&e.webkitRTCPeerConnection&&!e.RTCIceGatherer)t.browser="chrome",t.version=p(n.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else if(n.mediaDevices&&n.userAgent.match(/Edge\/(\d+).(\d+)$/))t.browser="edge",t.version=p(n.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!e.RTCPeerConnection||!n.userAgent.match(/AppleWebKit\/(\d+)\./))return t.browser="Not a supported browser.",t;t.browser="safari",t.version=p(n.userAgent,/AppleWebKit\/(\d+)\./,1),t.supportsUnifiedPlan=e.RTCRtpTransceiver&&"currentDirection"in e.RTCRtpTransceiver.prototype}return t}function y(e){return"[object Object]"===Object.prototype.toString.call(e)}function g(e){return y(e)?Object.keys(e).reduce((function(t,n){const r=y(e[n]),i=r?g(e[n]):e[n],o=r&&!Object.keys(i).length;return void 0===i||o?t:Object.assign(t,{[n]:i})}),{}):e}function _(e,t,n){t&&!n.has(t.id)&&(n.set(t.id,t),Object.keys(t).forEach((r=>{r.endsWith("Id")?_(e,e.get(t[r]),n):r.endsWith("Ids")&&t[r].forEach((t=>{_(e,e.get(t),n)}))})))}function b(e,t,n){const r=n?"outbound-rtp":"inbound-rtp",i=new Map;if(null===t)return i;const o=[];return e.forEach((e=>{"track"===e.type&&e.trackIdentifier===t.id&&o.push(e)})),o.forEach((t=>{e.forEach((n=>{n.type===r&&n.trackId===t.id&&_(e,n,i)}))})),i}const C=f;function w(e){const t=e&&e.navigator;if(!t.mediaDevices)return;const n=v(e),r=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;const t={};return Object.keys(e).forEach((n=>{if("require"===n||"advanced"===n||"mediaSource"===n)return;const r="object"==typeof e[n]?e[n]:{ideal:e[n]};void 0!==r.exact&&"number"==typeof r.exact&&(r.min=r.max=r.exact);const i=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==r.ideal){t.optional=t.optional||[];let e={};"number"==typeof r.ideal?(e[i("min",n)]=r.ideal,t.optional.push(e),e={},e[i("max",n)]=r.ideal,t.optional.push(e)):(e[i("",n)]=r.ideal,t.optional.push(e))}void 0!==r.exact&&"number"!=typeof r.exact?(t.mandatory=t.mandatory||{},t.mandatory[i("",n)]=r.exact):["min","max"].forEach((e=>{void 0!==r[e]&&(t.mandatory=t.mandatory||{},t.mandatory[i(e,n)]=r[e])}))})),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},i=function(e,i){if(n.version>=61)return i(e);if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){const t=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])};t((e=JSON.parse(JSON.stringify(e))).audio,"autoGainControl","googAutoGainControl"),t(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=r(e.audio)}if(e&&"object"==typeof e.video){let o=e.video.facingMode;o=o&&("object"==typeof o?o:{ideal:o});const s=n.version<66;if(o&&("user"===o.exact||"environment"===o.exact||"user"===o.ideal||"environment"===o.ideal)&&(!t.mediaDevices.getSupportedConstraints||!t.mediaDevices.getSupportedConstraints().facingMode||s)){let n;if(delete e.video.facingMode,"environment"===o.exact||"environment"===o.ideal?n=["back","rear"]:"user"!==o.exact&&"user"!==o.ideal||(n=["front"]),n)return t.mediaDevices.enumerateDevices().then((t=>{let s=(t=t.filter((e=>"videoinput"===e.kind))).find((e=>n.some((t=>e.label.toLowerCase().includes(t)))));return!s&&t.length&&n.includes("back")&&(s=t[t.length-1]),s&&(e.video.deviceId=o.exact?{exact:s.deviceId}:{ideal:s.deviceId}),e.video=r(e.video),C("chrome: "+JSON.stringify(e)),i(e)}))}e.video=r(e.video)}return C("chrome: "+JSON.stringify(e)),i(e)},o=function(e){return n.version>=64?e:{name:{PermissionDeniedError:"NotAllowedError",PermissionDismissedError:"NotAllowedError",InvalidStateError:"NotAllowedError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotAllowedError",MediaDeviceKillSwitchOn:"NotAllowedError",TabCaptureError:"AbortError",ScreenCaptureError:"AbortError",DeviceCaptureError:"AbortError"}[e.name]||e.name,message:e.message,constraint:e.constraint||e.constraintName,toString(){return this.name+(this.message&&": ")+this.message}}};if(t.getUserMedia=function(e,n,r){i(e,(e=>{t.webkitGetUserMedia(e,n,(e=>{r&&r(o(e))}))}))}.bind(t),t.mediaDevices.getUserMedia){const e=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(t){return i(t,(t=>e(t).then((e=>{if(t.audio&&!e.getAudioTracks().length||t.video&&!e.getVideoTracks().length)throw e.getTracks().forEach((e=>{e.stop()})),new DOMException("","NotFoundError");return e}),(e=>Promise.reject(o(e))))))}}}function T(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&("function"==typeof t?e.navigator.mediaDevices.getDisplayMedia=function(n){return t(n).then((t=>{const r=n.video&&n.video.width,i=n.video&&n.video.height,o=n.video&&n.video.frameRate;return n.video={mandatory:{chromeMediaSource:"desktop",chromeMediaSourceId:t,maxFrameRate:o||3}},r&&(n.video.mandatory.maxWidth=r),i&&(n.video.mandatory.maxHeight=i),e.navigator.mediaDevices.getUserMedia(n)}))}:console.error("shimGetDisplayMedia: getSourceId argument is not a function"))}function S(e){e.MediaStream=e.MediaStream||e.webkitMediaStream}function P(e){if("object"==typeof e&&e.RTCPeerConnection&&!("ontrack"in e.RTCPeerConnection.prototype)){Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get(){return this._ontrack},set(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)},enumerable:!0,configurable:!0});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){return this._ontrackpoly||(this._ontrackpoly=t=>{t.stream.addEventListener("addtrack",(n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find((e=>e.track&&e.track.id===n.track.id)):{track:n.track};const i=new Event("track");i.track=n.track,i.receiver=r,i.transceiver={receiver:r},i.streams=[t.stream],this.dispatchEvent(i)})),t.stream.getTracks().forEach((n=>{let r;r=e.RTCPeerConnection.prototype.getReceivers?this.getReceivers().find((e=>e.track&&e.track.id===n.id)):{track:n};const i=new Event("track");i.track=n,i.receiver=r,i.transceiver={receiver:r},i.streams=[t.stream],this.dispatchEvent(i)}))},this.addEventListener("addstream",this._ontrackpoly)),t.apply(this,arguments)}}else l(e,"track",(e=>(e.transceiver||Object.defineProperty(e,"transceiver",{value:{receiver:e.receiver}}),e)))}function E(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){const t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};const n=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,r){let i=n.apply(this,arguments);return i||(i=t(this,e),this._senders.push(i)),i};const r=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){r.apply(this,arguments);const t=this._senders.indexOf(e);-1!==t&&this._senders.splice(t,1)}}const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._senders=this._senders||[],n.apply(this,[e]),e.getTracks().forEach((e=>{this._senders.push(t(this,e))}))};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){this._senders=this._senders||[],r.apply(this,[e]),e.getTracks().forEach((e=>{const t=this._senders.find((t=>t.track===e));t&&this._senders.splice(this._senders.indexOf(t),1)}))}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}}function R(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,n,r]=arguments;if(arguments.length>0&&"function"==typeof e)return t.apply(this,arguments);if(0===t.length&&(0===arguments.length||"function"!=typeof e))return t.apply(this,[]);const i=function(e){const t={};return e.result().forEach((e=>{const n={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach((t=>{n[t]=e.stat(t)})),t[n.id]=n})),t},o=function(e){return new Map(Object.keys(e).map((t=>[t,e[t]])))};if(arguments.length>=2){const r=function(e){n(o(i(e)))};return t.apply(this,[r,e])}return new Promise(((e,n)=>{t.apply(this,[function(t){e(o(i(t)))},n])})).then(n,r)}}function k(e){if(!("object"==typeof e&&e.RTCPeerConnection&&e.RTCRtpSender&&e.RTCRtpReceiver))return;if(!("getStats"in e.RTCRtpSender.prototype)){const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){const e=this;return this._pc.getStats().then((t=>b(t,e.track,!0)))}}if(!("getStats"in e.RTCRtpReceiver.prototype)){const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e}),l(e,"track",(e=>(e.receiver._pc=e.srcElement,e))),e.RTCRtpReceiver.prototype.getStats=function(){const e=this;return this._pc.getStats().then((t=>b(t,e.track,!1)))}}if(!("getStats"in e.RTCRtpSender.prototype)||!("getStats"in e.RTCRtpReceiver.prototype))return;const t=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){if(arguments.length>0&&arguments[0]instanceof e.MediaStreamTrack){const e=arguments[0];let t,n,r;return this.getSenders().forEach((n=>{n.track===e&&(t?r=!0:t=n)})),this.getReceivers().forEach((t=>(t.track===e&&(n?r=!0:n=t),t.track===e))),r||t&&n?Promise.reject(new DOMException("There are more than one sender or receiver for the track.","InvalidAccessError")):t?t.getStats():n?n.getStats():Promise.reject(new DOMException("There is no sender or receiver for the track.","InvalidAccessError"))}return t.apply(this,arguments)}}function x(e){e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},Object.keys(this._shimmedLocalStreams).map((e=>this._shimmedLocalStreams[e][0]))};const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){if(!n)return t.apply(this,arguments);this._shimmedLocalStreams=this._shimmedLocalStreams||{};const r=t.apply(this,arguments);return this._shimmedLocalStreams[n.id]?-1===this._shimmedLocalStreams[n.id].indexOf(r)&&this._shimmedLocalStreams[n.id].push(r):this._shimmedLocalStreams[n.id]=[n,r],r};const n=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){this._shimmedLocalStreams=this._shimmedLocalStreams||{},e.getTracks().forEach((e=>{if(this.getSenders().find((t=>t.track===e)))throw new DOMException("Track already exists.","InvalidAccessError")}));const t=this.getSenders();n.apply(this,arguments);const r=this.getSenders().filter((e=>-1===t.indexOf(e)));this._shimmedLocalStreams[e.id]=[e].concat(r)};const r=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},delete this._shimmedLocalStreams[e.id],r.apply(this,arguments)};const i=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){return this._shimmedLocalStreams=this._shimmedLocalStreams||{},e&&Object.keys(this._shimmedLocalStreams).forEach((t=>{const n=this._shimmedLocalStreams[t].indexOf(e);-1!==n&&this._shimmedLocalStreams[t].splice(n,1),1===this._shimmedLocalStreams[t].length&&delete this._shimmedLocalStreams[t]})),i.apply(this,arguments)}}function j(e){if(!e.RTCPeerConnection)return;const t=v(e);if(e.RTCPeerConnection.prototype.addTrack&&t.version>=65)return x(e);const n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){const e=n.apply(this);return this._reverseStreams=this._reverseStreams||{},e.map((e=>this._reverseStreams[e.id]))};const r=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){if(this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},t.getTracks().forEach((e=>{if(this.getSenders().find((t=>t.track===e)))throw new DOMException("Track already exists.","InvalidAccessError")})),!this._reverseStreams[t.id]){const n=new e.MediaStream(t.getTracks());this._streams[t.id]=n,this._reverseStreams[n.id]=t,t=n}r.apply(this,[t])};const i=e.RTCPeerConnection.prototype.removeStream;function o(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((t=>{const r=e._reverseStreams[t],i=e._streams[r.id];n=n.replace(new RegExp(i.id,"g"),r.id)})),new RTCSessionDescription({type:t.type,sdp:n})}function s(e,t){let n=t.sdp;return Object.keys(e._reverseStreams||[]).forEach((t=>{const r=e._reverseStreams[t],i=e._streams[r.id];n=n.replace(new RegExp(r.id,"g"),i.id)})),new RTCSessionDescription({type:t.type,sdp:n})}e.RTCPeerConnection.prototype.removeStream=function(e){this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{},i.apply(this,[this._streams[e.id]||e]),delete this._reverseStreams[this._streams[e.id]?this._streams[e.id].id:e.id],delete this._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,n){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");const r=[].slice.call(arguments,1);if(1!==r.length||!r[0].getTracks().find((e=>e===t)))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");const i=this.getSenders().find((e=>e.track===t));if(i)throw new DOMException("Track already exists.","InvalidAccessError");this._streams=this._streams||{},this._reverseStreams=this._reverseStreams||{};const o=this._streams[n.id];if(o)o.addTrack(t),Promise.resolve().then((()=>{this.dispatchEvent(new Event("negotiationneeded"))}));else{const r=new e.MediaStream([t]);this._streams[n.id]=r,this._reverseStreams[r.id]=n,this.addStream(r)}return this.getSenders().find((e=>e.track===t))},["createOffer","createAnswer"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){const e=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(this,[t=>{const n=o(this,t);e[0].apply(null,[n])},t=>{e[1]&&e[1].apply(null,t)},arguments[2]]):n.apply(this,arguments).then((e=>o(this,e)))}};e.RTCPeerConnection.prototype[t]=r[t]}));const a=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){return arguments.length&&arguments[0].type?(arguments[0]=s(this,arguments[0]),a.apply(this,arguments)):a.apply(this,arguments)};const c=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get(){const e=c.get.apply(this);return""===e.type?e:o(this,e)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){if("closed"===this.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(e._pc!==this)throw new DOMException("Sender was not created by this connection.","InvalidAccessError");let t;this._streams=this._streams||{},Object.keys(this._streams).forEach((n=>{this._streams[n].getTracks().find((t=>e.track===t))&&(t=this._streams[n])})),t&&(1===t.getTracks().length?this.removeStream(this._reverseStreams[t.id]):t.removeTrack(e.track),this.dispatchEvent(new Event("negotiationneeded")))}}function O(e){const t=v(e);if(!e.RTCPeerConnection&&e.webkitRTCPeerConnection&&(e.RTCPeerConnection=e.webkitRTCPeerConnection),!e.RTCPeerConnection)return;const n=0===e.RTCPeerConnection.prototype.addIceCandidate.length;t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]}));const r=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return n||arguments[0]?t.version<78&&arguments[0]&&""===arguments[0].candidate?Promise.resolve():r.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}function M(e){const t=v(e);l(e,"negotiationneeded",(e=>{const n=e.target;if(!(t.version<72||n.getConfiguration&&"plan-b"===n.getConfiguration().sdpSemantics)||"stable"===n.signalingState)return e}))}var D=n(539),I=n.n(D);function L(e){const t=e&&e.navigator,n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch((e=>Promise.reject(function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString(){return this.name}}}(e))))}}function A(e){"getDisplayMedia"in e.navigator&&e.navigator.mediaDevices&&(e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||(e.navigator.mediaDevices.getDisplayMedia=e.navigator.getDisplayMedia.bind(e.navigator)))}function F(e){const t=v(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){const t=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set(e){t.set.call(this,e);const n=new Event("enabled");n.enabled=e,this.dispatchEvent(n)}})}e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)&&Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCDtmfSender&&!e.RTCDTMFSender&&(e.RTCDTMFSender=e.RTCDtmfSender);const n=I()(e,t.version);e.RTCPeerConnection=function(e){return e&&e.iceServers&&(e.iceServers=function(e,t){let n=!1;return(e=JSON.parse(JSON.stringify(e))).filter((e=>{if(e&&(e.urls||e.url)){let t=e.urls||e.url;e.url&&!e.urls&&m("RTCIceServer.url","RTCIceServer.urls");const r="string"==typeof t;return r&&(t=[t]),t=t.filter((e=>{if(0===e.indexOf("stun:"))return!1;const t=e.startsWith("turn")&&!e.startsWith("turn:[")&&e.includes("transport=udp");return t&&!n?(n=!0,!0):t&&!n})),delete e.url,e.urls=r?t[0]:t,!!t.length}}))}(e.iceServers,t.version),f("ICE servers after filtering:",e.iceServers)),new n(e)},e.RTCPeerConnection.prototype=n.prototype}function N(e){e.RTCRtpSender&&!("replaceTrack"in e.RTCRtpSender.prototype)&&(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}function U(e){const t=v(e),n=e&&e.navigator,r=e&&e.MediaStreamTrack;if(n.getUserMedia=function(e,t,r){m("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),n.mediaDevices.getUserMedia(e).then(t,r)},!(t.version>55&&"autoGainControl"in n.mediaDevices.getSupportedConstraints())){const e=function(e,t,n){t in e&&!(n in e)&&(e[n]=e[t],delete e[t])},t=n.mediaDevices.getUserMedia.bind(n.mediaDevices);if(n.mediaDevices.getUserMedia=function(n){return"object"==typeof n&&"object"==typeof n.audio&&(n=JSON.parse(JSON.stringify(n)),e(n.audio,"autoGainControl","mozAutoGainControl"),e(n.audio,"noiseSuppression","mozNoiseSuppression")),t(n)},r&&r.prototype.getSettings){const t=r.prototype.getSettings;r.prototype.getSettings=function(){const n=t.apply(this,arguments);return e(n,"mozAutoGainControl","autoGainControl"),e(n,"mozNoiseSuppression","noiseSuppression"),n}}if(r&&r.prototype.applyConstraints){const t=r.prototype.applyConstraints;r.prototype.applyConstraints=function(n){return"audio"===this.kind&&"object"==typeof n&&(n=JSON.parse(JSON.stringify(n)),e(n,"autoGainControl","mozAutoGainControl"),e(n,"noiseSuppression","mozNoiseSuppression")),t.apply(this,[n])}}}}function G(e,t){e.navigator.mediaDevices&&"getDisplayMedia"in e.navigator.mediaDevices||e.navigator.mediaDevices&&(e.navigator.mediaDevices.getDisplayMedia=function(n){if(!n||!n.video){const e=new DOMException("getDisplayMedia without video constraints is undefined");return e.name="NotFoundError",e.code=8,Promise.reject(e)}return!0===n.video?n.video={mediaSource:t}:n.video.mediaSource=t,e.navigator.mediaDevices.getUserMedia(n)})}function V(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function B(e){const t=v(e);if("object"!=typeof e||!e.RTCPeerConnection&&!e.mozRTCPeerConnection)return;if(!e.RTCPeerConnection&&e.mozRTCPeerConnection&&(e.RTCPeerConnection=e.mozRTCPeerConnection),t.version<53&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach((function(t){const n=e.RTCPeerConnection.prototype[t],r={[t](){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),n.apply(this,arguments)}};e.RTCPeerConnection.prototype[t]=r[t]})),t.version<68){const t=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?arguments[0]&&""===arguments[0].candidate?Promise.resolve():t.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}const n={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},r=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(){const[e,i,o]=arguments;return r.apply(this,[e||null]).then((e=>{if(t.version<53&&!i)try{e.forEach((e=>{e.type=n[e.type]||e.type}))}catch(t){if("TypeError"!==t.name)throw t;e.forEach(((t,r)=>{e.set(r,Object.assign({},t,{type:n[t.type]||t.type}))}))}return e})).then(i,o)}}function H(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpSender.prototype)return;const t=e.RTCPeerConnection.prototype.getSenders;t&&(e.RTCPeerConnection.prototype.getSenders=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e});const n=e.RTCPeerConnection.prototype.addTrack;n&&(e.RTCPeerConnection.prototype.addTrack=function(){const e=n.apply(this,arguments);return e._pc=this,e}),e.RTCRtpSender.prototype.getStats=function(){return this.track?this._pc.getStats(this.track):Promise.resolve(new Map)}}function q(e){if("object"!=typeof e||!e.RTCPeerConnection||!e.RTCRtpSender)return;if(e.RTCRtpSender&&"getStats"in e.RTCRtpReceiver.prototype)return;const t=e.RTCPeerConnection.prototype.getReceivers;t&&(e.RTCPeerConnection.prototype.getReceivers=function(){const e=t.apply(this,[]);return e.forEach((e=>e._pc=this)),e}),l(e,"track",(e=>(e.receiver._pc=e.srcElement,e))),e.RTCRtpReceiver.prototype.getStats=function(){return this._pc.getStats(this.track)}}function z(e){e.RTCPeerConnection&&!("removeStream"in e.RTCPeerConnection.prototype)&&(e.RTCPeerConnection.prototype.removeStream=function(e){m("removeStream","removeTrack"),this.getSenders().forEach((t=>{t.track&&e.getTracks().includes(t.track)&&this.removeTrack(t)}))})}function W(e){e.DataChannel&&!e.RTCDataChannel&&(e.RTCDataChannel=e.DataChannel)}function J(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.addTransceiver;t&&(e.RTCPeerConnection.prototype.addTransceiver=function(){this.setParametersPromises=[];const e=arguments[1],n=e&&"sendEncodings"in e;n&&e.sendEncodings.forEach((e=>{if("rid"in e&&!/^[a-z0-9]{0,16}$/i.test(e.rid))throw new TypeError("Invalid RID value provided.");if("scaleResolutionDownBy"in e&&!(parseFloat(e.scaleResolutionDownBy)>=1))throw new RangeError("scale_resolution_down_by must be >= 1.0");if("maxFramerate"in e&&!(parseFloat(e.maxFramerate)>=0))throw new RangeError("max_framerate must be >= 0.0")}));const r=t.apply(this,arguments);if(n){const{sender:t}=r,n=t.getParameters();(!("encodings"in n)||1===n.encodings.length&&0===Object.keys(n.encodings[0]).length)&&(n.encodings=e.sendEncodings,t.sendEncodings=e.sendEncodings,this.setParametersPromises.push(t.setParameters(n).then((()=>{delete t.sendEncodings})).catch((()=>{delete t.sendEncodings}))))}return r})}function $(e){if("object"!=typeof e||!e.RTCRtpSender)return;const t=e.RTCRtpSender.prototype.getParameters;t&&(e.RTCRtpSender.prototype.getParameters=function(){const e=t.apply(this,arguments);return"encodings"in e||(e.encodings=[].concat(this.sendEncodings||[{}])),e})}function Q(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then((()=>t.apply(this,arguments))).finally((()=>{this.setParametersPromises=[]})):t.apply(this,arguments)}}function K(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype.createAnswer;e.RTCPeerConnection.prototype.createAnswer=function(){return this.setParametersPromises&&this.setParametersPromises.length?Promise.all(this.setParametersPromises).then((()=>t.apply(this,arguments))).finally((()=>{this.setParametersPromises=[]})):t.apply(this,arguments)}}function X(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),!("addStream"in e.RTCPeerConnection.prototype)){const t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),this._localStreams.includes(e)||this._localStreams.push(e),e.getAudioTracks().forEach((n=>t.call(this,n,e))),e.getVideoTracks().forEach((n=>t.call(this,n,e)))},e.RTCPeerConnection.prototype.addTrack=function(e,...n){return n&&n.forEach((e=>{this._localStreams?this._localStreams.includes(e)||this._localStreams.push(e):this._localStreams=[e]})),t.apply(this,arguments)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);const t=this._localStreams.indexOf(e);if(-1===t)return;this._localStreams.splice(t,1);const n=e.getTracks();this.getSenders().forEach((e=>{n.includes(e.track)&&this.removeTrack(e)}))})}}function Y(e){if("object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),!("onaddstream"in e.RTCPeerConnection.prototype))){Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get(){return this._onaddstream},set(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=e=>{e.streams.forEach((e=>{if(this._remoteStreams||(this._remoteStreams=[]),this._remoteStreams.includes(e))return;this._remoteStreams.push(e);const t=new Event("addstream");t.stream=e,this.dispatchEvent(t)}))})}});const t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){const e=this;return this._onaddstreampoly||this.addEventListener("track",this._onaddstreampoly=function(t){t.streams.forEach((t=>{if(e._remoteStreams||(e._remoteStreams=[]),e._remoteStreams.indexOf(t)>=0)return;e._remoteStreams.push(t);const n=new Event("addstream");n.stream=t,e.dispatchEvent(n)}))}),t.apply(e,arguments)}}}function Z(e){if("object"!=typeof e||!e.RTCPeerConnection)return;const t=e.RTCPeerConnection.prototype,n=t.createOffer,r=t.createAnswer,i=t.setLocalDescription,o=t.setRemoteDescription,s=t.addIceCandidate;t.createOffer=function(e,t){const r=arguments.length>=2?arguments[2]:arguments[0],i=n.apply(this,[r]);return t?(i.then(e,t),Promise.resolve()):i},t.createAnswer=function(e,t){const n=arguments.length>=2?arguments[2]:arguments[0],i=r.apply(this,[n]);return t?(i.then(e,t),Promise.resolve()):i};let a=function(e,t,n){const r=i.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r};t.setLocalDescription=a,a=function(e,t,n){const r=o.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.setRemoteDescription=a,a=function(e,t,n){const r=s.apply(this,[e]);return n?(r.then(t,n),Promise.resolve()):r},t.addIceCandidate=a}function ee(e){const t=e&&e.navigator;if(t.mediaDevices&&t.mediaDevices.getUserMedia){const e=t.mediaDevices,n=e.getUserMedia.bind(e);t.mediaDevices.getUserMedia=e=>n(te(e))}!t.getUserMedia&&t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,n,r){t.mediaDevices.getUserMedia(e).then(n,r)}.bind(t))}function te(e){return e&&void 0!==e.video?Object.assign({},e,{video:g(e.video)}):e}function ne(e){if(!e.RTCPeerConnection)return;const t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,n){if(e&&e.iceServers){const t=[];for(let n=0;n<e.iceServers.length;n++){let r=e.iceServers[n];!r.hasOwnProperty("urls")&&r.hasOwnProperty("url")?(m("RTCIceServer.url","RTCIceServer.urls"),r=JSON.parse(JSON.stringify(r)),r.urls=r.url,delete r.url,t.push(r)):t.push(e.iceServers[n])}e.iceServers=t}return new t(e,n)},e.RTCPeerConnection.prototype=t.prototype,"generateCertificate"in t&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:()=>t.generateCertificate})}function re(e){"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get(){return{receiver:this.receiver}}})}function ie(e){const t=e.RTCPeerConnection.prototype.createOffer;e.RTCPeerConnection.prototype.createOffer=function(e){if(e){void 0!==e.offerToReceiveAudio&&(e.offerToReceiveAudio=!!e.offerToReceiveAudio);const t=this.getTransceivers().find((e=>"audio"===e.receiver.track.kind));!1===e.offerToReceiveAudio&&t?"sendrecv"===t.direction?t.setDirection?t.setDirection("sendonly"):t.direction="sendonly":"recvonly"===t.direction&&(t.setDirection?t.setDirection("inactive"):t.direction="inactive"):!0!==e.offerToReceiveAudio||t||this.addTransceiver("audio"),void 0!==e.offerToReceiveVideo&&(e.offerToReceiveVideo=!!e.offerToReceiveVideo);const n=this.getTransceivers().find((e=>"video"===e.receiver.track.kind));!1===e.offerToReceiveVideo&&n?"sendrecv"===n.direction?n.setDirection?n.setDirection("sendonly"):n.direction="sendonly":"recvonly"===n.direction&&(n.setDirection?n.setDirection("inactive"):n.direction="inactive"):!0!==e.offerToReceiveVideo||n||this.addTransceiver("video")}return t.apply(this,arguments)}}function oe(e){"object"!=typeof e||e.AudioContext||(e.AudioContext=e.webkitAudioContext)}var se=n(882),ae=n.n(se);function ce(e){if(!e.RTCIceCandidate||e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)return;const t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){if("object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&((e=JSON.parse(JSON.stringify(e))).candidate=e.candidate.substr(2)),e.candidate&&e.candidate.length){const n=new t(e),r=ae().parseCandidate(e.candidate),i=Object.assign(n,r);return i.toJSON=function(){return{candidate:i.candidate,sdpMid:i.sdpMid,sdpMLineIndex:i.sdpMLineIndex,usernameFragment:i.usernameFragment}},i}return new t(e)},e.RTCIceCandidate.prototype=t.prototype,l(e,"icecandidate",(t=>(t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t)))}function ue(e){if(!e.RTCPeerConnection)return;const t=v(e);"sctp"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"sctp",{get(){return void 0===this._sctp?null:this._sctp}});const n=function(e){if(!e||!e.sdp)return!1;const t=ae().splitSections(e.sdp);return t.shift(),t.some((e=>{const t=ae().parseMLine(e);return t&&"application"===t.kind&&-1!==t.protocol.indexOf("SCTP")}))},r=function(e){const t=e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);if(null===t||t.length<2)return-1;const n=parseInt(t[1],10);return n!=n?-1:n},i=function(e){let n=65536;return"firefox"===t.browser&&(n=t.version<57?-1===e?16384:2147483637:t.version<60?57===t.version?65535:65536:2147483637),n},o=function(e,n){let r=65536;"firefox"===t.browser&&57===t.version&&(r=65535);const i=ae().matchPrefix(e.sdp,"a=max-message-size:");return i.length>0?r=parseInt(i[0].substr(19),10):"firefox"===t.browser&&-1!==n&&(r=2147483637),r},s=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){if(this._sctp=null,"chrome"===t.browser&&t.version>=76){const{sdpSemantics:e}=this.getConfiguration();"plan-b"===e&&Object.defineProperty(this,"sctp",{get(){return void 0===this._sctp?null:this._sctp},enumerable:!0,configurable:!0})}if(n(arguments[0])){const e=r(arguments[0]),t=i(e),n=o(arguments[0],e);let s;s=0===t&&0===n?Number.POSITIVE_INFINITY:0===t||0===n?Math.max(t,n):Math.min(t,n);const a={};Object.defineProperty(a,"maxMessageSize",{get:()=>s}),this._sctp=a}return s.apply(this,arguments)}}function pe(e){if(!e.RTCPeerConnection||!("createDataChannel"in e.RTCPeerConnection.prototype))return;function t(e,t){const n=e.send;e.send=function(){const r=arguments[0],i=r.length||r.size||r.byteLength;if("open"===e.readyState&&t.sctp&&i>t.sctp.maxMessageSize)throw new TypeError("Message too large (can send a maximum of "+t.sctp.maxMessageSize+" bytes)");return n.apply(e,arguments)}}const n=e.RTCPeerConnection.prototype.createDataChannel;e.RTCPeerConnection.prototype.createDataChannel=function(){const e=n.apply(this,arguments);return t(e,this),e},l(e,"datachannel",(e=>(t(e.channel,e.target),e)))}function le(e){if(!e.RTCPeerConnection||"connectionState"in e.RTCPeerConnection.prototype)return;const t=e.RTCPeerConnection.prototype;Object.defineProperty(t,"connectionState",{get(){return{completed:"connected",checking:"connecting"}[this.iceConnectionState]||this.iceConnectionState},enumerable:!0,configurable:!0}),Object.defineProperty(t,"onconnectionstatechange",{get(){return this._onconnectionstatechange||null},set(e){this._onconnectionstatechange&&(this.removeEventListener("connectionstatechange",this._onconnectionstatechange),delete this._onconnectionstatechange),e&&this.addEventListener("connectionstatechange",this._onconnectionstatechange=e)},enumerable:!0,configurable:!0}),["setLocalDescription","setRemoteDescription"].forEach((e=>{const n=t[e];t[e]=function(){return this._connectionstatechangepoly||(this._connectionstatechangepoly=e=>{const t=e.target;if(t._lastConnectionState!==t.connectionState){t._lastConnectionState=t.connectionState;const n=new Event("connectionstatechange",e);t.dispatchEvent(n)}return e},this.addEventListener("iceconnectionstatechange",this._connectionstatechangepoly)),n.apply(this,arguments)}}))}function de(e){if(!e.RTCPeerConnection)return;const t=v(e);if("chrome"===t.browser&&t.version>=71)return;if("safari"===t.browser&&t.version>=605)return;const n=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(e){return e&&e.sdp&&-1!==e.sdp.indexOf("\na=extmap-allow-mixed")&&(e.sdp=e.sdp.split("\n").filter((e=>"a=extmap-allow-mixed"!==e.trim())).join("\n")),n.apply(this,arguments)}}const he=function({window:e}={},t={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0}){const n=f,c=v(e),u={browserDetails:c,commonShim:a,extractVersion:p,disableLog:d,disableWarnings:h};switch(c.browser){case"chrome":if(!r||!O||!t.shimChrome)return n("Chrome shim is not included in this adapter release."),u;if(null===c.version)return n("Chrome shim can not determine version, not shimming."),u;n("adapter.js shimming chrome."),u.browserShim=r,w(e),S(e),O(e),P(e),j(e),E(e),R(e),k(e),M(e),ce(e),le(e),ue(e),pe(e),de(e);break;case"firefox":if(!o||!B||!t.shimFirefox)return n("Firefox shim is not included in this adapter release."),u;n("adapter.js shimming firefox."),u.browserShim=o,U(e),B(e),V(e),z(e),H(e),q(e),W(e),J(e),$(e),Q(e),K(e),ce(e),le(e),ue(e),pe(e);break;case"edge":if(!i||!F||!t.shimEdge)return n("MS edge shim is not included in this adapter release."),u;n("adapter.js shimming edge."),u.browserShim=i,L(e),A(e),F(e),N(e),ue(e),pe(e);break;case"safari":if(!s||!t.shimSafari)return n("Safari shim is not included in this adapter release."),u;n("adapter.js shimming safari."),u.browserShim=s,ne(e),ie(e),Z(e),X(e),Y(e),re(e),ee(e),oe(e),ce(e),ue(e),pe(e),de(e);break;default:n("Unsupported browser!")}return u}({window:"undefined"==typeof window?void 0:window})},397:e=>{var t,n;window.mozRTCPeerConnection||navigator.mozGetUserMedia?(t="moz",n=parseInt(navigator.userAgent.match(/Firefox\/([0-9]+)\./)[1],10)):(window.webkitRTCPeerConnection||navigator.webkitGetUserMedia)&&(t="webkit",n=navigator.userAgent.match(/Chrom(e|ium)/)&&parseInt(navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)[2],10));var r=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection,i=window.mozRTCIceCandidate||window.RTCIceCandidate,o=window.mozRTCSessionDescription||window.RTCSessionDescription,s=window.webkitMediaStream||window.MediaStream,a="https:"===window.location.protocol&&("webkit"===t&&n>=26||"moz"===t&&n>=33),c=window.AudioContext||window.webkitAudioContext,u=document.createElement("video"),p=u&&u.canPlayType&&"probably"===u.canPlayType('video/webm; codecs="vp8", vorbis'),l=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.msGetUserMedia||navigator.mozGetUserMedia;e.exports={prefix:t,browserVersion:n,support:!!r&&!!l,supportRTCPeerConnection:!!r,supportVp8:p,supportGetUserMedia:!!l,supportDataChannel:!!(r&&r.prototype&&r.prototype.createDataChannel),supportWebAudio:!(!c||!c.prototype.createMediaStreamSource),supportMediaStream:!(!s||!s.prototype.removeTrack),supportScreenSharing:!!a,AudioContext:c,PeerConnection:r,SessionDescription:o,IceCandidate:i,MediaStream:s,getUserMedia:l}},840:(e,t,n)=>{var r;try{r=n(284)}catch(e){}finally{if(r||"undefined"==typeof window||(r=window),!r)throw new Error("Could not determine global this")}var i=r.WebSocket||r.MozWebSocket,o=n(566);function s(e,t){return t?new i(e,t):new i(e)}i&&["CONNECTING","OPEN","CLOSING","CLOSED"].forEach((function(e){Object.defineProperty(s,e,{get:function(){return i[e]}})})),e.exports={w3cwebsocket:i?s:null,version:o}},566:(e,t,n)=>{e.exports=n(847).version},847:e=>{"use strict";e.exports={version:"1.0.33"}}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=new(n(445).default.JanusRoom)("wss://janus.conf.meetecho.com/ws",{keepalive:"true"});e.eventRoomjoined.on((function(e){console.debug("Roomjoined"),console.debug(e)})),e.eventNeedVideoLocal.on((function(e){e.element=document.getElementById("localvideo")})),e.eventNeedVideoRemote.on((function(e){if(document.getElementById(e.feedInfo.id))e.element=document.getElementById(e.feedInfo.id);else{var t=document.createElement("video");t.id=e.feedInfo.id,t.autoplay=!0,document.getElementById("h"+e.feedInfo.id)&&document.getElementById("h"+e.feedInfo.id).remove(),document.getElementById("remotvideocontainer").innerHTML+='<h2 id="h'+e.feedInfo.id+'"> '+e.feedInfo.id+" display : "+e.feedInfo.display+" </h2>",document.getElementById("remotvideocontainer").appendChild(t),e.element=t}var n="no_video_"+e.feedInfo.id.toString(),r=document.getElementById(n);r&&r.remove()})),e.eventOnLeaving.on((function(e){var t=document.getElementById(e.toString()),n="no_video_"+e.toString(),r=document.getElementById(n),i=document.getElementById("h"+e);t&&t.remove(),r&&r.remove(),i&&i.remove()})),e.eventOnUnpublished.on((function(e){var t=document.getElementById(e.toString()),n="no_video_"+e.toString();if(t){var r=document.createElement("span");r.id=n,r.innerHTML="no video  publish",t.parentNode.replaceChild(r,t)}})),e.joinRoom(1234,"fullname2").then((function(e){console.log("joinRoom 1234")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,